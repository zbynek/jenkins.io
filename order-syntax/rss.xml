<?xml version="1.0" encoding="utf-8" ?>
<?xml version='1.0' encoding='utf-8' ?>
<feed xml:lang="en-US" xmlns="http://www.w3.org/2005/Atom">
<id>https://zbynek.github.io/jenkins.io/order-syntax/</id>
<title>Jenkins Blog</title>
<updated>2019-12-12T20:07:24+00:00</updated>
<link rel="self" type="application/atom+xml" href="https://zbynek.github.io/jenkins.io/order-syntax/rss.xml" />
<link rel="alternate" type="text/html" href="https://zbynek.github.io/jenkins.io/order-syntax/" />
<entry>
<id>https://zbynek.github.io/jenkins.io/order-syntax/blog/2019/12/10/introducing-aws-secrets-manager-credentials-provider-plugin/</id>
<title>Introducing the AWS Secrets Manager Credentials Provider for Jenkins</title>
<updated>2019-12-12T20:07:24+00:00</updated>
<published>2019-12-10T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://zbynek.github.io/jenkins.io/order-syntax/blog/2019/12/10/introducing-aws-secrets-manager-credentials-provider-plugin/" />
<author>
<name>chriskilding</name>
</author>
<category term="pipeline"></category>
<category term="plugins"></category>
<category term="aws"></category>
<category term="credentials"></category>
<category term="security"></category>
<summary>
API keys and secrets are difficult to handle safely, and probably something you avoid thinking about. In this post I&#8217;ll show how the new AWS Secrets Manager Credentials Provider plugin allows you to marshal your secrets into one place, and use them securely from Jenkins.


When CI/CD pipelines moved to the public cloud, credential management did not evolve with them. If you&#8217;re in this situation, you may have seen a number of tactical workarounds to keep Jenkins builds talking to the services they depend on. The workarounds range from bad (hardcoding plaintext secrets into Git) to merely painful (wrangling Hiera EYAML),...
</summary>
<content type="html">
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;API keys and secrets are difficult to handle safely, and probably something you avoid thinking about. In this post I’ll show how the new &lt;a href=&quot;https://plugins.jenkins.io/aws-secrets-manager-credentials-provider&quot;&gt;AWS Secrets Manager Credentials Provider&lt;/a&gt; plugin allows you to marshal your secrets into one place, and use them securely from Jenkins.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When CI/CD pipelines moved to the public cloud, credential management did not evolve with them. If you’re in this situation, you may have seen a number of tactical workarounds to keep Jenkins builds talking to the services they depend on. The workarounds range from bad (hardcoding plaintext secrets into Git) to merely painful (wrangling Hiera EYAML), but their common feature is that they tend to make copies of secrets beyond the reach of automation. This increases their attack surface, makes routine key rotation impractical, and makes remediation difficult after a breach.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The good news is that there is a better way!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;AWS Secrets Manager is a comprehensive solution for secure secret storage. You define a secret just once for your whole AWS account, then you give your consumers permission to use the secrets. Secrets Manager lets you manage a secret entry (name and metadata) separately from its value, and it integrates with other AWS services that you already use:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Secret entry management: Manual (Web console, AWS CLI) or with an infrastructure management tool (&lt;a href=&quot;https://www.terraform.io/docs/providers/aws/r/secretsmanager_secret.html&quot;&gt;Terraform&lt;/a&gt;, CloudFormation etc.)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Secret value management: Manual (Web console, AWS CLI) or automatic (secret rotation Lambda function).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Access control: AWS IAM policies (for both applications and human operators).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Secret encryption: Amazon KMS automatically encrypts the secret value. Use either the account’s default KMS key, or a customer-managed KMS key.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Auditing: AWS CloudTrail and CloudWatch Events.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A couple of teams in my company started to use Secrets Manager from Jenkins jobs by calling the AWS CLI, but this remained a niche approach as it was quite unwieldy. There was clearly an appetite to integrate key developer apps with a centralised secrets store, but production-ready integrations were needed for wider adoption. So this year I created the &lt;a href=&quot;https://plugins.jenkins.io/aws-secrets-manager-credentials-provider&quot;&gt;AWS Secrets Manager Credentials Provider&lt;/a&gt; plugin for Jenkins, with help from friends in the Jenkins community, to do exactly that.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is how you set it up…​&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Install the plugin from the Jenkins update center.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Give Jenkins read-only access to Secrets Manager with an IAM policy.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(Optional) Configure the plugin, either through the Global Configuration screen or Jenkins Configuration As Code.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is how you use it…​&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Create your build secrets in AWS Secrets Manager. (You can start by uploading secrets via the AWS CLI. More sophisticated methods of secret creation are also available.)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;View the credentials in the Jenkins UI, to check that Jenkins can see them.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Bind the credentials by ID in your Jenkins job.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The provider supports the following standard Jenkins credential types:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Secret Text&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Username With Password&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;SSH User Private Key&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;PKCS#12 Certificate&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;And it has powerful advantages over quick-fix tactical solutions:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Your Jenkins jobs consume the credentials with no knowledge of Secrets Manager, so they stay vendor-independent.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The provider caches relevant Secrets Manager API calls, for a quicker and more reliable experience.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The provider integrates with the ecosystem of existing Jenkins credential consumers, such as the Git and SSH Agent plugins.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The provider records credential usage in the central Jenkins credentials tracking log.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Jenkins can use multiple credentials providers concurrently, so you can incrementally migrate credentials to Secrets Manager while consuming other credentials from your existing providers.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;After the plugin’s first public release, developers at other companies adopted it too. It has had contributions so far from people at Elsevier, GoDaddy, and Northeastern University, as well as the fantastic Jenkins core team. We even got &lt;a href=&quot;https://github.com/jenkinsci/aws-secrets-manager-credentials-provider-plugin/pull/8#issuecomment-543721057&quot;&gt;fan mail&lt;/a&gt; for our work!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In enterprise security, &quot;The important things are always simple. The simple things are always hard. The easy way is always mined.&quot; (&lt;a href=&quot;https://medium.com/@thegrugq/equihax-fact-enabled-wild-speculation-21fd59aa39e2&quot;&gt;@thegrugq&lt;/a&gt;) It’s easy to buy a shiny ‘next generation&#39; security appliance and drop it into your network. But it’s hard to embed the security fundamentals (like secrets management, OS patching, secure development) across your organisation. This Jenkins plugin is part of the effort &lt;sup class=&quot;footnote&quot;&gt;[&lt;a id=&quot;_footnoteref_1&quot; class=&quot;footnote&quot; href=&quot;#_footnotedef_1&quot; title=&quot;View footnote.&quot;&gt;1&lt;/a&gt;]&lt;/sup&gt; to take one of the persistent hard problems in security, and make it easier for everyone.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;footnotes&quot;&gt;
&lt;hr&gt;
&lt;div class=&quot;footnote&quot; id=&quot;_footnotedef_1&quot;&gt;
&lt;a href=&quot;#_footnoteref_1&quot;&gt;1&lt;/a&gt;. If you’re on Azure or you run most of your workload on Kubernetes, check out the &lt;a href=&quot;https://plugins.jenkins.io/azure-credentials&quot;&gt;Azure Credentials Plugin&lt;/a&gt; and the &lt;a href=&quot;https://plugins.jenkins.io/kubernetes-credentials-provider&quot;&gt;Kubernetes Credentials Provider Plugin&lt;/a&gt;.
&lt;/div&gt;
&lt;/hr&gt;&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://zbynek.github.io/jenkins.io/order-syntax/blog/2019/12/02/matrix-building-with-scripted-pipeline/</id>
<title>Matrix building in scripted pipeline</title>
<updated>2019-12-12T20:07:24+00:00</updated>
<published>2019-12-02T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://zbynek.github.io/jenkins.io/order-syntax/blog/2019/12/02/matrix-building-with-scripted-pipeline/" />
<author>
<name>sgleske</name>
</author>
<category term="matrix"></category>
<category term="pipeline"></category>
<category term="plugins"></category>
<category term="scripted"></category>
<summary>
Table of Contents

Matrix building with scripted pipeline
Screenshot of matrix pipeline
Adding static choices
Adding dynamic choices
Full pipeline example with dynamic choices
Background: How does it work?
Exposing a shared library pipeline step
Summary



With the recent announcement about matrix building you can perform
Matrix builds
with declarative pipeline.  However, if you must use scripted pipeline, then
I&#8217;m going to cover how to matrix build platforms and tools using scripted
pipeline.  The examples in this post are modeled after the declarative pipeline
matrix examples.


Matrix building with scripted pipeline


The following Jenkins scripted pipeline will build combinations across two
matrix axes.  However, adding more axes to the matrix is just as easy...
</summary>
<content type="html">
&lt;div id=&quot;toc&quot; class=&quot;toc&quot;&gt;
&lt;div id=&quot;toctitle&quot;&gt;Table of Contents&lt;/div&gt;
&lt;ul class=&quot;sectlevel1&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#matrix-building-with-scripted-pipeline&quot;&gt;Matrix building with scripted pipeline&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#screenshot-of-matrix-pipeline&quot;&gt;Screenshot of matrix pipeline&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#adding-static-choices&quot;&gt;Adding static choices&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#adding-dynamic-choices&quot;&gt;Adding dynamic choices&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#full-pipeline-example-with-dynamic-choices&quot;&gt;Full pipeline example with dynamic choices&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#background-how-does-it-work&quot;&gt;Background: How does it work?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#exposing-a-shared-library-pipeline-step&quot;&gt;Exposing a shared library pipeline step&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#summary&quot;&gt;Summary&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With the recent announcement about matrix building you can perform
&lt;a href=&quot;https://jenkins.io/blog/2019/11/22/welcome-to-the-matrix/&quot;&gt;Matrix builds
with declarative pipeline&lt;/a&gt;.  However, if you must use scripted pipeline, then
I’m going to cover how to matrix build platforms and tools using scripted
pipeline.  The examples in this post are modeled after the declarative pipeline
matrix examples.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;matrix-building-with-scripted-pipeline&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#matrix-building-with-scripted-pipeline&quot; /&gt;Matrix building with scripted pipeline&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The following Jenkins scripted pipeline will build combinations across two
matrix axes.  However, adding more axes to the matrix is just as easy as adding
another entry to the &lt;code&gt;Map matrix_axes&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Jenkinsfile&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;groovy&quot;&gt;&lt;span style=&quot;color:#777&quot;&gt;// you can add more axes and this will still work&lt;/span&gt;
&lt;span style=&quot;color:#0a8;font-weight:bold&quot;&gt;Map&lt;/span&gt; matrix_axes = [
    &lt;span style=&quot;color:#606&quot;&gt;PLATFORM&lt;/span&gt;: [&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;linux&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;windows&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;mac&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;],
    &lt;span style=&quot;color:#606&quot;&gt;BROWSER&lt;/span&gt;: [&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;firefox&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;chrome&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;safari&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;edge&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;]
]

&lt;span style=&quot;color:#007&quot;&gt;@NonCPS&lt;/span&gt;
&lt;span style=&quot;color:#0a8;font-weight:bold&quot;&gt;List&lt;/span&gt; getMatrixAxes(&lt;span style=&quot;color:#0a8;font-weight:bold&quot;&gt;Map&lt;/span&gt; matrix_axes) {
    &lt;span style=&quot;color:#0a8;font-weight:bold&quot;&gt;List&lt;/span&gt; axes = &lt;span style=&quot;color:#339;font-weight:bold&quot;&gt;[]&lt;/span&gt;
    matrix_axes.each { axis, values -&amp;gt;
        &lt;span style=&quot;color:#0a8;font-weight:bold&quot;&gt;List&lt;/span&gt; axisList = &lt;span style=&quot;color:#339;font-weight:bold&quot;&gt;[]&lt;/span&gt;
        values.each { value -&amp;gt;
            axisList &amp;lt;&amp;lt; [(axis): value]
        }
        axes &amp;lt;&amp;lt; axisList
    }
    &lt;span style=&quot;color:#777&quot;&gt;// calculate cartesian product&lt;/span&gt;
    axes.combinations()*.sum()
}

&lt;span style=&quot;color:#777&quot;&gt;// filter the matrix axes since&lt;/span&gt;
&lt;span style=&quot;color:#777&quot;&gt;// Safari is not available on Linux and&lt;/span&gt;
&lt;span style=&quot;color:#777&quot;&gt;// Edge is only available on Windows&lt;/span&gt;
&lt;span style=&quot;color:#0a8;font-weight:bold&quot;&gt;List&lt;/span&gt; axes = getMatrixAxes(matrix_axes).findAll { axis -&amp;gt;
    !(axis[&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;BROWSER&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;] == &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;safari&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt; &amp;amp;&amp;amp; axis[&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;PLATFORM&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;] == &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;linux&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;) &amp;amp;&amp;amp;
    !(axis[&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;BROWSER&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;] == &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;edge&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt; &amp;amp;&amp;amp; axis[&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;PLATFORM&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;] != &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;windows&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;)
}

&lt;span style=&quot;color:#777&quot;&gt;// parallel task map&lt;/span&gt;
&lt;span style=&quot;color:#0a8;font-weight:bold&quot;&gt;Map&lt;/span&gt; tasks = [&lt;span style=&quot;color:#606&quot;&gt;failFast&lt;/span&gt;: &lt;span style=&quot;color:#069&quot;&gt;false&lt;/span&gt;]

&lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;for&lt;/span&gt;(&lt;span style=&quot;color:#339;font-weight:bold&quot;&gt;int&lt;/span&gt; i = &lt;span style=&quot;color:#00D&quot;&gt;0&lt;/span&gt;; i &amp;lt; axes.size(); i++) {
    &lt;span style=&quot;color:#777&quot;&gt;// convert the Axis into valid values for withEnv step&lt;/span&gt;
    &lt;span style=&quot;color:#0a8;font-weight:bold&quot;&gt;Map&lt;/span&gt; axis = axes[i]
    &lt;span style=&quot;color:#0a8;font-weight:bold&quot;&gt;List&lt;/span&gt; axisEnv = axis.collect { k, v -&amp;gt;
        &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;background-color:hsla(0,0%,0%,0.07);color:black&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;${&lt;/span&gt;k&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;background-color:hsla(0,0%,0%,0.07);color:black&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;${&lt;/span&gt;v&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
    }
    &lt;span style=&quot;color:#777&quot;&gt;// let&#39;s say you have diverse agents among Windows, Mac and Linux all of&lt;/span&gt;
    &lt;span style=&quot;color:#777&quot;&gt;// which have proper labels for their platform and what browsers are&lt;/span&gt;
    &lt;span style=&quot;color:#777&quot;&gt;// available on those agents.&lt;/span&gt;
    &lt;span style=&quot;color:#0a8;font-weight:bold&quot;&gt;String&lt;/span&gt; nodeLabel = &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;os:&lt;/span&gt;&lt;span style=&quot;background-color:hsla(0,0%,0%,0.07);color:black&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;${&lt;/span&gt;axis[&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;PLATFORM&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;]&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt; &amp;amp;&amp;amp; browser:&lt;/span&gt;&lt;span style=&quot;background-color:hsla(0,0%,0%,0.07);color:black&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;${&lt;/span&gt;axis[&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;BROWSER&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;]&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
    tasks[axisEnv.join(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;, &lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;)] = { -&amp;gt;
        node(nodeLabel) {
            withEnv(axisEnv) {
                stage(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Build&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;) {
                    echo nodeLabel
                    sh &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;echo Do Build for ${PLATFORM} - ${BROWSER}&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;
                }
                stage(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Test&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;) {
                    echo nodeLabel
                    sh &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;echo Do Build for ${PLATFORM} - ${BROWSER}&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;
                }
            }
        }
    }
}

stage(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Matrix builds&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;) {
    parallel(tasks)
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Matrix axes contain the following combinations:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;text&quot;&gt;[PLATFORM=linux, BROWSER=firefox]
[PLATFORM=windows, BROWSER=firefox]
[PLATFORM=mac, BROWSER=firefox]
[PLATFORM=linux, BROWSER=chrome]
[PLATFORM=windows, BROWSER=chrome]
[PLATFORM=mac, BROWSER=chrome]
[PLATFORM=windows, BROWSER=safari]
[PLATFORM=mac, BROWSER=safari]
[PLATFORM=windows, BROWSER=edge]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock important&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-important&quot; title=&quot;Important&quot; /&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It is worth noting that Jenkins agent labels can contain a colon (&lt;code&gt;:&lt;/code&gt;).  So
&lt;code&gt;os:linux&lt;/code&gt; and &lt;code&gt;browser:firefox&lt;/code&gt; are both valid agent labels.  The node
expression &lt;code&gt;os:linux &amp;amp;&amp;amp; browser:firefox&lt;/code&gt; will search for Jenkins agents which
have &lt;strong&gt;both labels&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;screenshot-of-matrix-pipeline&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#screenshot-of-matrix-pipeline&quot; /&gt;Screenshot of matrix pipeline&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The following is a screenshot of the pipeline code above running in a sandbox
Jenkins environment.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://zbynek.github.io/jenkins.io/order-syntax/images/matrix-scripted-pipeline-screenshots/pipeline-screenshot.png&quot; alt=&quot;Screenshot of matrix pipeline&quot; /&gt;&lt;/span&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;adding-static-choices&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#adding-static-choices&quot; /&gt;Adding static choices&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It is useful for users to be able to customize building matrices when a build
is triggered.  Adding static choices requires only a few changes to the above
script.  Static choices as in we hard code the question and matrix filters.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Jenkinsfile&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;groovy&quot;&gt;&lt;span style=&quot;color:#0a8;font-weight:bold&quot;&gt;Map&lt;/span&gt; response = [:]
stage(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Choose combinations&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;) {
    response = input(
        &lt;span style=&quot;color:#606&quot;&gt;id&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Platform&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;,
        &lt;span style=&quot;color:#606&quot;&gt;message&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Customize your matrix build.&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;,
        &lt;span style=&quot;color:#606&quot;&gt;parameters&lt;/span&gt;: [
            choice(
                &lt;span style=&quot;color:#606&quot;&gt;choices&lt;/span&gt;: [&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;all&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;linux&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;mac&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;windows&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;],
                &lt;span style=&quot;color:#606&quot;&gt;description&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Choose a single platform or all platforms to run tests.&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;,
                &lt;span style=&quot;color:#606&quot;&gt;name&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;PLATFORM&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;),
            choice(
                &lt;span style=&quot;color:#606&quot;&gt;choices&lt;/span&gt;: [&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;all&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;chrome&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;edge&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;firefox&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;safari&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;],
                &lt;span style=&quot;color:#606&quot;&gt;description&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Choose a single browser or all browsers to run tests.&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;,
                &lt;span style=&quot;color:#606&quot;&gt;name&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;BROWSER&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;)
        ])
}

&lt;span style=&quot;color:#777&quot;&gt;// filter the matrix axes since&lt;/span&gt;
&lt;span style=&quot;color:#777&quot;&gt;// Safari is not available on Linux and&lt;/span&gt;
&lt;span style=&quot;color:#777&quot;&gt;// Edge is only available on Windows&lt;/span&gt;
&lt;span style=&quot;color:#0a8;font-weight:bold&quot;&gt;List&lt;/span&gt; axes = getMatrixAxes(matrix_axes).findAll { axis -&amp;gt;
    (response[&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;PLATFORM&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;] == &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;all&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt; || response[&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;PLATFORM&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;] == axis[&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;PLATFORM&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;]) &amp;amp;&amp;amp;
    (response[&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;BROWSER&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;] == &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;all&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt; || response[&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;BROWSER&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;] == axis[&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;BROWSER&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;]) &amp;amp;&amp;amp;
    !(axis[&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;BROWSER&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;] == &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;safari&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt; &amp;amp;&amp;amp; axis[&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;PLATFORM&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;] == &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;linux&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;) &amp;amp;&amp;amp;
    !(axis[&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;BROWSER&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;] == &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;edge&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt; &amp;amp;&amp;amp; axis[&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;PLATFORM&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;] != &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;windows&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;)
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The pipeline code then renders the following choice dialog.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://zbynek.github.io/jenkins.io/order-syntax/images/matrix-scripted-pipeline-screenshots/static-choice-dialog.png&quot; alt=&quot;Screenshot of a dialog asking a question to customize matrix build&quot; /&gt;&lt;/span&gt;
&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When a user chooses the customized options, the pipeline reacts to the
requested options.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://zbynek.github.io/jenkins.io/order-syntax/images/matrix-scripted-pipeline-screenshots/customized-pipeline-screenshot.png&quot; alt=&quot;Screenshot of pipeline running requested user customizations&quot; /&gt;&lt;/span&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;adding-dynamic-choices&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#adding-dynamic-choices&quot; /&gt;Adding dynamic choices&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Dynamic choices means the choice dialog for users to customize the build is
generated from the &lt;code&gt;Map matrix_axes&lt;/code&gt; rather than being something a pipeline
developer hard codes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For user experience (UX), you’ll want your choices to automatically reflect the
matrix axis options you have available.  For example, let’s say you want to add
a new dimension for Java to the matrix.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;groovy&quot;&gt;&lt;span style=&quot;color:#777&quot;&gt;// you can add more axes and this will still work&lt;/span&gt;
&lt;span style=&quot;color:#0a8;font-weight:bold&quot;&gt;Map&lt;/span&gt; matrix_axes = [
    &lt;span style=&quot;color:#606&quot;&gt;PLATFORM&lt;/span&gt;: [&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;linux&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;windows&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;mac&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;],
    &lt;span style=&quot;color:#606&quot;&gt;JAVA&lt;/span&gt;: [&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;openjdk8&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;openjdk10&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;openjdk11&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;],
    &lt;span style=&quot;color:#606&quot;&gt;BROWSER&lt;/span&gt;: [&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;firefox&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;chrome&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;safari&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;edge&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;]
]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To support dynamic choices, your choice and matrix axis filter needs to be
updated to the following.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;groovy&quot;&gt;&lt;span style=&quot;color:#0a8;font-weight:bold&quot;&gt;Map&lt;/span&gt; response = [:]
stage(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Choose combinations&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;) {
    response = input(
        &lt;span style=&quot;color:#606&quot;&gt;id&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Platform&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;,
        &lt;span style=&quot;color:#606&quot;&gt;message&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Customize your matrix build.&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;,
        &lt;span style=&quot;color:#606&quot;&gt;parameters&lt;/span&gt;: matrix_axes.collect { key, options -&amp;gt;
            choice(
                &lt;span style=&quot;color:#606&quot;&gt;choices&lt;/span&gt;: [&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;all&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;] + options.sort(),
                &lt;span style=&quot;color:#606&quot;&gt;description&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Choose a single &lt;/span&gt;&lt;span style=&quot;background-color:hsla(0,0%,0%,0.07);color:black&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;${&lt;/span&gt;key.toLowerCase()&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt; or all to run tests.&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;,
                &lt;span style=&quot;color:#606&quot;&gt;name&lt;/span&gt;: key)
        })
}

&lt;span style=&quot;color:#777&quot;&gt;// filter the matrix axes since&lt;/span&gt;
&lt;span style=&quot;color:#777&quot;&gt;// Safari is not available on Linux and&lt;/span&gt;
&lt;span style=&quot;color:#777&quot;&gt;// Edge is only available on Windows&lt;/span&gt;
&lt;span style=&quot;color:#0a8;font-weight:bold&quot;&gt;List&lt;/span&gt; axes = getMatrixAxes(matrix_axes).findAll { axis -&amp;gt;
    response.every { key, choice -&amp;gt;
        choice == &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;all&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt; || choice == axis[key]
    } &amp;amp;&amp;amp;
    !(axis[&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;BROWSER&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;] == &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;safari&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt; &amp;amp;&amp;amp; axis[&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;PLATFORM&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;] == &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;linux&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;) &amp;amp;&amp;amp;
    !(axis[&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;BROWSER&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;] == &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;edge&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt; &amp;amp;&amp;amp; axis[&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;PLATFORM&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;] != &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;windows&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;)
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It will dynamically generate choices based on available matrix axes and will
automatically filter if users customize it.  Here’s an example dialog and
rendered choice when the pipeline executes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://zbynek.github.io/jenkins.io/order-syntax/images/matrix-scripted-pipeline-screenshots/dynamic-choice-dialog.png&quot; alt=&quot;Screenshot of dynamically generated dialog for user to customize choices of matrix build&quot; /&gt;&lt;/span&gt;
&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://zbynek.github.io/jenkins.io/order-syntax/images/matrix-scripted-pipeline-screenshots/dynamic-customized-pipeline-screenshot.png&quot; alt=&quot;Screenshot of pipeline running user choices in a matrix&quot; /&gt;&lt;/span&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;full-pipeline-example-with-dynamic-choices&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#full-pipeline-example-with-dynamic-choices&quot; /&gt;Full pipeline example with dynamic choices&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The following script is the full pipeline example which contains dynamic
choices.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;groovy&quot;&gt;&lt;span style=&quot;color:#777&quot;&gt;// you can add more axes and this will still work&lt;/span&gt;
&lt;span style=&quot;color:#0a8;font-weight:bold&quot;&gt;Map&lt;/span&gt; matrix_axes = [
    &lt;span style=&quot;color:#606&quot;&gt;PLATFORM&lt;/span&gt;: [&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;linux&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;windows&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;mac&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;],
    &lt;span style=&quot;color:#606&quot;&gt;JAVA&lt;/span&gt;: [&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;openjdk8&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;openjdk10&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;openjdk11&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;],
    &lt;span style=&quot;color:#606&quot;&gt;BROWSER&lt;/span&gt;: [&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;firefox&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;chrome&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;safari&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;edge&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;]
]

&lt;span style=&quot;color:#007&quot;&gt;@NonCPS&lt;/span&gt;
&lt;span style=&quot;color:#0a8;font-weight:bold&quot;&gt;List&lt;/span&gt; getMatrixAxes(&lt;span style=&quot;color:#0a8;font-weight:bold&quot;&gt;Map&lt;/span&gt; matrix_axes) {
    &lt;span style=&quot;color:#0a8;font-weight:bold&quot;&gt;List&lt;/span&gt; axes = &lt;span style=&quot;color:#339;font-weight:bold&quot;&gt;[]&lt;/span&gt;
    matrix_axes.each { axis, values -&amp;gt;
        &lt;span style=&quot;color:#0a8;font-weight:bold&quot;&gt;List&lt;/span&gt; axisList = &lt;span style=&quot;color:#339;font-weight:bold&quot;&gt;[]&lt;/span&gt;
        values.each { value -&amp;gt;
            axisList &amp;lt;&amp;lt; [(axis): value]
        }
        axes &amp;lt;&amp;lt; axisList
    }
    &lt;span style=&quot;color:#777&quot;&gt;// calculate cartesian product&lt;/span&gt;
    axes.combinations()*.sum()
}

&lt;span style=&quot;color:#0a8;font-weight:bold&quot;&gt;Map&lt;/span&gt; response = [:]
stage(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Choose combinations&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;) {
    response = input(
        &lt;span style=&quot;color:#606&quot;&gt;id&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Platform&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;,
        &lt;span style=&quot;color:#606&quot;&gt;message&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Customize your matrix build.&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;,
        &lt;span style=&quot;color:#606&quot;&gt;parameters&lt;/span&gt;: matrix_axes.collect { key, options -&amp;gt;
            choice(
                &lt;span style=&quot;color:#606&quot;&gt;choices&lt;/span&gt;: [&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;all&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;] + options.sort(),
                &lt;span style=&quot;color:#606&quot;&gt;description&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Choose a single &lt;/span&gt;&lt;span style=&quot;background-color:hsla(0,0%,0%,0.07);color:black&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;${&lt;/span&gt;key.toLowerCase()&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt; or all to run tests.&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;,
                &lt;span style=&quot;color:#606&quot;&gt;name&lt;/span&gt;: key)
        })
}

&lt;span style=&quot;color:#777&quot;&gt;// filter the matrix axes since&lt;/span&gt;
&lt;span style=&quot;color:#777&quot;&gt;// Safari is not available on Linux and&lt;/span&gt;
&lt;span style=&quot;color:#777&quot;&gt;// Edge is only available on Windows&lt;/span&gt;
&lt;span style=&quot;color:#0a8;font-weight:bold&quot;&gt;List&lt;/span&gt; axes = getMatrixAxes(matrix_axes).findAll { axis -&amp;gt;
    response.every { key, choice -&amp;gt;
        choice == &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;all&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt; || choice == axis[key]
    } &amp;amp;&amp;amp;
    !(axis[&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;BROWSER&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;] == &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;safari&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt; &amp;amp;&amp;amp; axis[&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;PLATFORM&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;] == &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;linux&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;) &amp;amp;&amp;amp;
    !(axis[&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;BROWSER&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;] == &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;edge&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt; &amp;amp;&amp;amp; axis[&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;PLATFORM&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;] != &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;windows&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;)
}

&lt;span style=&quot;color:#777&quot;&gt;// parallel task map&lt;/span&gt;
&lt;span style=&quot;color:#0a8;font-weight:bold&quot;&gt;Map&lt;/span&gt; tasks = [&lt;span style=&quot;color:#606&quot;&gt;failFast&lt;/span&gt;: &lt;span style=&quot;color:#069&quot;&gt;false&lt;/span&gt;]

&lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;for&lt;/span&gt;(&lt;span style=&quot;color:#339;font-weight:bold&quot;&gt;int&lt;/span&gt; i = &lt;span style=&quot;color:#00D&quot;&gt;0&lt;/span&gt;; i &amp;lt; axes.size(); i++) {
    &lt;span style=&quot;color:#777&quot;&gt;// convert the Axis into valid values for withEnv step&lt;/span&gt;
    &lt;span style=&quot;color:#0a8;font-weight:bold&quot;&gt;Map&lt;/span&gt; axis = axes[i]
    &lt;span style=&quot;color:#0a8;font-weight:bold&quot;&gt;List&lt;/span&gt; axisEnv = axis.collect { k, v -&amp;gt;
        &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;background-color:hsla(0,0%,0%,0.07);color:black&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;${&lt;/span&gt;k&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;background-color:hsla(0,0%,0%,0.07);color:black&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;${&lt;/span&gt;v&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
    }
    &lt;span style=&quot;color:#777&quot;&gt;// let&#39;s say you have diverse agents among Windows, Mac and Linux all of&lt;/span&gt;
    &lt;span style=&quot;color:#777&quot;&gt;// which have proper labels for their platform and what browsers are&lt;/span&gt;
    &lt;span style=&quot;color:#777&quot;&gt;// available on those agents.&lt;/span&gt;
    &lt;span style=&quot;color:#0a8;font-weight:bold&quot;&gt;String&lt;/span&gt; nodeLabel = &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;os:&lt;/span&gt;&lt;span style=&quot;background-color:hsla(0,0%,0%,0.07);color:black&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;${&lt;/span&gt;axis[&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;PLATFORM&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;]&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt; &amp;amp;&amp;amp; browser:&lt;/span&gt;&lt;span style=&quot;background-color:hsla(0,0%,0%,0.07);color:black&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;${&lt;/span&gt;axis[&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;BROWSER&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;]&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
    tasks[axisEnv.join(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;, &lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;)] = { -&amp;gt;
        node(nodeLabel) {
            withEnv(axisEnv) {
                stage(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Build&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;) {
                    echo nodeLabel
                    sh &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;echo Do Build for ${PLATFORM} - ${BROWSER}&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;
                }
                stage(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Test&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;) {
                    echo nodeLabel
                    sh &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;echo Do Build for ${PLATFORM} - ${BROWSER}&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;
                }
            }
        }
    }
}

stage(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Matrix builds&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;) {
    parallel(tasks)
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;background-how-does-it-work&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#background-how-does-it-work&quot; /&gt;Background: How does it work?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The trick is in &lt;code&gt;axes.combinations()*.sum()&lt;/code&gt;.  Groovy combinations are a quick
and easy way to perform a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Cartesian_product&quot;&gt;cartesian product&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here’s a simpler example of how cartesian product works.  Take two simple lists
and create combinations.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;groovy&quot;&gt;&lt;span style=&quot;color:#0a8;font-weight:bold&quot;&gt;List&lt;/span&gt; a = [&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;a&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;b&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;c&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;]
&lt;span style=&quot;color:#0a8;font-weight:bold&quot;&gt;List&lt;/span&gt; b = [&lt;span style=&quot;color:#00D&quot;&gt;1&lt;/span&gt;, &lt;span style=&quot;color:#00D&quot;&gt;2&lt;/span&gt;, &lt;span style=&quot;color:#00D&quot;&gt;3&lt;/span&gt;]

[a, b].combinations()&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The result of &lt;code&gt;[a, b].combinations()&lt;/code&gt; is the following.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code&gt;[
    [&#39;a&#39;, 1],
    [&#39;b&#39;, 1],
    [&#39;c&#39;, 1],
    [&#39;a&#39;, 2],
    [&#39;b&#39;, 2],
    [&#39;c&#39;, 2],
    [&#39;a&#39;, 3],
    [&#39;b&#39;, 3],
    [&#39;c&#39;, 3]
]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Instead of &lt;code&gt;a, b, c&lt;/code&gt; and &lt;code&gt;1, 2, 3&lt;/code&gt; let’s do the same example again but instead using matrix maps.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;groovy&quot;&gt;&lt;span style=&quot;color:#0a8;font-weight:bold&quot;&gt;List&lt;/span&gt; java = [[&lt;span style=&quot;color:#606&quot;&gt;java&lt;/span&gt;: &lt;span style=&quot;color:#00D&quot;&gt;8&lt;/span&gt;], [&lt;span style=&quot;color:#606&quot;&gt;java&lt;/span&gt;: &lt;span style=&quot;color:#00D&quot;&gt;10&lt;/span&gt;]]
&lt;span style=&quot;color:#0a8;font-weight:bold&quot;&gt;List&lt;/span&gt; os = [[&lt;span style=&quot;color:#606&quot;&gt;os&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;linux&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;], [&lt;span style=&quot;color:#606&quot;&gt;os&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;freebsd&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;]]

[java, os].combinations()&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The result of &lt;code&gt;[java, os].combinations()&lt;/code&gt; is the following.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code&gt;[
    [ [java:8],  [os:linux]   ],
    [ [java:10], [os:linux]   ],
    [ [java:8],  [os:freebsd] ],
    [ [java:10], [os:freebsd] ]
]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In order for us to easily use this as a single map we must add the maps
together to create a single map.  For example, adding
&lt;code&gt;[java: 8] + [os: &#39;linux&#39;]&lt;/code&gt; will render a single hashmap
&lt;code&gt;[java: 8, os: &#39;linux&#39;]&lt;/code&gt;.  This means we need our list of lists of maps to
become a simple list of maps so that we can use them effectively in pipelines.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To accomplish this we make use of the
&lt;a href=&quot;https://www.groovy-lang.org/operators.html#_spread_operator&quot;&gt;Groovy spread
operator&lt;/a&gt; (&lt;code&gt;*.&lt;/code&gt; in &lt;code&gt;axes.combinations()*.sum()&lt;/code&gt;).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let’s see the same &lt;code&gt;java&lt;/code&gt;/&lt;code&gt;os&lt;/code&gt; example again but with the spread operator being
used.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;groovy&quot;&gt;&lt;span style=&quot;color:#0a8;font-weight:bold&quot;&gt;List&lt;/span&gt; java = [[&lt;span style=&quot;color:#606&quot;&gt;java&lt;/span&gt;: &lt;span style=&quot;color:#00D&quot;&gt;8&lt;/span&gt;], [&lt;span style=&quot;color:#606&quot;&gt;java&lt;/span&gt;: &lt;span style=&quot;color:#00D&quot;&gt;10&lt;/span&gt;]]
&lt;span style=&quot;color:#0a8;font-weight:bold&quot;&gt;List&lt;/span&gt; os = [[&lt;span style=&quot;color:#606&quot;&gt;os&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;linux&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;], [&lt;span style=&quot;color:#606&quot;&gt;os&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;freebsd&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;]]

[java, os].combinations()*.sum()&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The result is the following.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code&gt;[
    [ java: 8,  os: &#39;linux&#39;],
    [ java: 10, os: &#39;linux&#39;],
    [ java: 8,  os: &#39;freebsd&#39;],
    [ java: 10, os: &#39;freebsd&#39;]
]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With the spread operator the end result of a list of maps which we can
effectively use as matrix axes.  It also allows us to do neat matrix filtering
with the &lt;a href=&quot;http://docs.groovy-lang.org/latest/html/groovy-jdk/java/util/List.html#findAll(groovy.lang.Closure)&quot;&gt;&lt;code&gt;findAll {}&lt;/code&gt; Groovy &lt;code&gt;List&lt;/code&gt; method&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;exposing-a-shared-library-pipeline-step&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#exposing-a-shared-library-pipeline-step&quot; /&gt;Exposing a shared library pipeline step&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The best user experience is to expose the above code as a shared library
pipeline step.  As an example, I have added
&lt;a href=&quot;https://github.com/samrocketman/jervis/blob/8d6935e08437c1d9b9b3de1d8711cad6622fc631/vars/getMatrixAxes.groovy&quot;&gt;&lt;code&gt;vars/getMatrixAxes.groovy&lt;/code&gt;
to Jervis&lt;/a&gt;.  This provides a flexible shared library step which you can copy
into your own shared pipeline libraries.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The step becomes easy to use in the following way with a simple one dimension matrix.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Jenkinsfile&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;groovy&quot;&gt;&lt;span style=&quot;color:#0a8;font-weight:bold&quot;&gt;Map&lt;/span&gt; matrix_axes = [
    &lt;span style=&quot;color:#606&quot;&gt;PLATFORM&lt;/span&gt;: [&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;linux&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;windows&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;mac&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;],
]

&lt;span style=&quot;color:#0a8;font-weight:bold&quot;&gt;List&lt;/span&gt; axes = getMatrixAxes(matrix_axes)

&lt;span style=&quot;color:#777&quot;&gt;// alternately with a user prompt&lt;/span&gt;
&lt;span style=&quot;color:#777&quot;&gt;//List axes = getMatrixAxes(matrix_axes, user_prompt: true)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here’s a more complex example using a two dimensional matrix with filtering.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Jenkinsfile&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;groovy&quot;&gt;&lt;span style=&quot;color:#0a8;font-weight:bold&quot;&gt;Map&lt;/span&gt; matrix_axes = [
    &lt;span style=&quot;color:#606&quot;&gt;PLATFORM&lt;/span&gt;: [&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;linux&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;windows&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;mac&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;],
    &lt;span style=&quot;color:#606&quot;&gt;BROWSER&lt;/span&gt;: [&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;firefox&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;chrome&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;safari&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;edge&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;]
]

&lt;span style=&quot;color:#0a8;font-weight:bold&quot;&gt;List&lt;/span&gt; axes = getMatrixAxes(matrix_axes) { &lt;span style=&quot;color:#0a8;font-weight:bold&quot;&gt;Map&lt;/span&gt; axis -&amp;gt;
    !(axis[&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;BROWSER&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;] == &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;safari&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt; &amp;amp;&amp;amp; axis[&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;PLATFORM&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;] == &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;linux&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;) &amp;amp;&amp;amp;
    !(axis[&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;BROWSER&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;] == &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;edge&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt; &amp;amp;&amp;amp; axis[&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;PLATFORM&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;] != &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;windows&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;)
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;And again with a three dimensional matrix with filtering and prompting for user
input.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Jenkinsfile&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;groovy&quot;&gt;&lt;span style=&quot;color:#0a8;font-weight:bold&quot;&gt;Map&lt;/span&gt; matrix_axes = [
    &lt;span style=&quot;color:#606&quot;&gt;PLATFORM&lt;/span&gt;: [&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;linux&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;windows&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;mac&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;],
    &lt;span style=&quot;color:#606&quot;&gt;JAVA&lt;/span&gt;: [&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;openjdk8&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;openjdk10&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;openjdk11&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;],
    &lt;span style=&quot;color:#606&quot;&gt;BROWSER&lt;/span&gt;: [&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;firefox&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;chrome&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;safari&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;edge&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;]
]

&lt;span style=&quot;color:#0a8;font-weight:bold&quot;&gt;List&lt;/span&gt; axes = getMatrixAxes(matrix_axes, &lt;span style=&quot;color:#606&quot;&gt;user_prompt&lt;/span&gt;: &lt;span style=&quot;color:#069&quot;&gt;true&lt;/span&gt;) { &lt;span style=&quot;color:#0a8;font-weight:bold&quot;&gt;Map&lt;/span&gt; axis -&amp;gt;
    !(axis[&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;BROWSER&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;] == &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;safari&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt; &amp;amp;&amp;amp; axis[&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;PLATFORM&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;] == &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;linux&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;) &amp;amp;&amp;amp;
    !(axis[&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;BROWSER&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;] == &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;edge&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt; &amp;amp;&amp;amp; axis[&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;PLATFORM&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;] != &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;windows&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;)
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The script approval is not necessary for
&lt;a href=&quot;https://jenkins.io/doc/book/pipeline/shared-libraries/&quot;&gt;Shared Libraries&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you don’t want to provide a shared step.  In order to expose matrix building
to end-users, you must allow the following method approval in the script
approval configuration.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Script approval&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;groovy&quot;&gt;staticMethod org.codehaus.groovy.runtime.DefaultGroovyMethods combinations java.util.Collection&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;summary&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#summary&quot; /&gt;Summary&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We covered how to perform matrix builds using scripted pipeline as well as how
to prompt users for customizing the matrix build.  Additionally, an example was
provided where we exposed getting buildable matrix axes to users as an easy to
use &lt;a href=&quot;https://jenkins.io/doc/book/pipeline/shared-libraries/&quot;&gt;Shared Library&lt;/a&gt;
step via &lt;code&gt;vars/getMatrixAxes.groovy&lt;/code&gt;.  Using a shared library step is
definitely the recommended way for admins to support users rather than trying
to whitelist groovy methods.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/samrocketman/jervis&quot;&gt;Jervis shared pipeline library&lt;/a&gt; has supported matrix building since 2017 in Jenkins scripted pipelines.
(&lt;a href=&quot;https://github.com/samrocketman/jervis/blob/db79f4d52b3aa23f1b19b59262156388b8193711/src/main/groovy/net/gleske/jervis/lang/pipelineGenerator.groovy#L275&quot;&gt;see here&lt;/a&gt; and
&lt;a href=&quot;https://github.com/samrocketman/jervis/blob/f09c709326175ff2e701677250cac007170cbd3a/vars/matrixBuildProjectStage.groovy#L25&quot;&gt;here&lt;/a&gt;
for an example).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://zbynek.github.io/jenkins.io/order-syntax/blog/2019/11/29/do-plugins-store-credentials-in-a-secure-way/</id>
<title>Do Plugins Store Credentials In A Secure Way? - DevOps World | Jenkins World 2019</title>
<updated>2019-12-12T20:07:24+00:00</updated>
<published>2019-11-29T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://zbynek.github.io/jenkins.io/order-syntax/blog/2019/11/29/do-plugins-store-credentials-in-a-secure-way/" />
<category term="jenkins world"></category>
<category term="jenkinsworld"></category>
<category term="devopsworld2019"></category>
<category term="security"></category>
<summary>
This is a speaker blog post for a DevOps World | Jenkins World 2019 talk in Lisbon, Portugal and has been posted in line with NCC Group responsible disclosure policy.
Related Jenkins security advisories:
2017-11-08,
2017-11-16,
2018-06-25,
2018-07-30,
2018-09-25,
2019-02-19,
2019-03-06,
2019-03-25,
2019-04-03,
2019-04-17,
2019-08-07,
2019-09-12,
2019-10-01,
2019-10-16,
2019-10-23.
Some of the vulnerabilities have been announced without a fix, see Jenkins Security Spring Cleaning 2019.
The most of the announced vulnerabilities are fixed at the moment of this blogpost publishing.





Come join us at DevOps World | Jenkins World 2019 for "The Story, the Findings and the Fixes Behind More than 100 Jenkins Plugins Vulnerabilities", a talk about the most common vulnerabilities found during research in more than 100...
</summary>
<content type="html">
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot; /&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
This is a speaker blog post for a DevOps World | Jenkins World 2019 talk in Lisbon, Portugal and has been posted in line with NCC Group responsible disclosure policy.
Related Jenkins security advisories:
&lt;a href=&quot;https://zbynek.github.io/jenkins.io/order-syntax/security/advisory/2017-11-08/&quot;&gt;2017-11-08&lt;/a&gt;,
&lt;a href=&quot;https://zbynek.github.io/jenkins.io/order-syntax/security/advisory/2017-11-16/&quot;&gt;2017-11-16&lt;/a&gt;,
&lt;a href=&quot;https://zbynek.github.io/jenkins.io/order-syntax/security/advisory/2018-06-25/&quot;&gt;2018-06-25&lt;/a&gt;,
&lt;a href=&quot;https://zbynek.github.io/jenkins.io/order-syntax/security/advisory/2018-07-30/&quot;&gt;2018-07-30&lt;/a&gt;,
&lt;a href=&quot;https://zbynek.github.io/jenkins.io/order-syntax/security/advisory/2018-09-25/&quot;&gt;2018-09-25&lt;/a&gt;,
&lt;a href=&quot;https://zbynek.github.io/jenkins.io/order-syntax/security/advisory/2019-02-19/&quot;&gt;2019-02-19&lt;/a&gt;,
&lt;a href=&quot;https://zbynek.github.io/jenkins.io/order-syntax/security/advisory/2019-03-06/&quot;&gt;2019-03-06&lt;/a&gt;,
&lt;a href=&quot;https://zbynek.github.io/jenkins.io/order-syntax/security/advisory/2019-03-25/&quot;&gt;2019-03-25&lt;/a&gt;,
&lt;a href=&quot;https://zbynek.github.io/jenkins.io/order-syntax/security/advisory/2019-04-03/&quot;&gt;2019-04-03&lt;/a&gt;,
&lt;a href=&quot;https://zbynek.github.io/jenkins.io/order-syntax/security/advisory/2019-04-17/&quot;&gt;2019-04-17&lt;/a&gt;,
&lt;a href=&quot;https://zbynek.github.io/jenkins.io/order-syntax/security/advisory/2019-08-07/&quot;&gt;2019-08-07&lt;/a&gt;,
&lt;a href=&quot;https://zbynek.github.io/jenkins.io/order-syntax/security/advisory/2019-09-12/&quot;&gt;2019-09-12&lt;/a&gt;,
&lt;a href=&quot;https://zbynek.github.io/jenkins.io/order-syntax/security/advisory/2019-10-01/&quot;&gt;2019-10-01&lt;/a&gt;,
&lt;a href=&quot;https://zbynek.github.io/jenkins.io/order-syntax/security/advisory/2019-10-16/&quot;&gt;2019-10-16&lt;/a&gt;,
&lt;a href=&quot;https://zbynek.github.io/jenkins.io/order-syntax/security/advisory/2019-10-23/&quot;&gt;2019-10-23&lt;/a&gt;.
Some of the vulnerabilities have been announced without a fix, see &lt;a href=&quot;https://zbynek.github.io/jenkins.io/order-syntax/blog/2019/04/03/security-advisory/&quot;&gt;Jenkins Security Spring Cleaning 2019&lt;/a&gt;.
The most of the announced vulnerabilities are fixed at the moment of this blogpost publishing.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Come join us at &lt;a href=&quot;https://www.cloudbees.com/devops-world/lisbon&quot;&gt;DevOps World | Jenkins World 2019&lt;/a&gt; for &quot;&lt;a href=&quot;https://sched.co/UVWB&quot;&gt;&lt;strong&gt;The Story, the Findings and the Fixes Behind More than 100 Jenkins Plugins Vulnerabilities&lt;/strong&gt;&lt;/a&gt;&quot;, a talk about the most common vulnerabilities found during research in more than 100 plugins.
We’ll review how to prevent these vulnerabilities during plugin development so that a more secure Jenkins CI and CD environment can be built.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When I first began familiarising myself with Jenkins, I found myself almost overwhelmed by the amount of plugins to choose from. Most of these plugins are developed by third party developers or companies and can assist the user in a range of ways. They can extend the core functions, they can offer solutions to repetitive tasks or they can help with using a service. For example, they could help with publishing to an artifact store or spinning up cloud instances. However, before a plugin can use a network based service that requires credentials to connect, those credentials have to be typed in and saved somewhere. This raises the question, are those credentials stored securely? Or not?
When I started looking at different plugins this was one of the first areas I investigated. I found a Jenkins security advisory describing this issue and came to the conclusion that this could be a problem in some plugins, albeit one that could be fixed easily. I found an example of weakly stored credentials in the Publish Over Dropbox Plugin; this plugin used a simple web form with a textbox element to display the token in the plugin’s settings page. This token was stored in plaintext:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://zbynek.github.io/jenkins.io/order-syntax/images/post-images/2019-11-plugin-creds-secure-store/PluginWebForm.png&quot; alt=&quot;PluginWebForm&quot;&gt;
&lt;/img&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The following Jelly code was behind the web form and shows that a password field wasn’t used:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;html&quot;&gt;&lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;lt;f:entry&lt;/span&gt; &lt;span style=&quot;color:#b48&quot;&gt;title&lt;/span&gt;=&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;${%Token}&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span style=&quot;color:#b48&quot;&gt;field&lt;/span&gt;=&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;authorizationCode&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;lt;f:textbox&lt;/span&gt;&lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The related plugin .xml file contained the secret key in plaintext:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;xml&quot;&gt;&lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;lt;org.jenkinsci.plugins.publishoverdropbox.impl.DropboxTokenImpl&lt;/span&gt; &lt;span style=&quot;color:#b48&quot;&gt;plugin&lt;/span&gt;=&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;publish-&lt;/span&gt;
&lt;span style=&quot;color:#D20&quot;&gt;over-dropbox@1.2.2&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;lt;scope&amp;gt;&lt;/span&gt;GLOBAL&lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;lt;/scope&amp;gt;&lt;/span&gt;
  &lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;lt;id&amp;gt;&lt;/span&gt;woodspeed&lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;lt;/id&amp;gt;&lt;/span&gt;
  &lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;lt;description&amp;gt;&lt;/span&gt;&lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;lt;/description&amp;gt;&lt;/span&gt;
  &lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;lt;authorizationCode&amp;gt;&lt;/span&gt;lYD2VnNz&lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;lt;/authorizationCode&amp;gt;&lt;/span&gt;
  &lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;lt;accessCode&amp;gt;&lt;/span&gt;lYD2VnNz&lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;lt;/accessCode&amp;gt;&lt;/span&gt;
&lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;lt;/org.jenkinsci.plugins.publishoverdropbox.impl.DropboxTokenImpl&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Jenkins offers at least two ways to store credentials in an encrypted format:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Using a Secret type offered by Jenkins&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Third party plugin called Credentials Plugin&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The first case is the easiest solution, because Jenkins will automatically handle the encryption and decryption.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Developers should also use the password field tag instead of the textbox field, as shown in the following Jelly control example:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;html&quot;&gt;&lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;lt;f:entry&lt;/span&gt; &lt;span style=&quot;color:#b48&quot;&gt;title&lt;/span&gt;=&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;${%Secret Access Key}&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span style=&quot;color:#b48&quot;&gt;help&lt;/span&gt;=&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;...&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;lt;f:password&lt;/span&gt; &lt;span style=&quot;color:#b48&quot;&gt;field&lt;/span&gt;=&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;secretKey&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;lt;/f:entry&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you would like to know what other vulnerabilities I discovered and how to fix them, come and join us for the presentation in Lisbon!
In case you are unable to attend the conference, you can read more at &lt;a href=&quot;https://www.nccgroup.trust/uk/about-us/newsroom-and-events/blogs/2019/may/story-of-a-hundred-vulnerable-jenkins-plugins/&quot;&gt;Story of a Hundred Vulnerable Jenkins Plugins&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://zbynek.github.io/jenkins.io/order-syntax/blog/2019/11/25/macos-native-installer-deprecation/</id>
<title>Jenkins macOS native installer deprecation</title>
<updated>2019-12-12T20:07:24+00:00</updated>
<published>2019-11-25T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://zbynek.github.io/jenkins.io/order-syntax/blog/2019/11/25/macos-native-installer-deprecation/" />
<category term="announcement"></category>
<category term="deprecation"></category>
<category term="macos"></category>
<category term="platform-sig"></category>
<category term="platforms"></category>
<summary>
In addition to WAR files and Docker images, the Jenkins project provides native installers for each weekly and LTS release.
There are installers available for Linux distributions, Windows, macOS and other operating systems.
There are also installers provided by third parties.
You can find the list of these installers on the Downloads page.


In this blog post, we announce the upcoming deprecation of the macOS native installer.
We will review the replacement options and the rollout plan.


Why?

Maintaining installers is a significant maintenance effort for the project
because installers require testing and, sometimes, specific platforms and environments for packaging.
When installers lose relevance for the majority of the...
</summary>
<content type="html">
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In addition to WAR files and Docker images, the Jenkins project provides native installers for each weekly and LTS release.
There are installers available for Linux distributions, Windows, macOS and other operating systems.
There are also installers provided by third parties.
You can find the list of these installers on the &lt;a href=&quot;https://zbynek.github.io/jenkins.io/order-syntax/download&quot;&gt;Downloads&lt;/a&gt; page.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this blog post, we announce the upcoming deprecation of the macOS native installer.
We will review the replacement options and the rollout plan.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;why&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#why&quot; /&gt;Why?&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Maintaining installers is a significant maintenance effort for the project
because installers require testing and, sometimes, specific platforms and environments for packaging.
When installers lose relevance for the majority of the Jenkins audience, we remove them or handover maintenance to third parties on other areas.
For macOS, there are currently two types of packages: native installers with GUI for desktop versions and &lt;a href=&quot;https://brew.sh/&quot;&gt;Homebrew packages&lt;/a&gt;.
Since Homebrew is now a defacto standard package manager for macOS users, from the Jenkins standpoint it made sense to deprecate the native installers.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Why now?
There is ongoing work on automating Jenkins Core releases within the Jenkins infrastructure.
Long story short, we are moving Jenkins release pipelines to Kubernetes on Microsoft Azure.
This environment does not offer macOS machines that are needed to produce native installers.
If you are interested to know more, there will be a &lt;a href=&quot;https://sched.co/Uara&quot;&gt;How Jenkins Builds and Delivers Jenkins in the Cloud&lt;/a&gt; talk presented by &lt;a href=&quot;https://github.com/olblak&quot;&gt;Olivier Vernin&lt;/a&gt; at &lt;a href=&quot;https://www.cloudbees.com/devops-world/lisbon&quot;&gt;DevOps World | Jenkins World 2019 Europe in Lisbon&lt;/a&gt; (use the &lt;code&gt;JWFOSS&lt;/code&gt; code for a 30% discount!).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We could have used an external service for building macOS installers,
but it would have added an additional point of failure and implementation/maintenance overhead.
So we discussed it in the &lt;a href=&quot;https://groups.google.com/forum/#!topic/jenkinsci-dev/xc-lDVsr0bQ&quot;&gt;developer mailing list&lt;/a&gt; and agreed that it is better to just deprecate and then remove the packages.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;replacing-native-installers&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#replacing-native-installers&quot; /&gt;Replacing native installers&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the case of macOS, there are two main alternatives available: managing the service manually or migrating to Homebrew packages.
Before doing a migration, we highly recommend backing up your instance.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;managing-jenkins-with-war-file-on-macos&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#managing-jenkins-with-war-file-on-macos&quot; /&gt;Managing Jenkins with WAR file on macOS&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If your Jenkins instance was previously set up with a native installer,
to update Jenkins it will be enough to replace the &lt;code&gt;jenkins.war&lt;/code&gt; file in the installation directory and restart the instance.
The services will keep running as it was configured before the migration.
The default installation directory is &lt;code&gt;/Applications/Jenkins/jenkins.war&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;managing-jenkins-with-homebrew&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#managing-jenkins-with-homebrew&quot; /&gt;Managing Jenkins with Homebrew&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Installing Jenkins with &lt;a href=&quot;https://brew.sh/&quot;&gt;Homebrew&lt;/a&gt; is a way to go for those who want to install Jenkins using a package manager.
There are two Homebrew formulas for Jenkins: &lt;a href=&quot;https://formulae.brew.sh/formula/jenkins&quot;&gt;jenkins&lt;/a&gt; for Weekly releases and &lt;a href=&quot;https://formulae.brew.sh/formula/jenkins-lts&quot;&gt;jenkins-lts&lt;/a&gt; for LTS ones.
These packages are supported by a third party (Homebrew community),
and they may be not as frequently updated as packages supported by the Jenkins project directly.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot; /&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
Before doing a migration from macOS Native installers to HomeBrew, please make sure to backup your Jenkins instance.
There are no automatic migration tools available, and the installation may corrupt your &lt;code&gt;JENKINS_HOME&lt;/code&gt; or service configuration files in edge cases.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you switch to Homebrew, you will need to properly migrate the &lt;code&gt;JENKINS_HOME&lt;/code&gt; data to the new location.
We do not provide an official migration guide, but it is possible to find some guidelines on the Web.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Sample commands:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Install the latest Weekly version: &lt;code&gt;brew install jenkins&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Install a specific Weekly version: &lt;code&gt;brew install jenkins@YOUR_VERSION&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Start the Jenkins service: &lt;code&gt;brew services start jenkins&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Restart the Jenkins service: &lt;code&gt;brew services restart jenkins&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Update the Jenkins version: &lt;code&gt;brew upgrade jenkins&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For more information see the documentation for Homebrew packages on the macOS &lt;a href=&quot;https://zbynek.github.io/jenkins.io/order-syntax/download&quot;&gt;Download&lt;/a&gt; pages.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;rollout-plan&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#rollout-plan&quot; /&gt;Rollout plan&lt;/h3&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;macOS native packaging is considered as deprecated starting from Jenkins 2.206 and Jenkins LTS 2.204.1&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For Jenkins Weekly macOS native packaging will be removed with the switch to the new Jenkins release flow.
The exact date is to be determined.&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;After the change, there will be no macOS native installers produced for new Jenkins Weekly releases&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Releases for previous versions will be available &lt;a href=&quot;http://mirrors.jenkins-ci.org/osx/&quot;&gt;in this archive&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For Jenkins LTS macOS will be removed with the switch to the new Jenkins release flow in the LTS baseline.
This change will happen only after the deployment of the new release flow in Jenkins Weekly.&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;After the switch, there will be no macOS native installers produced for new Jenkins LTS releases&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Releases for previous versions will be available &lt;a href=&quot;http://mirrors.jenkins-ci.org/osx-stable/&quot;&gt;in this archive&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;See the &lt;a href=&quot;https://groups.google.com/forum/#!topic/jenkinsci-dev/xc-lDVsr0bQ&quot;&gt;discussion on the developer mailing list&lt;/a&gt; for more information.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;questions-and-feedback&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#questions-and-feedback&quot; /&gt;Questions and feedback&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you have any questions or want to provide feedback, please use the developer mailing list thread mentioned above &lt;a href=&quot;https://zbynek.github.io/jenkins.io/order-syntax/sigs/platform&quot;&gt;Platform SIG&lt;/a&gt; channels (chat, google group).
Any feedback will be much appreciated because we plan more installer/ and platform deprecations in the future.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://zbynek.github.io/jenkins.io/order-syntax/blog/2019/11/22/welcome-to-the-matrix/</id>
<title>Welcome to the Matrix</title>
<updated>2019-12-12T20:07:24+00:00</updated>
<published>2019-11-22T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://zbynek.github.io/jenkins.io/order-syntax/blog/2019/11/22/welcome-to-the-matrix/" />
<author>
<name>lnewman</name>
</author>
<category term="pipeline"></category>
<category term="plugins"></category>
<category term="declarative"></category>
<category term="matrix"></category>
<summary>
I often find myself needing to run the same actions on a bunch of different configurations.
Up to now, that meant I had to make multiple copies of the same stages in my pipelines.
When I needed to make changes, I had to make the same changes in multiple places throughout my pipeline.
Maintaining even a small number of configuration was difficult for larger pipelines.


Declarative Pipeline 1.5.0-beta1 (now available from the
Jenkins Experimental Update site) adds a new matrix section that lets me specify a list stages once and then run that same list in parallel on multiple configurations.
Let&#8217;s take a look!


Single configuration pipeline


I&#8217;ll...
</summary>
<content type="html">
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I often find myself needing to run the same actions on a bunch of different configurations.
Up to now, that meant I had to make multiple copies of the same stages in my pipelines.
When I needed to make changes, I had to make the same changes in multiple places throughout my pipeline.
Maintaining even a small number of configuration was difficult for larger pipelines.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Declarative Pipeline 1.5.0-beta1 (now available from the
&lt;a href=&quot;https://updates.jenkins.io/experimental/&quot;&gt;Jenkins Experimental Update site&lt;/a&gt;) adds a new &lt;code&gt;matrix&lt;/code&gt; section that lets me specify a list stages once and then run that same list in parallel on multiple configurations.
Let’s take a look!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;single-configuration-pipeline&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#single-configuration-pipeline&quot; /&gt;Single configuration pipeline&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I’ll start with a simple pipeline with build and test stages.
I’m using &lt;code&gt;echo&lt;/code&gt; steps as placeholders for my build and test actions.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Jenkinsfile&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;groovy&quot;&gt;pipeline {
    agent none
    stages {
        stage(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;BuildAndTest&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;) {
            agent any
            stages {
                stage(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Build&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;) {
                    steps {
                        echo &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Do Build&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;
                    }
                }
                stage(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Test&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;) {
                    steps {
                        echo &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Do Test&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;
                    }
                }
            }
        }
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;pipeline-for-multiple-platforms-and-browsers&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#pipeline-for-multiple-platforms-and-browsers&quot; /&gt;Pipeline for multiple platforms and browsers&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I’d like to run my build and tests on a combination of platforms and browsers.
The new &lt;code&gt;matrix&lt;/code&gt; directive lets me specify a set of &lt;code&gt;axes&lt;/code&gt;.
Each &lt;code&gt;axis&lt;/code&gt; has a &lt;code&gt;name&lt;/code&gt; and a list of one or more &lt;code&gt;values&lt;/code&gt;.
When the pipeline is run, Jenkins will take those and run my stages on all possible combinations of values from each axis.
All cells in a matrix run in parallel (limited only by the number of available agents).
Stages within each cell are run sequentially.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;My matrix has two axes: &lt;code&gt;PLATFORM&lt;/code&gt; and &lt;code&gt;BROWSER&lt;/code&gt;.
I have three values for &lt;code&gt;PLATFORM&lt;/code&gt; and four values for &lt;code&gt;BROWSER&lt;/code&gt; resulting in my stages being run with twelve different combinations.
I’ve changed my &lt;code&gt;echo&lt;/code&gt; steps to use the axis values for each cell.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Jenkinsfile&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;groovy&quot;&gt;pipeline {
    agent none
    stages {
        stage(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;BuildAndTest&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;) {
            matrix {
                agent any
                axes {
                    axis {
                        name &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;PLATFORM&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;
                        values &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;linux&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;windows&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;mac&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;
                    }
                    axis {
                        name &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;BROWSER&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;
                        values &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;firefox&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;chrome&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;safari&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;edge&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;
                    }
                }
                stages {
                    stage(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Build&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;) {
                        steps {
                            echo &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Do Build for &lt;/span&gt;&lt;span style=&quot;background-color:hsla(0,0%,0%,0.07);color:black&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;${&lt;/span&gt;PLATFORM&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt; - &lt;/span&gt;&lt;span style=&quot;background-color:hsla(0,0%,0%,0.07);color:black&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;${&lt;/span&gt;BROWSER&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
                        }
                    }
                    stage(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Test&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;) {
                        steps {
                            echo &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Do Test for &lt;/span&gt;&lt;span style=&quot;background-color:hsla(0,0%,0%,0.07);color:black&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;${&lt;/span&gt;PLATFORM&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt; - &lt;/span&gt;&lt;span style=&quot;background-color:hsla(0,0%,0%,0.07);color:black&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;${&lt;/span&gt;BROWSER&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
                        }
                    }
                }
            }
        }
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Log output (truncated)&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code&gt;...
[Pipeline] stage
[Pipeline] { (BuildAndTest)
[Pipeline] parallel
[Pipeline] { (Branch: Matrix - OS = &#39;linux&#39;, BROWSER = &#39;firefox&#39;)
[Pipeline] { (Branch: Matrix - OS = &#39;windows&#39;, BROWSER = &#39;firefox&#39;)
[Pipeline] { (Branch: Matrix - OS = &#39;mac&#39;, BROWSER = &#39;firefox&#39;)
[Pipeline] { (Branch: Matrix - OS = &#39;linux&#39;, BROWSER = &#39;chrome&#39;)
[Pipeline] { (Branch: Matrix - OS = &#39;windows&#39;, BROWSER = &#39;chrome&#39;)
[Pipeline] { (Branch: Matrix - OS = &#39;mac&#39;, BROWSER = &#39;chrome&#39;)
[Pipeline] { (Branch: Matrix - OS = &#39;linux&#39;, BROWSER = &#39;safari&#39;)
[Pipeline] { (Branch: Matrix - OS = &#39;windows&#39;, BROWSER = &#39;safari&#39;)
[Pipeline] { (Branch: Matrix - OS = &#39;mac&#39;, BROWSER = &#39;safari&#39;)
[Pipeline] { (Branch: Matrix - OS = &#39;linux&#39;, BROWSER = &#39;edge&#39;) (hide)
[Pipeline] { (Branch: Matrix - OS = &#39;windows&#39;, BROWSER = &#39;edge&#39;)
[Pipeline] { (Branch: Matrix - OS = &#39;mac&#39;, BROWSER = &#39;edge&#39;)
...
Do Build for linux - safari
Do Build for linux - firefox
Do Build for windows - firefox
Do Test for linux - firefox
Do Build for mac - firefox
Do Build for linux - chrome
Do Test for windows - firefox
...&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;excluding-invalid-combinations&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#excluding-invalid-combinations&quot; /&gt;Excluding invalid combinations&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now that I have my basic matrix created, I’ve noticed that I have some invalid combinations.
Microsoft Edge only runs on Windows and there isn’t a Linux version of Safari.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I can remove invalid cells from my matrix using &lt;code&gt;exclude&lt;/code&gt; directives. Each &lt;code&gt;exclude&lt;/code&gt; has one or more &lt;code&gt;axis&lt;/code&gt; directives with &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;values&lt;/code&gt;.
The &lt;code&gt;axis&lt;/code&gt; directives inside an &lt;code&gt;exclude&lt;/code&gt; generate a set of combinations (similar to generating the matrix cells).
The matrix cells that match all the values from an &lt;code&gt;exclude&lt;/code&gt; combination are removed from the matrix.
If I have more than one &lt;code&gt;exclude&lt;/code&gt; directive, each are evaluated separately to remove cells.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When dealing with a long lists of values to exclude, I can use &lt;code&gt;notValues&lt;/code&gt; instead of &lt;code&gt;values&lt;/code&gt; to specify axis values we &lt;strong&gt;don’t&lt;/strong&gt; want excluded.
Yes, that’s a double negative, so it can get a little confusing.
I try to use it only when I really need it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In my sample pipeline below, I specifically exclude the &lt;code&gt;linux, safari&lt;/code&gt; combination and I also exclude any platform that is &lt;strong&gt;not&lt;/strong&gt; &lt;code&gt;windows&lt;/code&gt; with the &lt;code&gt;edge&lt;/code&gt; browser.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock important&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-important&quot; title=&quot;Important&quot; /&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This pipeline uses two axes but there is &lt;strong&gt;no limit&lt;/strong&gt; on the number of &lt;code&gt;axis&lt;/code&gt; directives.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Also, in this pipeline each &lt;code&gt;exclude&lt;/code&gt; specifies values for both axes, but that is not required.
If we wanted to run only &quot;linux&quot; cells, we could use the following &lt;code&gt;exclude&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;groovy&quot;&gt;exclude {
    axis {
        name &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;PLATFORM&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;
        notValues &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;linux&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;groovy&quot;&gt;pipeline {
    agent none
    stages {
        stage(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;BuildAndTest&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;) {
            matrix {
                agent any
                axes {
                    axis {
                        name &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;PLATFORM&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;
                        values &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;linux&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;windows&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;mac&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;
                    }
                    axis {
                        name &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;BROWSER&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;
                        values &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;firefox&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;chrome&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;safari&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;edge&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;
                    }
                }
                excludes {
                    exclude {
                        axis {
                            name &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;PLATFORM&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;
                            values &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;linux&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;
                        }
                        axis {
                            name &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;BROWSER&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;
                            values &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;safari&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;
                        }
                    }
                    exclude {
                        axis {
                            name &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;PLATFORM&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;
                            notValues &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;windows&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;
                        }
                        axis {
                            name &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;BROWSER&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;
                            values &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;edge&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;
                        }
                    }
                }
                stages {
                    stage(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Build&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;) {
                        steps {
                            echo &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Do Build for &lt;/span&gt;&lt;span style=&quot;background-color:hsla(0,0%,0%,0.07);color:black&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;${&lt;/span&gt;PLATFORM&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt; - &lt;/span&gt;&lt;span style=&quot;background-color:hsla(0,0%,0%,0.07);color:black&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;${&lt;/span&gt;BROWSER&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
                        }
                    }
                    stage(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Test&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;) {
                        steps {
                            echo &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Do Test for &lt;/span&gt;&lt;span style=&quot;background-color:hsla(0,0%,0%,0.07);color:black&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;${&lt;/span&gt;PLATFORM&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt; - &lt;/span&gt;&lt;span style=&quot;background-color:hsla(0,0%,0%,0.07);color:black&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;${&lt;/span&gt;BROWSER&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
                        }
                    }
                }
            }
        }
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Log output (truncated)&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code&gt;...
[Pipeline] stage
[Pipeline] { (BuildAndTest)
[Pipeline] parallel
[Pipeline] { (Branch: Matrix - OS = &#39;linux&#39;, BROWSER = &#39;firefox&#39;)
[Pipeline] { (Branch: Matrix - OS = &#39;windows&#39;, BROWSER = &#39;firefox&#39;)
[Pipeline] { (Branch: Matrix - OS = &#39;mac&#39;, BROWSER = &#39;firefox&#39;)
[Pipeline] { (Branch: Matrix - OS = &#39;linux&#39;, BROWSER = &#39;chrome&#39;)
[Pipeline] { (Branch: Matrix - OS = &#39;windows&#39;, BROWSER = &#39;chrome&#39;)
[Pipeline] { (Branch: Matrix - OS = &#39;mac&#39;, BROWSER = &#39;chrome&#39;)
[Pipeline] { (Branch: Matrix - OS = &#39;windows&#39;, BROWSER = &#39;safari&#39;)
[Pipeline] { (Branch: Matrix - OS = &#39;mac&#39;, BROWSER = &#39;safari&#39;)
[Pipeline] { (Branch: Matrix - OS = &#39;windows&#39;, BROWSER = &#39;edge&#39;)
...
Do Build for linux - firefox
...&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;controlling-cell-behavior-at-runtime&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#controlling-cell-behavior-at-runtime&quot; /&gt;Controlling cell behavior at runtime&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Inside the &lt;code&gt;matrix&lt;/code&gt; directive I can also add &quot;per-cell&quot; directives.
These are the same directives that I would add to a &lt;code&gt;stage&lt;/code&gt; and they let me control the behavior of each cell in the matrix.
These directives can use the axis values from their cell as part of their inputs, allowing me to customize the behavior of each cell to match its axis values.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On my Jenkins server I have configured agents with labels that match the OS for each agent (&quot;linux-agent&quot;, &quot;windows-agent&quot;, and &quot;mac-agent&quot;).
To run each cell in my matrix on the appropriate operating system, I configure the label for that cell using Groovy string templating.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;groovy&quot;&gt;matrix {
    axes { ... }
    excludes { ... }
    agent {
        label &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;background-color:hsla(0,0%,0%,0.07);color:black&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;${&lt;/span&gt;PLATFORM&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;-agent&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
    }
    stages { ... }
    &lt;span style=&quot;color:#777&quot;&gt;// ...&lt;/span&gt;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Occasionally I run my pipeline manually from the Jenkins Web UI.
When I do that, I’d like to be able to select just one platform to run.
The &lt;code&gt;axis&lt;/code&gt; and &lt;code&gt;exclude&lt;/code&gt; directives define the static set of cells that make up the matrix.
That set of combinations is generated before the start of the run, before any parameters are processed.
What this means is that I can’t add or remove cells from a matrix after the job has started.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &quot;per-cell&quot; directives, on the other hand, are evaluated at runtime.
I can use the &quot;per-cell&quot; &lt;code&gt;when&lt;/code&gt; directive inside &lt;code&gt;matrix&lt;/code&gt; to control which cells in the matrix are executed.
I’ll add a &lt;code&gt;choice&lt;/code&gt; parameter with the list of platforms, and add conditions to the &lt;code&gt;when&lt;/code&gt; directive, which will either let all platforms execute, or only execute cells that match my selected platform.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;groovy&quot;&gt;pipeline {
    parameters {
        choice(&lt;span style=&quot;color:#606&quot;&gt;name&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;PLATFORM_FILTER&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#606&quot;&gt;choices&lt;/span&gt;: [&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;all&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;linux&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;windows&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;mac&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;], &lt;span style=&quot;color:#606&quot;&gt;description&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Run on specific platform&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;)
    }
    agent none
    stages {
        stage(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;BuildAndTest&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;) {
            matrix {
                agent {
                    label &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;background-color:hsla(0,0%,0%,0.07);color:black&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;${&lt;/span&gt;PLATFORM&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;-agent&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
                }
                when { anyOf {
                    expression { params.PLATFORM_FILTER == &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;all&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt; }
                    expression { params.PLATFORM_FILTER == env.PLATFORM }
                } }
                axes {
                    axis {
                        name &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;PLATFORM&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;
                        values &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;linux&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;windows&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;mac&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;
                    }
                    axis {
                        name &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;BROWSER&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;
                        values &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;firefox&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;chrome&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;safari&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;edge&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;
                    }
                }
                excludes {
                    exclude {
                        axis {
                            name &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;PLATFORM&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;
                            values &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;linux&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;
                        }
                        axis {
                            name &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;BROWSER&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;
                            values &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;safari&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;
                        }
                    }
                    exclude {
                        axis {
                            name &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;PLATFORM&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;
                            notValues &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;windows&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;
                        }
                        axis {
                            name &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;BROWSER&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;
                            values &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;edge&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;
                        }
                    }
                }
                stages {
                    stage(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Build&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;) {
                        steps {
                            echo &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Do Build for &lt;/span&gt;&lt;span style=&quot;background-color:hsla(0,0%,0%,0.07);color:black&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;${&lt;/span&gt;PLATFORM&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt; - &lt;/span&gt;&lt;span style=&quot;background-color:hsla(0,0%,0%,0.07);color:black&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;${&lt;/span&gt;BROWSER&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
                        }
                    }
                    stage(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Test&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;) {
                        steps {
                            echo &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Do Test for &lt;/span&gt;&lt;span style=&quot;background-color:hsla(0,0%,0%,0.07);color:black&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;${&lt;/span&gt;PLATFORM&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt; - &lt;/span&gt;&lt;span style=&quot;background-color:hsla(0,0%,0%,0.07);color:black&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;${&lt;/span&gt;BROWSER&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
                        }
                    }
                }
            }
        }
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If I run this Pipeline from the Jenkins UI and set the &lt;code&gt;PLATFORM_FILTER&lt;/code&gt; parameter to &lt;code&gt;mac&lt;/code&gt;, I’ll get something like the output below:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Log output (truncated - PLATFORM_FILTER = &#39;mac&#39; )&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code&gt;...
[Pipeline] stage
[Pipeline] { (BuildAndTest)
[Pipeline] parallel
[Pipeline] { (Branch: Matrix - OS = &#39;linux&#39;, BROWSER = &#39;firefox&#39;)
[Pipeline] { (Branch: Matrix - OS = &#39;windows&#39;, BROWSER = &#39;firefox&#39;)
[Pipeline] { (Branch: Matrix - OS = &#39;mac&#39;, BROWSER = &#39;firefox&#39;)
[Pipeline] { (Branch: Matrix - OS = &#39;linux&#39;, BROWSER = &#39;chrome&#39;)
[Pipeline] { (Branch: Matrix - OS = &#39;windows&#39;, BROWSER = &#39;chrome&#39;)
[Pipeline] { (Branch: Matrix - OS = &#39;mac&#39;, BROWSER = &#39;chrome&#39;)
[Pipeline] { (Branch: Matrix - OS = &#39;windows&#39;, BROWSER = &#39;safari&#39;)
[Pipeline] { (Branch: Matrix - OS = &#39;mac&#39;, BROWSER = &#39;safari&#39;)
[Pipeline] { (Branch: Matrix - OS = &#39;windows&#39;, BROWSER = &#39;edge&#39;)
...
Stage &quot;Matrix - OS = &#39;linux&#39;, BROWSER = &#39;chrome&#39;&quot; skipped due to when conditional
Stage &quot;Matrix - OS = &#39;linux&#39;, BROWSER = &#39;firefox&#39;&quot; skipped due to when conditional
...
Do Build for mac - firefox
Do Build for mac - chrome
Do Build for mac - safari
...
Stage &quot;Matrix - OS = &#39;windows&#39;, BROWSER = &#39;chrome&#39;&quot; skipped due to when conditional
Stage &quot;Matrix - OS = &#39;windows&#39;, BROWSER = &#39;edge&#39;&quot; skipped due to when conditional
...
Do Test for mac - safari
Do Test for mac - firefox
Do Test for mac - chrome&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock important&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-important&quot; title=&quot;Important&quot; /&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
Come join me at &lt;a href=&quot;https://www.cloudbees.com/devops-world/lisbon&quot;&gt;DevOps World | Jenkins World 2019&lt;/a&gt; for &quot;&lt;a href=&quot;https://sched.co/UeQe&quot;&gt;&lt;strong&gt;Declarative Pipeline 2019: Tips, Tricks and What’s Next&lt;/strong&gt;&lt;/a&gt;&quot;.
I’ll go over what’s been added to Pipeline in the last year (including matrix) and discuss ideas about where pipeline should go next.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#conclusion&quot; /&gt;Conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this blog post, we’ve looked at how to use the &lt;code&gt;matrix&lt;/code&gt; directive to make concise but powerful declarative pipelines.
An equivalent pipeline created without &lt;code&gt;matrix&lt;/code&gt; would easily be several times larger, and much harder to understand and maintain.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Matrix is now available from the experimental update center.
It will be released to the main update center as soon as we’re done putting the finishing touches on the documentation and online help.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;links&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#links&quot; /&gt;Links&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://updates.jenkins.io/experimental/&quot;&gt;Jenkins Experimental Update Center&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://jenkins.io/doc/developer/publishing/releasing-experimental-updates/#using-the-experimental-update-center&quot;&gt;Using the Jenkins Experimental Update Center&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://zbynek.github.io/jenkins.io/order-syntax/blog/2019/11/22/jenkins-health-advisor-by-cloudbees/</id>
<title>Jenkins Health Advisor by CloudBees is here!</title>
<updated>2019-12-12T20:07:24+00:00</updated>
<published>2019-11-22T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://zbynek.github.io/jenkins.io/order-syntax/blog/2019/11/22/jenkins-health-advisor-by-cloudbees/" />
<author>
<name>aheritier</name>
</author>
<category term="jenkins"></category>
<category term="health"></category>
<category term="healthcheck"></category>
<category term="stability"></category>
<summary>
Managing any software presents its own unique challenges. Jenkins Masters are no exception. For example,




How do you keep a finger on the pulse of everything going on in your Jenkins environment? Are you looking at every new defect opened in the issue tracker?


How do you make sure that your master or agents don’t silently fail? Are you monitoring its logs? All of its internal components? If something does go wrong, how do you fix it??


How do you avoid the infamous “angry Jenkins” logo?




That’s why we created Jenkins Health Advisor by CloudBees.


Here at CloudBees, we have years of experience supporting our...
</summary>
<content type="html">
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image right&quot;&gt;&lt;img src=&quot;https://zbynek.github.io/jenkins.io/order-syntax/images/angry-jenkins_128.png&quot; alt=&quot;Angry Jenkins logo&quot; width=&quot;128&quot; /&gt;&lt;/span&gt;
&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Managing any software presents its own unique challenges. Jenkins Masters are no exception. For example,&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;How do you keep a finger on the pulse of everything going on in your Jenkins environment? Are you looking at every new defect opened in the issue tracker?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;How do you make sure that your master or agents don’t silently fail? Are you monitoring its logs? All of its internal components? If something does go wrong, how do you fix it??&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;How do you avoid the infamous “angry Jenkins” logo?&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;That’s why we created Jenkins Health Advisor by CloudBees.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here at &lt;a href=&quot;https://www.cloudbees.com?utm_medium=blog&amp;amp;utm_source=jenkins.io&amp;amp;utm_campaign=cloudbees-jenkins-advisor-plugin&quot;&gt;CloudBees&lt;/a&gt;, we have years of experience &lt;a href=&quot;https://www.cloudbees.com/products/cloudbees-jenkins-support?utm_medium=blog&amp;amp;utm_source=jenkins.io&amp;amp;utm_campaign=cloudbees-jenkins-advisor-plugin&quot;&gt;supporting our customers who are using Jenkins&lt;/a&gt;, including our proprietary products build on top of Jenkins like &lt;a href=&quot;https://www.cloudbees.com/products/cloudbees-core?utm_medium=blog&amp;amp;utm_source=jenkins.io&amp;amp;utm_campaign=cloudbees-jenkins-advisor-plugin&quot;&gt;CloudBees Core&lt;/a&gt;.
As a result, our support team is made up of automation experts with Jenkins knowledge you can’t get anywhere else.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Automated health checks started when our support engineers created a platform so they could write rules to detect known issues on &lt;a href=&quot;https://plugins.jenkins.io/support-core&quot;&gt;support bundles&lt;/a&gt; provided by our customers, and redirect them to the required knowledge source to diagnose and resolve the issue.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;After years of internal usage we decided to share this service with the community and we are pleased to introduce &lt;strong&gt;a new free  (as in beer) service available to every Jenkins user&lt;/strong&gt;: &lt;strong&gt;&lt;a href=&quot;https://www.cloudbees.com/jenkins-health-advisor?utm_medium=blog&amp;amp;utm_source=jenkins.io&amp;amp;utm_campaign=cloudbees-jenkins-advisor-plugin&quot;&gt;Jenkins Health Advisor by CloudBees&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cloudbees.com/jenkins-health-advisor?utm_medium=blog&amp;amp;utm_source=jenkins.io&amp;amp;utm_campaign=cloudbees-jenkins-advisor-plugin&quot;&gt;Jenkins Health Advisor by CloudBees&lt;/a&gt; automatically analyzes your Jenkins environment, proactively identifies potential issues and advises you of solutions with detailed email reports.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph text-center&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;a class=&quot;image&quot; href=&quot;https://plugins.jenkins.io/cloudbees-jenkins-advisor&quot;&gt;&lt;img src=&quot;https://zbynek.github.io/jenkins.io/order-syntax/images/post-images/jenkins-health-advisor-by-cloudbees/logo.svg&quot; alt=&quot;Jenkins Health Advisor by CloudBees logo&quot; width=&quot;256&quot; /&gt;&lt;/a&gt;&lt;/span&gt;
&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cloudbees.com/jenkins-health-advisor?utm_medium=blog&amp;amp;utm_source=jenkins.io&amp;amp;utm_campaign=cloudbees-jenkins-advisor-plugin&quot;&gt;Jenkins Health Advisor by CloudBees&lt;/a&gt; can detect a large range of issues from simple configuration issues to security and best practices concerns - all critical elements of Jenkins implementations.
Getting started is done in &lt;a href=&quot;https://www.cloudbees.com/jenkins-health-advisor?utm_medium=blog&amp;amp;utm_source=jenkins.io&amp;amp;utm_campaign=cloudbees-jenkins-advisor-plugin#download&quot;&gt;3 steps&lt;/a&gt;, and within 24 hours you will receive your first report.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph text-center&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;a class=&quot;image&quot; href=&quot;https://plugins.jenkins.io/cloudbees-jenkins-advisor&quot;&gt;&lt;img src=&quot;https://zbynek.github.io/jenkins.io/order-syntax/images/post-images/jenkins-health-advisor-by-cloudbees/overview.png&quot; alt=&quot;Jenkins Health Advisor by CloudBees overview&quot; width=&quot;800&quot; /&gt;&lt;/a&gt;&lt;/span&gt;
&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We hope that you will appreciate this service and it will help you to keep your masters healthy.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Take a few minutes to read our &lt;a href=&quot;https://docs.cloudbees.com/docs/admin-resources/latest/plugins/cloudbees-jenkins-advisor?utm_medium=blog&amp;amp;utm_source=jenkins.io&amp;amp;utm_campaign=cloudbees-jenkins-advisor-plugin&quot;&gt;documentation&lt;/a&gt;, discover the service and don’t hesitate to contact us on the Jenkins community channels (&lt;a href=&quot;https://gitter.im/jenkinsci/jenkins&quot;&gt;Gitter&lt;/a&gt;, &lt;a href=&quot;https://groups.google.com/forum/#!forum/jenkinsci-users&quot;&gt;jenkinsci-users@googlegroups.com&lt;/a&gt;, …​).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Don’t miss also the opportunity to meet our support team on the &quot;Ask the experts&quot; booth at &lt;a href=&quot;https://www.cloudbees.com/devops-world/lisbon&quot;&gt;DevOps World | Jenkins World 2019&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Useful links:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.cloudbees.com/docs/admin-resources/latest/plugins/cloudbees-jenkins-advisor?utm_medium=blog&amp;amp;utm_source=jenkins.io&amp;amp;utm_campaign=cloudbees-jenkins-advisor-plugin&quot;&gt;Plugin Documentation&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://plugins.jenkins.io/cloudbees-jenkins-advisor&quot;&gt;Jenkins Plugin Site&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cloudbees.com/products/cloudbees-jenkins-support?utm_medium=blog&amp;amp;utm_source=jenkins.io&amp;amp;utm_campaign=cloudbees-jenkins-advisor-plugin&quot;&gt;CloudBees Jenkins Support&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://zbynek.github.io/jenkins.io/order-syntax/blog/2019/11/08/board-elections/</id>
<title>2019 Jenkins Board and Officer Elections Update</title>
<updated>2019-12-12T20:07:24+00:00</updated>
<published>2019-11-08T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://zbynek.github.io/jenkins.io/order-syntax/blog/2019/11/08/board-elections/" />
<category term="community"></category>
<category term="governance"></category>
<category term="elections"></category>
<summary>
The Jenkins community is conducting the 2019 elections for Board and Officer positions.
The call for nominations has concluded.
We received many nominations.
Based on the people who are willing to accept their nomination and the uncontested officer positions, we will have 3 votes:




A vote to elect 3 board members


A vote to elect the Jenkins security officer


A vote to elect the Jenkins events officer




Candidates


Each candidate has provided a statement to help guide voters on why they should vote for the candidate.
Refer to the candidate statements for more details.
The candidates running for a board position are:




Alex Earl


Oliver Gondza


Ullrich Hafner


Oleg Nenashev


Mark Waite


Zhao Xiaojie (a.k.a. Rick...
</summary>
<content type="html">
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image right center&quot;&gt;&lt;img src=&quot;https://zbynek.github.io/jenkins.io/order-syntax/images/post-images/elections-2019/election-2019-opengraph.png&quot; alt=&quot;Jenkins Elections&quot; height=&quot;178&quot; /&gt;&lt;/span&gt;
&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Jenkins community is conducting the 2019 elections for Board and Officer positions.
The call for nominations has concluded.
We received many nominations.
Based on the people who are willing to accept their nomination and the uncontested officer positions, we will have 3 votes:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;A vote to elect 3 &lt;a href=&quot;https://zbynek.github.io/jenkins.io/order-syntax/project/governance/#governance-board&quot;&gt;board members&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A vote to elect the Jenkins &lt;a href=&quot;https://zbynek.github.io/jenkins.io/order-syntax/project/board/#security&quot;&gt;security officer&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A vote to elect the Jenkins &lt;a href=&quot;https://zbynek.github.io/jenkins.io/order-syntax/project/board/#events&quot;&gt;events officer&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;candidates&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#candidates&quot; /&gt;Candidates&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Each candidate has provided a statement to help guide voters on why they should vote for the candidate.
Refer to the &lt;a href=&quot;https://docs.google.com/document/d/15rJYkBjWLGZTL87xeJ4P2Y1LNn7C0EBb0wkDVUSfLmQ/edit#&quot;&gt;candidate statements&lt;/a&gt; for more details.
The candidates running for a board position are:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Alex Earl&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Oliver Gondza&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ullrich Hafner&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Oleg Nenashev&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Mark Waite&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Zhao Xiaojie (a.k.a. Rick to many of you)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The candidates running for Security Officer are:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Daniel Beck&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Wadeck Follonier&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The candidates running for Events Officer are:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Alyssa Tong&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Zhao Xiaojie (a.k.a. Rick to many of you)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;voter-registration&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#voter-registration&quot; /&gt;Voter Registration&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is the first time in a while that we are running a Jenkins election; we are learning as we go.
Jenkins elections aim to be very inclusive.
We do not restrict elections to just code committers.
Anyone who has a Jenkins account registered before September 1, 2019 is eligible to vote.
Jenkins, being the successful project it is, has  approximately 100 000 accounts that meet that criteria.
As a result we are contacting eligible voters and requesting that they explicitly ‘opt-in’ to participate in the voting.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you meet the criteria, you will receive an email at your registered jenkins.io email address.
It will be from elections@jenkins.io with the title ‘&lt;strong&gt;2019 Jenkins Election - Invitation to Participate&lt;/strong&gt;’.
The email will provide election details and will include an &quot;&lt;strong&gt;I want to participate&lt;/strong&gt;&quot; button.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://zbynek.github.io/jenkins.io/order-syntax/images/post-images/elections-2019/election-invitation.png&quot; alt=&quot;Voter Registration&quot; width=&quot;665&quot;&gt;
&lt;/img&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;voter-confirmation&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#voter-confirmation&quot; /&gt;Voter Confirmation&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Once you click on the link, you should see a confirmation screen as follows:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://zbynek.github.io/jenkins.io/order-syntax/images/post-images/elections-2019/election-acknowledged.png&quot; alt=&quot;Voter Registered&quot; width=&quot;330&quot;&gt;
&lt;/img&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you do not receive the email by November 14, 2019 or if you have any problems voting, please comment on the &lt;a href=&quot;https://issues.jenkins-ci.org/browse/INFRA-2319&quot;&gt;Jenkins Election 2019 Jira issue&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;voting&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#voting&quot; /&gt;Voting&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The voting will officially open on November 11, 2019.
Candidates will receive an email from the Condorcet internet voting sent by Kohsuke Kawaguchi.
One email will be sent for each vote (so 3 in total: 1 for board, 1 for event officer and 1 for security officer).
The vote will ask to rank the candidates using a screen like this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://zbynek.github.io/jenkins.io/order-syntax/images/post-images/elections-2019/election-ballot.png&quot; alt=&quot;Voter Ballot&quot; width=&quot;1022&quot;&gt;
&lt;/img&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;election-dates&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#election-dates&quot; /&gt;Election Dates&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here is a summary of the key election dates:&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;/col&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Date&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Event&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;strong&gt;Now&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Voter registration ongoing&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;strong&gt;Nov 11, 2019&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Voting begins&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;strong&gt;Nov 17, 2019&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Voter registration closes&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;strong&gt;Nov 24, 2019&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Voting closes a 5:00 PM Pacific Time&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;strong&gt;Dec 3, 2019&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;New representatives announced&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/col&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Election results will be posted to the &lt;a href=&quot;https://groups.google.com/forum/#!forum/jenkinsci-dev&quot;&gt;Jenkins developer mailing list&lt;/a&gt;, followed by an announcement blog post on &lt;a href=&quot;https://zbynek.github.io/jenkins.io/order-syntax/node/&quot;&gt;jenkins.io&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If there are any delays to the proposed dates we will aim to communicate that as soon as we can.
Thank you very much for all the candidates showing the Jenkins spirit of service to their community.
We encourage everyone to register to vote and participate in the Jenkins community.&lt;/p&gt;
&lt;/div&gt;
&lt;/colgroup&gt;
&lt;/table&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;uncontested-officer-positions&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#uncontested-officer-positions&quot; /&gt;Uncontested Officer Positions&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When an officer position has only one candidate that is willing to accept the nomination, there is no reason to vote on that position.
The individual becomes an officer as the sole candidate for the position.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Uncontested officers include:&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;/col&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Name&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Role&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;strong&gt;Olivier Vernin&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Infrastructure Officer&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;strong&gt;Oliver Gondza&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Release Officer&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;strong&gt;Mark Waite&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Documentation Officer&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/col&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;references&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#references&quot; /&gt;References&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://zbynek.github.io/jenkins.io/order-syntax/project/board&quot;&gt;Jenkins Governance Board&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://zbynek.github.io/jenkins.io/order-syntax/project/board-election-process&quot;&gt;Jenkins Board Election Process&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://zbynek.github.io/jenkins.io/order-syntax/project/team-leads&quot;&gt;Jenkins Officers&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://groups.google.com/forum/#!msg/jenkinsci-dev/v8kmEQMT0ts/l8yQ43WNAwAJ&quot;&gt;Announcement in the developer mailing list&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://groups.google.com/forum/#!msg/jenkinsci-dev/vKi9JpxTQxY/4O4lmqfdAgAJ&quot;&gt;2019 elections proposal in the developer mailing list&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/colgroup&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://zbynek.github.io/jenkins.io/order-syntax/blog/2019/11/04/speaker-blog-how-to-build-the-top-mobile-game/</id>
<title>How to build the top mobile game for every platform imaginable</title>
<updated>2019-12-12T20:07:24+00:00</updated>
<published>2019-11-04T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://zbynek.github.io/jenkins.io/order-syntax/blog/2019/11/04/speaker-blog-how-to-build-the-top-mobile-game/" />
<author>
<name>ignacio_fernandez</name>
</author>
<category term="jenkinsworld"></category>
<category term="jenkinsworld2019"></category>
<category term="mobile-game"></category>
<summary>
Context

You have been tasked with managing the Jenkins instance for the highest grossing mobile
game in the world. You learn that this involves helping the game studio iterate their work
against eight different target platforms, each with their SDK, on four different main pipelines,
plus a lot of extra auxiliary jobs. And, of course, the studio wants all of this to go smoothly, in
order to maintain a good pace of features and bugfixes for every release - a release happening
every two weeks. Hitting hundreds of millions of players worldwide.


How are you going to make sure that the environment stays correctly configured, with the
right...
</summary>
<content type="html">
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;context&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#context&quot; /&gt;Context&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You have been tasked with managing the Jenkins instance for the highest grossing mobile
game in the world. You learn that this involves helping the game studio iterate their work
against eight different target platforms, each with their SDK, on four different main pipelines,
plus a lot of extra auxiliary jobs. And, of course, the studio wants all of this to go smoothly, in
order to maintain a good pace of features and bugfixes for every release - a release happening
every two weeks. Hitting hundreds of millions of players worldwide.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;How are you going to make sure that the environment stays correctly configured, with the
right versions of the required software; helping the studio maintain stability and scalability of
their pipelines; ensuring operability of the Jenkins instance; improving the speed of the builds
month after month?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It’s OK to sweat. You are going to need some help!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is just a regular day in the office for a build engineer working at King. Facing a very
broad problem, with high quality standards and even higher stakes. Thankfully, we are not
alone. We have access to a lot of tools - either open source tools, tools developed by the
studios or tools developed by our stellar build infrastructure team in Barcelona - to help carry
us all the way to the publish line. We put all of these tools together, and by their powers
combined, we provide fast, easily operable workflows for the studios, cutting minutes here
and there, ensuring the features a smooth sail from dev, to master, to release.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I will explain all of the tricks we use at King to speed builds up, and to make Jenkins operation
easier for our studios on December 4, 2019, at &lt;a href=&quot;https://www.cloudbees.com/devops-world/lisbon&quot;&gt;DevOps World | Jenkins
World Lisbon&lt;/a&gt;.
Use &lt;strong&gt;JWFOSS&lt;/strong&gt; for 30% discount on registration!
For now, let’s take a look at some of them.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;where-do-we-start&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#where-do-we-start&quot; /&gt;Where do we start?&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We use on-premise elastic infrastructure, spawning machines from certain templates
whenever they are needed. This means that for every build, we are getting a fresh
environment - no intermediate artifacts leftover or anything of the sort, which is good. That
also means that we need to clone our repositories and compile everything every time, which is
bad. However, we have solutions for these two problems.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We make full use of linkclones/snapshots when spawning a VM. Every night we run a
bootstrapper that will power on the base image and perform whatever operations we decide on
it, before turning it back into a template and re-creating the snapshot. In the case of Candy
Crush, we update our caches, and this helps us cut some time off of git clone and compilation.
We call this bootstrapper “cacheo”. It looks more or less like this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Cacheo&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;groovy&quot;&gt;&lt;span style=&quot;color:#00D&quot;&gt;1&lt;/span&gt;. Start elastic agent template image
&lt;span style=&quot;color:#00D&quot;&gt;2&lt;/span&gt;. Connect &lt;span style=&quot;color:#950&quot;&gt;it&lt;/span&gt; to Jenkins
&lt;span style=&quot;color:#00D&quot;&gt;3&lt;/span&gt;. Perform cleanup
&lt;span style=&quot;color:#00D&quot;&gt;4&lt;/span&gt;. Trigger git reference cache jobs
&lt;span style=&quot;color:#00D&quot;&gt;5&lt;/span&gt;. Trigger all the builds you want cached
&lt;span style=&quot;color:#00D&quot;&gt;6&lt;/span&gt;. Turn off template image, delete the agent and recreate the linked clone snapshot&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Every studio can specify on which templates will cacheo run, and what will it do in each of them.
Maybe you want to make sure your Android license is on point. Or download some
packages from artifactory. Perhaps pre-load your gradle dependencies. Whatever it is, cacheo
does it for you and updates your base images every night.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;One of the most common uses is to pre-fill a local git cache, and when doing so, the
improvement is very visible, especially on Windows:&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 25%;&quot;&gt;
&lt;col style=&quot;width: 25%;&quot;&gt;
&lt;col style=&quot;width: 25%;&quot;&gt;
&lt;col style=&quot;width: 25%;&quot;&gt;
&lt;/col&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot; /&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Linux&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;MacOS&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Windows&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;NFS&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;2 min 11s&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;2min 34s&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;8min 32s&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Local&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;1 min 20s&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;1min 35s&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;3min 49s&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Difference&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;strong&gt;39% faster&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;strong&gt;39% faster&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;strong&gt;55% faster&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/col&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This means, speeding up source code fetching by 55% on Windows, on average. That is a LOT!!&lt;/p&gt;
&lt;/div&gt;
&lt;/col&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;but-what-about-actual-compilation&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#but-what-about-actual-compilation&quot; /&gt;But what about actual compilation?&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;All of our major games use the same engine; we bring this code in by means of submodules. This means
there is a big bunch of shared code that needs to be compiled and linked whenever we build the game.
And it’s not rare that this shared code is bigger than the actual game code!
Thankfully, the engine team lent us a hand, and they developed a way to package the compiled shared code.
Normally, the game code lives alongside a specific version of the shared code, which doesn’t get updated too frequently.
Sometimes once a month, sometimes to grab a hotfix. This translates to us potentially compiling the
exact same shared code for quite some time, every time we build the game. Thanks to these
prebuilt artifacts, we are able to skip a huge part of the compilation, at the cost of a simple artifactory download.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Cacheo&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;cmake&quot;&gt;if generate_prebuilt_libs:
    compile_project()

    generate_empty_cmakelists()

    for dependency in dependencies:
        merge_compiled_dependency_into_metalib(dependency)
        write_dependency_to_generated_cmakelists_as_alias_for_metalib(dependency)

elif use_prebuilt_libs:
    add_generated_cmakelists_with_metalib_as_dependency()

    compile_project()&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Thanks to these prebuilt libraries, we are able to skip a big chunk of the compilation,
and it builds up really quickly! Iterative work on several branches, as long as they have
the same engine version, gets sped up in noticeable ways.
There are, however, specific cases when we do choose to build the shared code regardless, such as
when we build release candidates for instance.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Just so you get an idea, times on this table are on average:&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 33.3333%;&quot;&gt;
&lt;col style=&quot;width: 33.3333%;&quot;&gt;
&lt;col style=&quot;width: 33.3334%;&quot;&gt;
&lt;/col&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot; /&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;iOS&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Windows&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;No prebuilts&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;20min 17s&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;40min 30s&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Prebuilts&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;10min 2s&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;23min 20s&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Difference&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;strong&gt;51% faster&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;strong&gt;43% faster&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/col&gt;
&lt;/col&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;i-just-dont-want-to-have-to-deal-with-bureaucracy&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#i-just-dont-want-to-have-to-deal-with-bureaucracy&quot; /&gt;I just don’t want to have to deal with bureaucracy&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Operating Jenkins can be quite complicated. Talk about “Tell me
something I don’t know”, right? And with so many moving pieces (elastic
infrastructure, plugins, dirty workspaces), it might not be easy for
everyone to run specific maintenance tasks. We have a lot of small
pipelines, created by the build infrastructure group, that we can use to
diagnose and work around certain errors, as well as gather useful
information that might be otherwise difficult to find. These pipelines
do things like printing all the installed plugins, deleting offline
on-demand agents, cleaning disconnected VMs from vSphere, or re-run
puppet in a specific Jenkins instance. And any user can run these jobs,
there is no need to be an admin. This allows the team to unblock
themselves if they need to by using these jobs. Here’s one that I
particularly like. How many times have you modified a pipeline and, when
trying to run it, the first thing that happens is that Jenkins says that
it needs approval?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Script Approval&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;groovy&quot;&gt;&lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;import&lt;/span&gt; &lt;span style=&quot;color:#B44;font-weight:bold&quot;&gt;org.jenkinsci.plugins.scriptsecurity.scripts.*&lt;/span&gt;

&lt;span style=&quot;color:#007&quot;&gt;@NonCPS&lt;/span&gt;

&lt;span style=&quot;color:#777&quot;&gt;// Disclaimer - this can have serious security consequences&lt;/span&gt;
&lt;span style=&quot;color:#777&quot;&gt;// Be mindful when you run this!&lt;/span&gt;

&lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color:#06B;font-weight:bold&quot;&gt;call&lt;/span&gt;() {
    sa = ScriptApproval.get()
    toApproveScripts = sa.getPendingScripts().collect()
    println (&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;toApproveScripts: &lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; + toApproveScripts)
    toApproveScripts.each {pending -&amp;gt;
        sa.get().approveScript(pending.getHash())
        println (&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;approvedScripts: &lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; + pending.getHash())
        }
    sa.save()
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The best part? All our Jenkins instances include these jobs, by default, so
no one misses out on the fun.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/colgroup&gt;&lt;/table&gt;&lt;/div&gt;&lt;/col&gt;&lt;/colgroup&gt;&lt;/table&gt;&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://zbynek.github.io/jenkins.io/order-syntax/blog/2019/11/01/devops-world-jenkins-world-san-francisco-in-living-colors/</id>
<title>DevOps World | Jenkins World San Francisco in Living Colors</title>
<updated>2019-12-12T20:07:24+00:00</updated>
<published>2019-11-01T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://zbynek.github.io/jenkins.io/order-syntax/blog/2019/11/01/devops-world-jenkins-world-san-francisco-in-living-colors/" />
<author>
<name>alyssat</name>
</author>
<category term="events"></category>
<category term="devopsworld2019"></category>
<category term="jenkinsworld"></category>
<summary>
DevOps World | Jenkins World San Francisco was August 12 - 15, 2019.
The event was delivered in vivid colors starting with flowing banners hung from street lamp posts to the big screens in breakout rooms, to the expo hall.
The energy and enthusiasm in the Moscone convention center made the colors even more vibrant, thanks to the people attending the conference.


Here&#8217;s a recap of the conference in pictures:


DevOps World | Jenkins World 2019 - San Francisco



Keynote - Evolution of the Continuous Delivery Foundation


Tracy Miranda opened the keynote explaining the evolution of the Continuous Delivery Foundation.


Keynote - Evolution of the Continuous Delivery...
</summary>
<content type="html">
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cloudbees.com/devops-world/san-francisco&quot;&gt;DevOps World | Jenkins World San Francisco&lt;/a&gt; was August 12 - 15, 2019.
The event was delivered in vivid colors starting with flowing banners hung from street lamp posts to the big screens in breakout rooms, to the expo hall.
The energy and enthusiasm in the Moscone convention center made the colors even more vibrant, thanks to the people attending the conference.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here’s a recap of the conference in pictures:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;div class=&quot;title&quot;&gt;DevOps World | Jenkins World 2019 - San Francisco&lt;/div&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://zbynek.github.io/jenkins.io/order-syntax/images/post-images/jenkinsworld2019/1D5_2235.jpg&quot; alt=&quot;1D5 2235&quot; width=&quot;800&quot; /&gt;&lt;/span&gt;
&lt;/p&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;keynote-evolution-of-the-continuous-delivery-foundation&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#keynote-evolution-of-the-continuous-delivery-foundation&quot; /&gt;Keynote - Evolution of the Continuous Delivery Foundation&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Tracy Miranda opened the keynote explaining the evolution of the Continuous Delivery Foundation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Keynote - Evolution of the Continuous Delivery Foundation&lt;/div&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://zbynek.github.io/jenkins.io/order-syntax/images/post-images/jenkinsworld2019/1D5_0437.jpg&quot; alt=&quot;1D5 0437&quot; width=&quot;800&quot; /&gt;&lt;/span&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;influencers-creators-and-members&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#influencers-creators-and-members&quot; /&gt;Influencers, Creators, and Members&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The influencers, creators, and members of the CD Foundation: Tracy Miranda (far left),
Andy Glover (Netflix), Tara Hernandez (Google), Chris Aniszczyk (Linux Foundation), Dave Stanke (Google), Kohsuke Kawaguchi (Jenkins creator), Jayne Groll (DevOps Institute), James Strachan (Jenkins X creator).
“We want to help set Jenkins up for success, into the next decade”, Tyler Croy (not in picture).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Influencers, Creators, and Members of the Continuous Delivery Foundation&lt;/div&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://zbynek.github.io/jenkins.io/order-syntax/images/post-images/jenkinsworld2019/1D5_1310.jpg&quot; alt=&quot;1D5 1310&quot; width=&quot;800&quot; /&gt;&lt;/span&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;contributor-summit&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#contributor-summit&quot; /&gt;Contributor Summit&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The inaugural Continuous Delivery Foundation Contributor Summit and it was a full house!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Continous Delivery Foudnation Contributor Summit&lt;/div&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://zbynek.github.io/jenkins.io/order-syntax/images/post-images/jenkinsworld2019/IMG_8264.jpg&quot; alt=&quot;IMG 8264&quot; width=&quot;400&quot; /&gt;&lt;/span&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;15-years-of-jenkins&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#15-years-of-jenkins&quot; /&gt;15 Years of Jenkins&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A remarkable milestone for the Jenkins project, a celebration of Jenkins turning 15…​cake included!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Fifteen Years of Jenkins&lt;/div&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://zbynek.github.io/jenkins.io/order-syntax/images/post-images/jenkinsworld2019/1D5_0614.jpg&quot; alt=&quot;1D5 0614&quot; width=&quot;400&quot; /&gt;&lt;/span&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;bee-diverse-luncheon&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#bee-diverse-luncheon&quot; /&gt;Bee Diverse Luncheon&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Interactive and engaging luncheon celebrating diversity&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Bee Diverse Luncheon Entrance&lt;/div&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://zbynek.github.io/jenkins.io/order-syntax/images/post-images/jenkinsworld2019/1D5_5576.jpg&quot; alt=&quot;1D5 5576&quot; width=&quot;400&quot; /&gt;&lt;/span&gt;
&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Bee Diverse Luncheon Leading Voices&lt;/div&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://zbynek.github.io/jenkins.io/order-syntax/images/post-images/jenkinsworld2019/1D5_5606.jpg&quot; alt=&quot;1D5 5606&quot; width=&quot;400&quot; /&gt;&lt;/span&gt;
&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Bee Diverse Luncheon Group Discussions&lt;/div&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://zbynek.github.io/jenkins.io/order-syntax/images/post-images/jenkinsworld2019/1D5_5682.jpg&quot; alt=&quot;1D5 5682&quot; width=&quot;400&quot; /&gt;&lt;/span&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;jenkins-contributors-and-experts&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#jenkins-contributors-and-experts&quot; /&gt;Jenkins Contributors and Experts&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Jenkins contributors and experts on hand to educate and share lightning talks and provide one on one Jenkins support.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Jenkins Lightning Talks&lt;/div&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://zbynek.github.io/jenkins.io/order-syntax/images/post-images/jenkinsworld2019/1D5_3207.jpg&quot; alt=&quot;1D5 3207&quot; /&gt;&lt;/span&gt;
&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Jenkins Experts Answering Questions&lt;/div&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://zbynek.github.io/jenkins.io/order-syntax/images/post-images/jenkinsworld2019/1D5_2953.jpg&quot; alt=&quot;1D5 2953&quot; width=&quot;400&quot; /&gt;&lt;/span&gt;
&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Jenkins Experts Discussing and Helping&lt;/div&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://zbynek.github.io/jenkins.io/order-syntax/images/post-images/jenkinsworld2019/IMG_8278.jpg&quot; alt=&quot;IMG 8278&quot; width=&quot;400&quot; /&gt;&lt;/span&gt;
&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Jenkins Experts Gathered&lt;/div&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://zbynek.github.io/jenkins.io/order-syntax/images/post-images/jenkinsworld2019/1D5_3573.jpg&quot; alt=&quot;1D5 3573&quot; width=&quot;400&quot; /&gt;&lt;/span&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;devops-superheroes&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#devops-superheroes&quot; /&gt;DevOps Superheroes&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Even though the conference offered endless learning and networking possibilities, and major milestones worth celebrating,  I felt the true highlight of the conference was the celebration of each individual, “You”.
“You” are the super hero, the driving force behind the incredible innovations to advance technology to where it is today.
Here’s celebrating the super heros in all of YOU!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;div class=&quot;title&quot;&gt;DevOps Superheroes&lt;/div&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://zbynek.github.io/jenkins.io/order-syntax/images/post-images/jenkinsworld2019/1D5_2286.jpg&quot; alt=&quot;1D5 2286&quot; width=&quot;800&quot; /&gt;&lt;/span&gt;
&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Superheroes and the Wookie&lt;/div&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://zbynek.github.io/jenkins.io/order-syntax/images/post-images/jenkinsworld2019/1D5_1643.jpg&quot; alt=&quot;1D5 1643&quot; width=&quot;400&quot; /&gt;&lt;/span&gt;
&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Four Superheroes&lt;/div&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://zbynek.github.io/jenkins.io/order-syntax/images/post-images/jenkinsworld2019/1D5_2949.jpg&quot; alt=&quot;1D5 2949&quot; width=&quot;400&quot; /&gt;&lt;/span&gt;
&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Kohsuke Kawaguchi - Founding Superhero&lt;/div&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://zbynek.github.io/jenkins.io/order-syntax/images/post-images/jenkinsworld2019/1D5_3034.jpg&quot; alt=&quot;1D5 3034&quot; width=&quot;400&quot; /&gt;&lt;/span&gt;
&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;div class=&quot;title&quot;&gt;A DevOps League of Superheroes&lt;/div&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://zbynek.github.io/jenkins.io/order-syntax/images/post-images/jenkinsworld2019/1D5_4067.jpg&quot; alt=&quot;1D5 4067&quot; width=&quot;400&quot; /&gt;&lt;/span&gt;
&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Crowd of Superheroes&lt;/div&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://zbynek.github.io/jenkins.io/order-syntax/images/post-images/jenkinsworld2019/1D5_4243.jpg&quot; alt=&quot;1D5 4243&quot; width=&quot;400&quot; /&gt;&lt;/span&gt;
&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This party will be coming to Lisbon, Portugal on December 3-5, 2019.
We hope to see our EU Jenkins fans at &lt;a href=&quot;https://www.cloudbees.com/devops-world/lisbon&quot;&gt;DevOps World | Jenkins World Lisbon&lt;/a&gt;.
Use &lt;strong&gt;JWFOSS&lt;/strong&gt; for a 30% discount off your pass.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Hope to see you in Lisbon!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://zbynek.github.io/jenkins.io/order-syntax/blog/2019/10/24/jenkins-performance-avoiding-pitfalls/</id>
<title>Jenkins Performance: Avoiding Pitfalls, Diagnosing Issues, and Scaling for Growth - DevOps World | Jenkins World 2019</title>
<updated>2019-12-12T20:07:24+00:00</updated>
<published>2019-10-24T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://zbynek.github.io/jenkins.io/order-syntax/blog/2019/10/24/jenkins-performance-avoiding-pitfalls/" />
<category term="jenkins world"></category>
<category term="jenkinsworld"></category>
<category term="devopsworld2019"></category>
<category term="performance"></category>
<summary>
This is a speaker blogpost for a DevOps World | Jenkins World 2019 talk in Lisbon, Portugal





With Halloween upon us, there&#8217;s no better time to discuss Jenkinstein!
Are you suffering from Jenkins performance issues?
Are users complaining about a slow UI or even scarier, is Jenkins going down frequently?







Come join me at DevOps World | Jenkins World 2019 for "Jenkins Performance: Avoiding Pitfalls, Diagnosing Issues, and Scaling for Growth", a talk about JVM administration and best practices from the front lines of supporting thousands of Jenkins installations worldwide.
During this talk we&#8217;ll cover how to prevent your Jenkins instance from becoming a Jenkinstein!


Topics...
</summary>
<content type="html">
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot; /&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
This is a speaker blogpost for a DevOps World | Jenkins World 2019 talk in Lisbon, Portugal
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With Halloween upon us, there’s no better time to discuss Jenkinstein!
Are you suffering from Jenkins performance issues?
Are users complaining about a slow UI or even scarier, is Jenkins going down frequently?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock right&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://zbynek.github.io/jenkins.io/order-syntax/images/logos/jenkinstein/256.png&quot; alt=&quot;Jenkinstein&quot;&gt;
&lt;/img&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Come join me at &lt;a href=&quot;https://www.cloudbees.com/devops-world/lisbon&quot;&gt;DevOps World | Jenkins World 2019&lt;/a&gt; for &quot;&lt;a href=&quot;https://sched.co/UVVp&quot;&gt;&lt;strong&gt;Jenkins Performance: Avoiding Pitfalls, Diagnosing Issues, and Scaling for Growth&lt;/strong&gt;&lt;/a&gt;&quot;, a talk about JVM administration and best practices from the front lines of supporting thousands of Jenkins installations worldwide.
During this talk we’ll cover how to prevent your Jenkins instance from becoming a Jenkinstein!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Topics we will be discussing:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;JVM administration best practices&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Horizontal scaling&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Analyzing thread dumps, GC logs, and heap dumps&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Real world data showing 3500% performance increases&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Garbage collection&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://zbynek.github.io/jenkins.io/order-syntax/images/performance/gc-unhealthy.png&quot; alt=&quot;gc unhealthy&quot;&gt;
&lt;/img&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We’ll be discussing how you can forecast for growth, and baseline using key performance indicators like application throughput and latency, by analyzing spooky data like Garbage Collection logs!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Come join me for the presentation in Lisbon! There will be candy!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;slides&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#slides&quot; /&gt;Slides&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;iframe src=&quot;https://drive.google.com/file/d/1qNHGcDN5YQGPJ38vRRU-l1_TFMB3NmKo/preview&quot; width=&quot;800&quot; height=&quot;460&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://zbynek.github.io/jenkins.io/order-syntax/blog/2019/10/21/plugin-docs-on-github/</id>
<title>Plugin Documentation-as-Code: Moving docs to GitHub</title>
<updated>2019-12-12T20:07:24+00:00</updated>
<published>2019-10-21T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://zbynek.github.io/jenkins.io/order-syntax/blog/2019/10/21/plugin-docs-on-github/" />
<author>
<name>oleg_nenashev</name>
</author>
<category term="hacktoberfest"></category>
<category term="developer"></category>
<category term="documentation"></category>
<category term="wiki"></category>
<category term="contributors"></category>
<summary>
In September 2019 we announced
support of GitHub as a source of documentation for the Jenkins Plugin Site.
Thanks to Zbynek Konecny and Olivier Vernin and other contributors,
now it is possible to store plugin documentation right inside plugin repositories instead of Jenkins Wiki which was historically difficult to maintain for plugin maintainers and for the Jenkins infrastructure team.


This blogpost may be interesting to plugin maintainers and to those who want to contribute to the Jenkins documentation.
I will describe how to migrate plugin documentation to GitHub and to get pages like this one:





Why?


By using plugin GitHub repositories for documentation,
plugin maintainers can follow the...
</summary>
<content type="html">
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In September 2019 we &lt;a href=&quot;https://groups.google.com/forum/#!msg/jenkinsci-dev/VSdfVMDIW-A/vqXxJiI7AQAJ&quot;&gt;announced&lt;/a&gt;
support of GitHub as a source of documentation for the &lt;a href=&quot;https://plugins.jenkins.io&quot;&gt;Jenkins Plugin Site&lt;/a&gt;.
Thanks to &lt;a href=&quot;https://github.com/zbynek&quot;&gt;Zbynek Konecny&lt;/a&gt; and &lt;a href=&quot;https://github.com/olblak&quot;&gt;Olivier Vernin&lt;/a&gt; and other contributors,
now it is possible to store plugin documentation right inside plugin repositories instead of &lt;a href=&quot;https://wiki.jenkins.io&quot;&gt;Jenkins Wiki&lt;/a&gt; which was historically difficult to maintain for plugin maintainers and for the Jenkins infrastructure team.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This blogpost may be interesting to plugin maintainers and to those who want to contribute to the Jenkins documentation.
I will describe how to migrate plugin documentation to GitHub and to get pages like this one:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image center&quot;&gt;&lt;img src=&quot;https://zbynek.github.io/jenkins.io/order-syntax/images/post-images/2019-github-documentation/thumbnail.png&quot; alt=&quot;GitHub Documentation example&quot; /&gt;&lt;/span&gt;
&lt;/p&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;why&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#why&quot; /&gt;Why?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;By using plugin GitHub repositories for documentation,
plugin maintainers can follow the &lt;em&gt;Documentation-as-code&lt;/em&gt; approach and make documentation changes a part of the pull requests so that documentation follow-ups do not get forgotten.
It also gives an opportunity to review the documentation changes and to add documentation contributor recognition, especially if the story is combined with &lt;a href=&quot;https://github.com/jenkinsci/.github/blob/master/.github/release-drafter.adoc&quot;&gt;Release Drafter&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Unfortunately, before September 2019 usage of GitHub documentation was causing some issues.
First of all, many plugin maintainers have already moved their documentation to GitHub, and it caused fragmentation of the documentation (Wiki, GitHub, jenkins.io).
To address it, plugin maintainers still had to maintain stub Wiki pages with redirects,
and users had to spend some time to find out where the real documentation is located.
By supporting GitHub as a documentation source, we allow maintainers to phase out the plugin Wiki pages while improving the user experience.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;And there are even more pressing reasons to do the migration now…​
If you are subscribed to the &lt;a href=&quot;https://groups.google.com/d/forum/jenkinsci-dev&quot;&gt;developer mailing list&lt;/a&gt;,
you may have also seen an announcement by &lt;a href=&quot;https://github.com/rtyler&quot;&gt;R. Tyler Croy&lt;/a&gt; about Jenkins Wiki stability issues
and making it read-only as a temporary measure to stabilize the instance
(&lt;a href=&quot;https://groups.google.com/forum/#!topic/jenkinsci-dev/lNmas8aBRrI&quot;&gt;mailing list thread&lt;/a&gt;).
Although the functionality has been partially restored afterwards,
there is a consensus in the Infrastructure team that we should gradually move to alternate solutions.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;examples&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#examples&quot; /&gt;Examples&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Since the announcement in September, more than 50 plugins were moved from Wiki to GitHub.
Few examples:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://plugins.jenkins.io/configuration-as-code&quot;&gt;Configuration as Code Plugin&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://plugins.jenkins.io/mailer&quot;&gt;Mailer Plugin&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://plugins.jenkins.io/gradle&quot;&gt;Gradle Plugin&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://plugins.jenkins.io/role-strategy&quot;&gt;Role Strategy Plugin&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image center&quot;&gt;&lt;img src=&quot;https://zbynek.github.io/jenkins.io/order-syntax/images/post-images/2019-github-documentation/role-strategy-screenshot.png&quot; alt=&quot;Role Strategy example&quot; /&gt;&lt;/span&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;how-to-enable-github-documentation-for-your-plugin&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#how-to-enable-github-documentation-for-your-plugin&quot; /&gt;How to enable GitHub documentation for your plugin?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Convert documentation from Wiki to GitHub Asciidoc or Markdown format if you have not done it yet.&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;It can be easily done in a semi-automatic way using &lt;a href=&quot;https://jenkins-wiki-exporter.jenkins.io/&quot;&gt;Jenkins Wiki Exporter&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;See the guidelines
&lt;a href=&quot;https://zbynek.github.io/jenkins.io/order-syntax/doc/developer/publishing/wiki-page/#migrating-from-wiki-to-github&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Change the &lt;code&gt;&amp;lt;url&amp;gt;&lt;/code&gt; field in pom.xml so that it points to GitHub
(&lt;a href=&quot;https://zbynek.github.io/jenkins.io/order-syntax/doc/developer/publishing/documentation/#referencing-the-documentation-page-from-the-project-file&quot;&gt;guide&lt;/a&gt;).
 Examples of valid links:&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;&lt;a href=&quot;https://github.com/jenkinsci/mailer-plugin&quot; class=&quot;bare&quot;&gt;https://github.com/jenkinsci/mailer-plugin&lt;/a&gt;&lt;/code&gt; - plugin site will use GitHub REST API to extract README&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;&lt;a href=&quot;https://github.com/jenkinsci/ssh-credentials-plugin/blob/master/doc/README.md&quot; class=&quot;bare&quot;&gt;https://github.com/jenkinsci/ssh-credentials-plugin/blob/master/doc/README.md&lt;/a&gt;&lt;/code&gt; - extraction of a plugin page from a custom location&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Optional: Add badges to the page to improve look&amp;amp;feel and to provide quick links for users.
There are standard badges for changelogs, chats, plugin site, and installation numbers.&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/jenkinsci/role-strategy-plugin/master/README.md&quot;&gt;Example for Markdown&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/jenkinsci/mailer-plugin/master/README.adoc&quot;&gt;Example for Asciidoc&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Release the new plugin version&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Wait a few hours till the change propagates.
After that, the &lt;a href=&quot;https://plugins.jenkins.io&quot;&gt;Jenkins Plugin Site&lt;/a&gt; will show the new documentation from GitHub.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;whats-next&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#whats-next&quot; /&gt;What’s next?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The story is tracked as &lt;a href=&quot;https://issues.jenkins-ci.org/browse/WEBSITE-406&quot;&gt;WEBSITE-406&lt;/a&gt; which is a part of the wider subproject for using GitHub as a source of data for the Jenkins plugin site and update managers (&lt;a href=&quot;https://issues.jenkins-ci.org/browse/WEBSITE-637&quot;&gt;WEBSITE-637&lt;/a&gt;).
Later steps include support showing changelogs from GitHub releases, pulling plugin tags from GitHub, showing plugin logos, and using &lt;a href=&quot;https://github.com/jenkins-infra/repository-permissions-updater&quot;&gt;Repository Permission Updater&lt;/a&gt; as a source of the maintainer information.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;how-to-contribute&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#how-to-contribute&quot; /&gt;How to contribute?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;October is a great time to contribute!
Plugin documentation is one of the featured projects for &lt;a href=&quot;https://zbynek.github.io/jenkins.io/order-syntax/events/hacktoberfest&quot;&gt;Hacktoberfest&lt;/a&gt;,
and we will welcome all contributions to the documentation and to the codebase.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;contributing-to-documentation&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#contributing-to-documentation&quot; /&gt;Contributing to Documentation&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We are looking for contributors who are interested to improve plugin documentation and to help us with migration from Wiki to GitHub.
For dozens of plugins the documentation is already in GitHub,
and you are welcome to submit pull requests against any repository.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Migrating documentation:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://zbynek.github.io/jenkins.io/order-syntax/doc/developer/publishing/wiki-page/#migrating-from-wiki-to-github&quot;&gt;Migrating plugin documentation from Wiki to GitHub&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/jenkins-infra/jenkins.io/blob/master/CONTRIBUTING.adoc#moving-documentation-from-jenkins-wiki&quot;&gt;Moving documentation from Jenkins Wiki to jenkins.io&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://issues.jenkins-ci.org/browse/JENKINS-59467&quot;&gt;JENKINS-59467: Template issue for plugin docs migration&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://issues.jenkins-ci.org/issues/?filter=18650&amp;amp;jql=project%20%3D%20WEBSITE%20AND%20labels%20%3D%20newbie-friendly%20and%20status%20in%20(Open%2C%20Reopened%2C%20%22To%20Do%22)&quot;&gt;Newbie-friendly documentation tasks&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you have any questions about contributing to the documentation,
please see &lt;a href=&quot;https://jenkins.io/participate/#document&quot;&gt;this page&lt;/a&gt; or reach out to us in the &lt;a href=&quot;https://gitter.im/jenkinsci/docs&quot;&gt;Docs SIG Gitter chat&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;code-contributions&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#code-contributions&quot; /&gt;Code contributions&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Would you like to write some code in Java or JavaScript?
Or would you like to work on CSS styles and improve Jenkins design?
In such case you are welcome to contribute to the &lt;a href=&quot;https://plugins.jenkins.io&quot;&gt;Jenkins Plugin Site&lt;/a&gt;.
It is our own plugin marketplace implementation, and we invite contributions to this area.
The plugin site is really easy to develop.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://issues.jenkins-ci.org/browse/WEBSITE-637&quot;&gt;WEBSITE-637&lt;/a&gt; - EPIC for Plugin site and GitHub integrations&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/jenkins-infra/plugin-site&quot;&gt;jenkins-infra/plugin-site&lt;/a&gt; - Frontend (JavaScript, React, XSS, YARN)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/jenkins-infra/plugin-site-api&quot;&gt;jenkins-infra/plugin-site-api&lt;/a&gt; - Plugin site API and Docker packaging (Java, Maven, Docker)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;useful-links&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#useful-links&quot; /&gt;Useful links&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://zbynek.github.io/jenkins.io/order-syntax/doc/developer/publishing/documentation/&quot;&gt;Plugin Documentation&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://plugins.jenkins.io&quot;&gt;Jenkins Plugin Site&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://jenkins-wiki-exporter.jenkins.io/&quot;&gt;Jenkins Wiki Exporter tool&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://zbynek.github.io/jenkins.io/order-syntax/blog/2019/10/21/thinking-about-jenkins-security/</id>
<title>Thinking About Jenkins Security - DevOps World | Jenkins World 2019</title>
<updated>2019-12-12T20:07:24+00:00</updated>
<published>2019-10-21T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://zbynek.github.io/jenkins.io/order-syntax/blog/2019/10/21/thinking-about-jenkins-security/" />
<category term="jenkins world"></category>
<category term="jenkinsworld"></category>
<category term="devopsworld2019"></category>
<category term="security"></category>
<summary>
This is a speaker blogpost for a DevOps World | Jenkins World 2019 talk in Lisbon, Portugal





Come join us at DevOps World | Jenkins World 2019 for "Thinking about Jenkins Security", a talk about securing your Jenkins server.
We&#8217;ll review the layers that secure Jenkins and describe techniques that you can use to protect your Jenkins server.


Topics will include:




The secure by default configuration that Jenkins provides


Risks associated with reducing default security settings


Authentication and authorization alternatives


Using "least privilege" principles


Jenkins credentials and trusted access to resources


Software updates and Jenkins project security notices









We&#8217;ll intermix descriptions of good practices with some security horror stories.
The horror...
</summary>
<content type="html">
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot; /&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
This is a speaker blogpost for a DevOps World | Jenkins World 2019 talk in Lisbon, Portugal
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Come join us at &lt;a href=&quot;https://www.cloudbees.com/devops-world/lisbon&quot;&gt;DevOps World | Jenkins World 2019&lt;/a&gt; for &quot;&lt;a href=&quot;https://sched.co/UXWy&quot;&gt;&lt;strong&gt;Thinking about Jenkins Security&lt;/strong&gt;&lt;/a&gt;&quot;, a talk about securing your Jenkins server.
We’ll review the layers that secure Jenkins and describe techniques that you can use to protect your Jenkins server.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Topics will include:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The &lt;strong&gt;secure by default&lt;/strong&gt; configuration that Jenkins provides&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Risks associated with reducing default security settings&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Authentication and authorization alternatives&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Using &quot;&lt;strong&gt;least privilege&lt;/strong&gt;&quot; principles&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Jenkins &lt;strong&gt;credentials&lt;/strong&gt; and trusted access to resources&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Software updates and Jenkins project security notices&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://zbynek.github.io/jenkins.io/order-syntax/images/security/do-not-run-malicious-code.png&quot; alt=&quot;do not run malicious code&quot;&gt;
&lt;/img&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We’ll intermix descriptions of good practices with some security horror stories.
The horror stories remind us of our mistakes; we will discuss how to detect them and how to prevent them.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Come join us for the presentation in Lisbon!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;slides&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#slides&quot; /&gt;Slides&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;iframe src=&quot;https://drive.google.com/file/d/1RisjNUfu-3_VOyTIvY0cdWWzM8HKDtY9/preview&quot; width=&quot;800&quot; height=&quot;460&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://zbynek.github.io/jenkins.io/order-syntax/blog/2019/10/08/jcasc-phase1-blog/</id>
<title>JCasC Community Bridge Dev Tools - Phase 1</title>
<updated>2019-12-12T20:07:24+00:00</updated>
<published>2019-10-08T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://zbynek.github.io/jenkins.io/order-syntax/blog/2019/10/08/jcasc-phase1-blog/" />
<author>
<name>sladyn98</name>
</author>
<category term="community-bridge"></category>
<category term="JCasC"></category>
<category term="VSCode"></category>
<category term="community"></category>
<summary>
Community Bridge Introduction

Community Bridge is an initiative by the Linux Foundation to accelerate the adoption, innovation and sustainability of open source projects. I came across this initiative in a blog post. I had been contributing to Jenkins at the time and decided to have a chat with Oleg Nenashev and Tracy Miranda regarding the possibility of a project under the Community Bridge initiative. Fortunately for me JCasC ( Jenkins Configuration as Code) had the mentors as well as the project idea in place to start a project. After a few regular meetings we ironed out the details of the programme...
</summary>
<content type="html">
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;community-bridge-introduction&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#community-bridge-introduction&quot; /&gt;Community Bridge Introduction&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://communitybridge.org/&quot;&gt;Community Bridge&lt;/a&gt; is an initiative by the Linux Foundation to accelerate the adoption, innovation and sustainability of open source projects. I came across this initiative in a blog post. I had been contributing to Jenkins at the time and decided to have a chat with Oleg Nenashev and Tracy Miranda regarding the possibility of a project under the Community Bridge initiative. Fortunately for me JCasC ( Jenkins Configuration as Code) had the mentors as well as the project idea in place to start a project. After a few regular meetings we ironed out the details of the programme and on August 7th I began with my journey!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;jcasc-developer-tools-json-schema&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#jcasc-developer-tools-json-schema&quot; /&gt;JCasC Developer Tools — JSON Schema&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;JSON files when submitted to a server undergo a validation to determine whether the values and the format are correct and that they conform to a well defined schema, this schema is known as a JSON Schema. A YAML file can also be validated using a JSON Schema.
The main premise of JCasC is to load YAML files written by developers into the Jenkins instance. An example of a JCasC YAML file is:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#f8f;background:#505&quot;&gt;&lt;span style=&quot;color:#f4f&quot;&gt;---&lt;/span&gt;&lt;/span&gt;
&lt;span style=&quot;color:#606&quot;&gt;jenkins&lt;/span&gt;:
 &lt;span style=&quot;color:#606&quot;&gt;systemMessage&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#D20&quot;&gt;“Hello World”&lt;/span&gt;&lt;/span&gt;
 &lt;span style=&quot;color:#F00;background-color:#FAA&quot;&gt;numExecutors:2&lt;/span&gt;
 &lt;span style=&quot;color:#F00;background-color:#FAA&quot;&gt;---&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The above YAML configuration will configure Jenkins to display a message &lt;code&gt;Hello world&lt;/code&gt; with the number of executors set to two. In order to validate the YAML we have a schema. This schema is written using jelly files (Executable XML files) and currently it is not a valid schema. The first phase of the project is based around rewriting the schema generation to java and developing a better test framework for it, because currently the schema is not testable.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;phase-1-jcasc-dev-tools&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#phase-1-jcasc-dev-tools&quot; /&gt;Phase 1 — JCasC Dev Tools&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The first week I got into studying how the schema was generated.With the support of two of my awesome mentors Tim Jacomb and Joseph Peterson
I finally got an understanding of the current schema.
So JCasC has a set of configurators for describing a YAML file.
They are:
a) Base Configurators
b) Hetero Describable Configurators
c) Data Bound Configurators
These configurators together successfully describe a YAML file.
We proceeded to generate the schema with the help of individual description of each of these configurators.
The JSON Schema has a set of components, consider the above yaml file as an example:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;json&quot;&gt;&lt;span style=&quot;color:#F00;background-color:#FAA&quot;&gt;-&lt;/span&gt;&lt;span style=&quot;color:#F00;background-color:#FAA&quot;&gt;-&lt;/span&gt;&lt;span style=&quot;color:#F00;background-color:#FAA&quot;&gt;-&lt;/span&gt;
{
  &lt;span style=&quot;color:#606&quot;&gt;&lt;span style=&quot;color:#404&quot;&gt;&quot;&lt;/span&gt;&lt;span&gt;jenkins&lt;/span&gt;&lt;span style=&quot;color:#404&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;: {
    &lt;span style=&quot;color:#606&quot;&gt;&lt;span style=&quot;color:#404&quot;&gt;&quot;&lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span style=&quot;color:#404&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;object&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;,
    &lt;span style=&quot;color:#606&quot;&gt;&lt;span style=&quot;color:#404&quot;&gt;&quot;&lt;/span&gt;&lt;span&gt;properties&lt;/span&gt;&lt;span style=&quot;color:#404&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;: {
      &lt;span style=&quot;color:#606&quot;&gt;&lt;span style=&quot;color:#404&quot;&gt;&quot;&lt;/span&gt;&lt;span&gt;systemMessage&lt;/span&gt;&lt;span style=&quot;color:#404&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;: {
        &lt;span style=&quot;color:#606&quot;&gt;&lt;span style=&quot;color:#404&quot;&gt;&quot;&lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span style=&quot;color:#404&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;string&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
      },
      &lt;span style=&quot;color:#606&quot;&gt;&lt;span style=&quot;color:#404&quot;&gt;&quot;&lt;/span&gt;&lt;span&gt;numExecutors&lt;/span&gt;&lt;span style=&quot;color:#404&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;: {
        &lt;span style=&quot;color:#606&quot;&gt;&lt;span style=&quot;color:#404&quot;&gt;&quot;&lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span style=&quot;color:#404&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;integer&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
      }
    }
  }
}
&lt;span style=&quot;color:#F00;background-color:#FAA&quot;&gt;-&lt;/span&gt;&lt;span style=&quot;color:#F00;background-color:#FAA&quot;&gt;-&lt;/span&gt;&lt;span style=&quot;color:#F00;background-color:#FAA&quot;&gt;-&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So here Jenkins is the base configurator and it has a set of attributes viz systemMessage and numExecutors, so our schema needs to be able to describe a set of attributes for every field in the schema. Some of the fields that our JSON Schema uses to describe the YAML are:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;1) type : String, int, Boolean etc.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;2) properties : A set of fields describing the part field.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;3) id: Unique Identifier for the field
Thus the above schema successfully verifies the YAML configuration.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;java-rewrite&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#java-rewrite&quot; /&gt;JAVA Rewrite&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We used JSON Objects to build components of the schema.The basic flow that is followed to generate the schema is as follows:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;a) Iterate through the Base Configurators.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;b) Iterate over the list of Base Configurator.Attributes and add each attribute to the schema.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;c) Iterate over the HeteroDescribable Configurators and add each configurator to the schema along with its required properties.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The set of PR’s Resolved during Phase 1 are as follows:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;a)&lt;a href=&quot;https://github.com/jenkinsci/configuration-as-code-plugin/pull/980&quot;&gt;Basic Schema&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;b)&lt;a href=&quot;https://github.com/jenkinsci/configuration-as-code-plugin/pull/1030&quot;&gt;Schema Doc Page&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;c)&lt;a href=&quot;https://github.com/jenkinsci/configuration-as-code-plugin/pull/1078&quot;&gt;Test Framework&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;d)&lt;a href=&quot;https://github.com/jenkinsci/configuration-as-code-plugin/pull/1027&quot;&gt;Nested Schema&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;That is all from me guys, I am currently preparing for phase 2 and working towards fixing any pending issues of Phase 1. Thanks for reading.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;phase-2-goals&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#phase-2-goals&quot; /&gt;Phase 2 Goals:&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We would primarily target VSCode integration in phase 2 with the aim of:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;a)Validation of JCasC YAML files with the schema&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;b)Autocompletion&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;c)Integration with a live Jenkins instance.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;contributions&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#contributions&quot; /&gt;Contributions&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We would love to get feedback from you on the stuff we are working on. Contributions to the project would be highly appreciated.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;a)&lt;a href=&quot;https://gitter.im/jenkinsci/jcasc-devtools-project&quot;&gt;Gitter Chat&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;b)&lt;a href=&quot;https://github.com/jenkinsci/configuration-as-code-plugin&quot;&gt;Github Repository&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;c)&lt;a href=&quot;https://jenkins.io/projects/jcasc/dev-tools/&quot;&gt;Project Introduction&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://zbynek.github.io/jenkins.io/order-syntax/blog/2019/10/08/google-summer-of-code-mentor-and-org-admin-perspective/</id>
<title>Google Summer of Code Mentor and Org Admin Perspective</title>
<updated>2019-12-12T20:07:24+00:00</updated>
<published>2019-10-08T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://zbynek.github.io/jenkins.io/order-syntax/blog/2019/10/08/google-summer-of-code-mentor-and-org-admin-perspective/" />
<author>
<name>markyjackson-taulia</name>
</author>
<category term="gsoc"></category>
<category term="gsoc2019"></category>
<category term="jenkins"></category>
<category term="community"></category>
<category term="events"></category>
<category term="mentor"></category>
<summary>
I was fortunate enough to participate in the Google Summer of Code 2019 as a mentor and org admin. This was great
and I wanted to share in hopes of encouraging more people to join.
You can learn more about the Google Summer of Code here: https://jenkins.io/projects/gsoc/


Community Bonding


The first phase of the project is the community bonding phase. This is where the student and other mentors come together
to lay out the plan for the project. It is important to set expectations and ensure that the student is well aware of
what will take place and also made to feel welcome.


Parichay Barpanda was the...
</summary>
<content type="html">
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I was fortunate enough to participate in the Google Summer of Code 2019 as a mentor and org admin. This was great
and I wanted to share in hopes of encouraging more people to join.
You can learn more about the Google Summer of Code here: &lt;a href=&quot;https://jenkins.io/projects/gsoc/&quot; class=&quot;bare&quot;&gt;https://jenkins.io/projects/gsoc/&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;community-bonding&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#community-bonding&quot; /&gt;Community Bonding&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The first phase of the project is the community bonding phase. This is where the student and other mentors come together
to lay out the plan for the project. It is important to set expectations and ensure that the student is well aware of
what will take place and also made to feel welcome.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://jenkins.io/blog/authors/baymac&quot;&gt;Parichay Barpanda&lt;/a&gt; was the student and he was super awesome from the get go. The project he was working on was the Gitlab
Branch Source Plugin. More can be found here: &lt;a href=&quot;https://github.com/jenkinsci/gitlab-branch-source-plugin&quot;&gt;jenkinsci/gitlab-branch-source-plugin&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;From the mentor side it was myself and Justin Harringa. Justin was just amazing throughout this project and I seriously
could not have done this without him. He was encouraging, empathetic and just all around great. I would gladly serve
with him again.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We laid out our plan and guidance and got to work.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;first-evaluations&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#first-evaluations&quot; /&gt;First Evaluations&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The first evaluation was quickly upon us and Parichay was ready!
The work he put in was nothing shy of amazing. We did our 1st demo and he really rocked it. A video of that demo can be
found on : &lt;a href=&quot;https://www.youtube.com/watch?v=ij6ByZqI67o&quot;&gt;Youtube&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;second-evaluations&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#second-evaluations&quot; /&gt;Second Evaluations&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There was not much time to rest before we realized that phase II end was upon us but Parichay was ready. Again, he
nailed it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;That demo can be found &lt;a href=&quot;https://www.youtube.com/watch?v=tnoObQqGhyM&amp;amp;t=2380s&quot;&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;mentors-submit-final-evaluations&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#mentors-submit-final-evaluations&quot; /&gt;Mentors Submit Final Evaluations&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We had our final evaluation and at this point Parichay was seasoned. He was getting issues assigned to him, working on
little bug fixes and setting his roadmap for features. He absolutely blew Justin and I away.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Parichay’s final evaluation demo can be seen &lt;a href=&quot;https://www.youtube.com/watch?v=cMSbdGwGWp0&amp;amp;t=905s&quot;&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;At the conclusion of the final demo’s, Justin and I met and went over Parichay’s final evaluation. At this point we had
met twice a week for several months, we have reviewed code daily, we had community involvement and most of all we had
seen Parichay grow into a seasoned software developer.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Justin and I were without a doubt passing Parichay on his entire body of work. I am actually tearing up typing this
because I am so proud of Parichay.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;org-admin&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#org-admin&quot; /&gt;Org Admin&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Being an org admin for the 2019 Google Summer of Code project for the Jenkins organization was truly rewarding and couldn’t
have been accomplished without the help from Oleg Nenashev, Martin d’Anjou, Jeff Pearce and Lloyd Chang.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As an org admin we handled issues with mentors, community members and disagreements involving work. These items were only
a few and as a team we handled them accordingly.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We regularly met to discuss and plan. Coordinating and dealing with a project like Google Summer of Code is no small feat
but this team made it super easy and I am so thankful for them and all that I learned.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;closing&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#closing&quot; /&gt;Closing&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In looking back at this experience I am so grateful for the opportunity I was given. This was such a rewarding experience
to not only be able to mentor but also be an org admin. Not only will I be back next year (we are already in the
planning stages) but I highly encourage people reading this to consider joining. You will not be disappointed.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I am so thankful for all the students, mentors and fellow org admins. Your dedication to open source is so valued. You
showed and continue to show what this project is all about, and that is being welcoming, open and transparent. Helping
people grow as individuals while learning skills is what I love about this community.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Thank you to everyone and I hope your futures are bright!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://zbynek.github.io/jenkins.io/order-syntax/blog/2019/10/01/hacktoberfest/</id>
<title>Hacktoberfest 2019. Contribute to Jenkins!</title>
<updated>2019-12-12T20:07:24+00:00</updated>
<published>2019-10-01T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://zbynek.github.io/jenkins.io/order-syntax/blog/2019/10/01/hacktoberfest/" />
<author>
<name>oleg_nenashev</name>
</author>
<category term="hacktoberfest"></category>
<category term="event"></category>
<category term="community"></category>
<category term="newcomer"></category>
<category term="outreach-programs"></category>
<summary>
Once again, Hacktoberfest is back!
During this October event, everyone can support open-source by contributing changes, and can earn limited edition swag.
We invite you to contribute to Jenkins, regardless of your experience and background.
You can write code, improve documentation and design, localize Jenkins or create new artwork.
Any GitHub pull request counts!


Quick start




Sign-up to Hacktoberfest on the event website.


Join our Gitter channel.


Everything is set, just start creating pull-requests!



This year Hacktoberfest does not require labeling pull requests,
but please mention Hacktoberfest in your pull requests for faster reviews
(see FAQ: Marking Pull requests)







See the details below.







How to contribute?


There are many ways to
contribute to Jenkins.
It is...
</summary>
<content type="html">
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Once again, &lt;a href=&quot;https://hacktoberfest.digitalocean.com&quot;&gt;Hacktoberfest&lt;/a&gt; is back!
During this October event, everyone can support open-source by contributing changes, and can earn limited edition swag.
We invite you to contribute to Jenkins, regardless of your experience and background.
You can write code, improve documentation and design, localize Jenkins or create new artwork.
Any GitHub pull request counts!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;quick-start&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#quick-start&quot; /&gt;Quick start&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Sign-up to Hacktoberfest on &lt;a href=&quot;https://hacktoberfest.digitalocean.com&quot;&gt;the event website&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Join &lt;a href=&quot;https://gitter.im/jenkinsci/hacktoberfest&quot;&gt;our Gitter channel&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Everything is set, just start creating pull-requests!&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;This year Hacktoberfest does not require labeling pull requests,
but please mention Hacktoberfest in your pull requests for faster reviews
(see &lt;a href=&quot;https://zbynek.github.io/jenkins.io/order-syntax/events/hacktoberfest/faq/#how-do-i-mark-my-pull-requests&quot;&gt;FAQ: Marking Pull requests&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;See the details below.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image center&quot;&gt;&lt;img src=&quot;https://zbynek.github.io/jenkins.io/order-syntax/images/hacktoberfest/2019_social.png&quot; alt=&quot;Hacktoberfest&quot; /&gt;&lt;/span&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;how-to-contribute&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#how-to-contribute&quot; /&gt;How to contribute?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are many ways to
&lt;a href=&quot;https://jenkins.io/participate/&quot;&gt;contribute&lt;/a&gt; to Jenkins.
It is not just about code, any pull request in GitHub counts towards the Hacktoberfest goal.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Code&lt;/strong&gt; - Contribute to the code or automated tests.
We have components written in Java, JavasScript, Groovy, Go, Ruby and other languages.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Write&lt;/strong&gt; - Improve documentation, write blogposts, create tutorials or solution pages&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Localize&lt;/strong&gt; - Help us to &lt;a href=&quot;https://wiki.jenkins.io/display/JENKINS/Internationalization&quot;&gt;Localize&lt;/a&gt; Jenkins to other languages&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Design&lt;/strong&gt; - &lt;a href=&quot;https://zbynek.github.io/jenkins.io/order-syntax/artwork&quot;&gt;artwork&lt;/a&gt; and UI improvements also count!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Organize&lt;/strong&gt; - Organize a local meetup for Jenkins &amp;amp; Hacktoberfest (see &lt;a href=&quot;https://zbynek.github.io/jenkins.io/order-syntax/events/hacktoberfest/event-kit&quot;&gt;our event kit&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Spread the word&lt;/strong&gt; - Share your accomplishments in social media using the &lt;code&gt;#hacktoberfest&lt;/code&gt; and &lt;code&gt;#jenkinsci&lt;/code&gt; hashtags
(or CC &lt;code&gt;@jenkinsci&lt;/code&gt; in Twitter).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;where-to-contribute&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#where-to-contribute&quot; /&gt;Where to contribute?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Jenkins project is spread across multiple organizations on GitHub (jenkinsci, jenkins-infra, jenkins-zh).
You are welcome to contribute to &lt;strong&gt;any&lt;/strong&gt; repository in &lt;strong&gt;any&lt;/strong&gt; of these organizations,
or to any other Jenkins-related repository on GitHub.
If you adopt Jenkins in your own open-source projects (e.g. Jenkins Pipeline or Configuration as Code),
it counts as well! Some useful queries:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://issues.jenkins-ci.org/issues/?jql=labels%20%3D%20hacktoberfest%20and%20status%20in%20(Open%2C%20%22To%20Do%22%2C%20Reopened)&quot;&gt;Jenkins JIRA issues suggested for Hacktoberfest&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/search?q=org%3Ajenkinsci+org%3Ajenkins-infra+org%3Ajenkins-zh+is%3Aissue+is%3Aopen+label%3Ahacktoberfest&quot;&gt;GitHub issues suggested for Hacktoberfest&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://issues.jenkins-ci.org/issues/?jql=labels%20%3D%20newbie-friendly%20and%20status%20in%20(Open%2C%20%22To%20Do%22%2C%20Reopened)&quot;&gt;Newbie-friendly issues in Jenkins JIRA&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/search?q=org%3Ajenkinsci+org%3Ajenkins-infra+org%3Ajenkins-zh+is%3Aissue+is%3Aopen+label%3A%22good+first+issue%22&quot;&gt;Good first issues on GitHub&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Featured projects&lt;/strong&gt;. If you are a newcomer contributor, we have prepared a &lt;a href=&quot;https://zbynek.github.io/jenkins.io/order-syntax/events/hacktoberfest/#featured-projects&quot;&gt;list of projects/components&lt;/a&gt; where you will get a warm welcome.
All these projects have newbie-friendly tasks, contributing guidelines, and active maintainers
who have committed to assist contributors and to quickly review pull requests.
The list of featured projects will be updated during the event,
and we will make sure to create more newbie-friendly tasks if needed.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you wonder about &lt;a href=&quot;https://jenkins-x.io&quot;&gt;Jenkins X&lt;/a&gt;, it also part of Hacktoberfest this year!
They offer various topics, including hacking Jenkins X or improving its documentation.
See &lt;a href=&quot;https://jenkins-x.io/blog/2019/09/27/hacktoberfest2019/&quot;&gt;this blogpost&lt;/a&gt; for the announcement and links.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;how-to-get-help&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#how-to-get-help&quot; /&gt;How to get help?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are stuck or have any question,
see our &lt;a href=&quot;https://zbynek.github.io/jenkins.io/order-syntax/events/hacktoberfest/faq&quot;&gt;Hacktoberfest FAQ&lt;/a&gt; page for the common questions.
If it does not help, please reach out to us in &lt;a href=&quot;https://gitter.im/jenkinsci/hacktoberfest&quot;&gt;our Gitter chat&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;any-meetups-this-year&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#any-meetups-this-year&quot; /&gt;Any meetups this year?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are many events being organized by open-source communities.
You can join one of &lt;a href=&quot;https://hacktoberfest.digitalocean.com/#events&quot;&gt;these events&lt;/a&gt;.
We invite to join the Jenkins Online Meetups on Oct 03
 (&lt;a href=&quot;https://www.meetup.com/Jenkins-online-meetup/events/265130355/&quot;&gt;APAC/EMEA&lt;/a&gt; - 7AM UTC,
  &lt;a href=&quot;https://www.meetup.com/Jenkins-online-meetup/events/265130441/&quot;&gt;EMEA/Americas&lt;/a&gt; - 2PM UTC).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There will be also area meetups in Munich, Beijing, St. Petersburg and other cities.
You can find the full list &lt;a href=&quot;https://zbynek.github.io/jenkins.io/order-syntax/events/hacktoberfest/#local-events&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;useful-links&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#useful-links&quot; /&gt;Useful links&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://hacktoberfest.digitalocean.com&quot;&gt;Hacktoberfest website&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://zbynek.github.io/jenkins.io/order-syntax/events/hacktoberfest/&quot;&gt;Hacktoberfest in Jenkins&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://gitter.im/jenkinsci/hacktoberfest&quot;&gt;Our Gitter channel&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://zbynek.github.io/jenkins.io/order-syntax/events/hacktoberfest/faq&quot;&gt;Frequently asked questions&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://zbynek.github.io/jenkins.io/order-syntax/participate/&quot;&gt;Contributing to Jenkins&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Have a great hacking time!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://zbynek.github.io/jenkins.io/order-syntax/blog/2019/09/25/board-elections/</id>
<title>2019 Jenkins Board and Officer elections. Nominations are open!</title>
<updated>2019-12-12T20:07:24+00:00</updated>
<published>2019-09-25T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://zbynek.github.io/jenkins.io/order-syntax/blog/2019/09/25/board-elections/" />
<category term="community"></category>
<category term="governance"></category>
<category term="elections"></category>
<summary>
This is a repost of the original announcement made by Kohsuke Kawaguchi in the Jenkins Developer mailing list.
Minor changes were applied to reflect the posting date and to provide more links.





Nominations for the 2019 Jenkins Board elections open for three governing board positions and five officer positions, namely: Security, Events, Release, Infrastructure and Documentation.


The terms of office for these positions are:




Officer positions (1 year): November 4, 2019 to November 3, 2020


Governing board members (2 years): November 4, 2019 to November 3, 2021




To nominate someone, simply send an email to jenkinsci-board@googlegroups.com with their name and position you nominate them for.
Please share...
</summary>
<content type="html">
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot; /&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
This is a repost of the &lt;a href=&quot;https://groups.google.com/forum/#!msg/jenkinsci-dev/v8kmEQMT0ts/l8yQ43WNAwAJ&quot;&gt;original announcement&lt;/a&gt; made by &lt;a href=&quot;https://github.com/kohsuke/&quot;&gt;Kohsuke Kawaguchi&lt;/a&gt; in the Jenkins Developer mailing list.
Minor changes were applied to reflect the posting date and to provide more links.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Nominations for the 2019 Jenkins Board elections open for three governing board positions and five officer positions, namely: Security, Events, Release, Infrastructure and Documentation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The terms of office for these positions are:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Officer positions (1 year): November 4, 2019 to November 3, 2020&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Governing board members (2 years): November 4, 2019 to November 3, 2021&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To nominate someone, simply send an email to &lt;a href=&quot;mailto:jenkinsci-board@googlegroups.com&quot;&gt;jenkinsci-board@googlegroups.com&lt;/a&gt; with their name and position you nominate them for.
Please share any information on why you are making the nomination.
Self nominations are also welcome.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The board positions and officer roles are an essential part of Jenkins&#39; community governance and well-being.
I highly encourage everyone to consider participating.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;key-dates&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#key-dates&quot; /&gt;Key dates&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Oct 04, 2019: Nominations close&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Oct 08, 2019: List of nominees posted to mailing list&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Oct 11, 2019: Nominees’ personal statements made available&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Oct 14, 2019: Voting begins&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Oct 27, 2019: Voting closes at 5pm Pacific Time&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Nov 04, 2019: New representatives announced&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;references&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#references&quot; /&gt;References&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://zbynek.github.io/jenkins.io/order-syntax/project/board&quot;&gt;Jenkins Governance Board&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://zbynek.github.io/jenkins.io/order-syntax/project/board-election-process&quot;&gt;Jenkins Board Election Process&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://wiki.jenkins.io/display/JENKINS/Team+Leads&quot;&gt;Jenkins Officers&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://groups.google.com/forum/#!msg/jenkinsci-dev/v8kmEQMT0ts/l8yQ43WNAwAJ&quot;&gt;Announcement in the developer mailing list&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://groups.google.com/forum/#!msg/jenkinsci-dev/vKi9JpxTQxY/4O4lmqfdAgAJ&quot;&gt;2019 elections proposal in the developer mailing list&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://zbynek.github.io/jenkins.io/order-syntax/blog/2019/09/23/outreachy-audit-log-release/</id>
<title>Audit Log Plugin for Jenkins Releases 1.0</title>
<updated>2019-12-12T20:07:24+00:00</updated>
<published>2019-09-23T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://zbynek.github.io/jenkins.io/order-syntax/blog/2019/09/23/outreachy-audit-log-release/" />
<author>
<name>jvz</name>
</author>
<category term="outreachy"></category>
<category term="logging"></category>
<category term="security"></category>
<category term="plugin"></category>
<category term="community"></category>
<summary>
Thanks to our Outreachy interns over the past year, I&#8217;m proud to announce the initial release of the Audit Log plugin for Jenkins.
This plugin is the first major project completed related to Outreachy, and I&#8217;d like to give a brief overview of the functionality that was developed for this release.
The primary goal of this plugin is to introduce an audit trail of various Jenkins events using structured logging and related audit logging standards.
Initially, this plugin covers audit events related to core Jenkins concepts like user accounts, jobs, builds, nodes, and credentials usage.
More specifically, this tracks:




User login and logout events


Credentials usage


User...
</summary>
<content type="html">
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Thanks to our Outreachy interns over the past year, I’m proud to announce the initial release of the &lt;a href=&quot;https://plugins.jenkins.io/audit-log&quot;&gt;Audit Log plugin for Jenkins&lt;/a&gt;.
This plugin is the first major project completed related to &lt;a href=&quot;https://www.outreachy.org/&quot;&gt;Outreachy&lt;/a&gt;, and I’d like to give a brief overview of the functionality that was developed for this release.
The primary goal of this plugin is to introduce an audit trail of various Jenkins events using structured logging and related &lt;a href=&quot;https://tools.ietf.org/html/rfc5424&quot;&gt;audit logging standards&lt;/a&gt;.
Initially, this plugin covers audit events related to core Jenkins concepts like user accounts, jobs, builds, nodes, and credentials usage.
More specifically, this tracks:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;User login and logout events&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Credentials usage&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;User creation (when using the Jenkins user database as a security realm)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;User password updates (ditto)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Starts and ends of builds&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Creation/modification/deletion/copying of items (which correspond to projects, pipelines, folders, etc.)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Creation/modification/deletion of nodes.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This plugin defines and exports standardized log event classes and schemas corresponding to these events.
Other plugins can add &lt;code&gt;audit-log&lt;/code&gt; as a dependency to define their own audit events using &lt;a href=&quot;https://logging.apache.org/log4j-audit/latest/&quot;&gt;Apache Log4j Audit&lt;/a&gt; and its &lt;a href=&quot;https://logging.apache.org/log4j-audit/latest/catalog.html&quot;&gt;catalog editor&lt;/a&gt;; then they can use the &lt;a href=&quot;https://logging.apache.org/log4j-audit/latest/log4j-audit/log4j-audit-maven-plugin/index.html&quot;&gt;Maven plugin&lt;/a&gt; for generating the audit event classes for use in the plugin.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The other major feature of this plugin is configuring where to output these audit logs.
By default, audit logs will be written in HTML files (rotated once per day) to &lt;code&gt;$JENKINS_HOME/logs/html/audit.html&lt;/code&gt; which are viewable through the &quot;Audit Logs&quot; root action link.
In the system settings, a section for audit logging is added where the main audit log output can be configured.
This can initially be configured to output via either a JSON log file in &lt;code&gt;$JENKINS_HOME/logs/audit.log&lt;/code&gt; by default or to a syslog server using RFC5424 encoding.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Overall, this experience has been rather interesting.
Besides having an opportunity to mentor new contributors, Outreachy has helped open my eyes to the struggles that developers from around the world are dealing with which can be improved upon to help expand our communities.
For example, many countries do not have reliable internet or electricity, so the use of synchronous videoconferencing and other heavyweight, synchronous processes common to more corporate-style development are inadequate in this international context.
This doesn’t even begin to account for the difference in timezones which is not always an issue, though both problems are addressable by using asynchronous communication methods like chat and email.
This notion of asynchronous communication is an important aspect of the &lt;a href=&quot;https://www.apache.org/theapacheway/&quot;&gt;Apache Way&lt;/a&gt;, for example, which emphasises processes that allow for vendor neutral communities to form and thrive around a project.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This mentoring project was valuable to myself as well.
As a software engineer myself, project management is not my specialty, so this gave me a great opportunity to develop my own PM skills and technical leadership.
My own typical discovery process for feature development involves experimenting directly with the code to see what features make sense to prioritize and which would take a vast effort to implement.
Changing my own discovery process to avoid implementing the features myself was difficult to adjust to, though I did defer any of my own feature contributions to this plugin until after the initial release.
In order to appropriately scope the project, I still had to spend a bit of time reading through the Jenkins codebase to determine which tasks could be implemented simply (e.g., good newbie-friendly issues), which tasks might require changes to Jenkins itself (previously discovered to take too long for these relatively short Outreachy rounds), and which tasks would require intimate familiarity with Jenkins and would likely be infeasible for new developers to Jenkins.
Thanks to the work done in discovery and delivery, I’ve also identified potential features for Log4j itself which could be used in future versions of this plugin.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Overall, I think we did a good job of balancing the scope of this project without spending too much time in any specific area.
The first release of this plugin is now available in the Jenkins Update Center.
In the future, I hope to learn more about developing Jenkins UI components so that we can create a more dynamic and Jenkins-like configuration page for choosing where logs are output.
While I don’t intend on using this plugin for further Outreachy rounds, I do hope to see more interest in it over time as the more security-conscious users out there discover this new plugin.&lt;/p&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://zbynek.github.io/jenkins.io/order-syntax/blog/2019/09/10/introducing-the-jira-software-plugin-for-jenkins/</id>
<title>Introducing the Jira Software plugin for Jenkins</title>
<updated>2019-12-12T20:07:24+00:00</updated>
<published>2019-09-10T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://zbynek.github.io/jenkins.io/order-syntax/blog/2019/09/10/introducing-the-jira-software-plugin-for-jenkins/" />
<author>
<name>rafalmyslek</name>
</author>
<category term="jira"></category>
<category term="plugin"></category>
<category term="pipeline"></category>
<summary>
According to a recent survey we conducted, software &amp; IT teams on average use 4+ tools to move code from development to customer-facing production. As a result, teams struggle with keeping the status of work updated and understanding the overall health of their delivery pipeline.


To solve this problem, I am excited to announce that we built an official Jenkins plugin for Jira Software Cloud. The plugin automatically associates build and deployment information from Jenkins with relevant Jira issues and exposes key information about your pipeline across Jira issues, boards and via JQL. This means you can use Jira Software to...
</summary>
<content type="html">
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;According to a &lt;a href=&quot;https://www.atlassian.com/blog/software-teams/modern-software-development-trends&quot;&gt;recent survey&lt;/a&gt; we conducted, software &amp;amp; IT teams on average use 4+ tools to move code from development to customer-facing production. As a result, teams struggle with keeping the status of work updated and understanding the overall health of their delivery pipeline.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To solve this problem, I am excited to announce that we built &lt;a href=&quot;https://plugins.jenkins.io/atlassian-jira-software-cloud&quot;&gt;an official Jenkins plugin for Jira Software Cloud&lt;/a&gt;. The plugin automatically associates build and deployment information from Jenkins with relevant Jira issues and exposes key information about your pipeline across Jira issues, boards and via JQL. This means you can use Jira Software to automatically update and track issues through your complete development pipeline, from backlog to release.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I hope this plugin adds value to you and your team. If you are interested in contributing or forking this plug-in you can head over to our project on the &lt;a href=&quot;https://github.com/jenkinsci/atlassian-jira-software-cloud-plugin&quot;&gt;Jenkins GitHub repo to get started&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;better-collaboration-between-teams&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#better-collaboration-between-teams&quot; /&gt;Better collaboration between teams&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;imageblock center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://zbynek.github.io/jenkins.io/order-syntax/images/post-images/introducing-the-jira-software-plugin-for-jenkins/dev-tools-ticketview.png&quot; alt=&quot;Use Jenkins build information in Jira Software to create a workflow between QA and developers and create a rapid feedback loop for testing at any point in your development process.&quot; width=&quot;800&quot;&gt;
&lt;/img&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This new information view is so powerful because historically it was dispersed across multiple tools only accessible to a few members of your team. Now anyone involved in the software delivery process can self-serve this information. For example, product managers, QA, and support teams can view which features have been deployed to customers and which are still waiting in staging environments.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With better information sharing between tools in your delivery stack, you can also improve cross-collaboration between teams. Teams such as QA and operations can collaborate in the software teams next sprint. For example, you can use build information in Jira Software to create a workflow between QA and developers and create a rapid feedback loop for testing at any point in your development process.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;use-jiras-querying-language-for-advanced-views&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#use-jiras-querying-language-for-advanced-views&quot; /&gt;Use Jira’s Querying Language for advanced views&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;imageblock center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://zbynek.github.io/jenkins.io/order-syntax/images/post-images/introducing-the-jira-software-plugin-for-jenkins/jql.png&quot; alt=&quot;Build powerful views into your development pipeline with support for JQL.&quot; width=&quot;800&quot;&gt;
&lt;/img&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In addition to building better ways to collaborate, these integrations also give your team deeper insight into the development pipeline from within Jira Software. You can now create powerful views into your delivery pipeline &lt;a href=&quot;https://confluence.atlassian.com/jirasoftwarecloud/advanced-searching-developer-reference-967312910.html&quot;&gt;with JQL queries across multiple connected tools&lt;/a&gt;. For example, you can write a custom JQL query to report all Jira issues that have been deployed to production but still have an open PR.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code&gt;deploymentEnvironmentType ~ “production“ AND development[pullrequests].open&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;get-started&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#get-started&quot; /&gt;Get started&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;In Jira Software Cloud&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Create OAuth credentials in Jira for Jenkins&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Navigate to &lt;strong&gt;Jira home &amp;gt; Jira settings &amp;gt; Apps&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Select &lt;strong&gt;OAuth credentials&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Select &lt;strong&gt;Create credentials&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Enter the following details:&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;App name&lt;/em&gt; - Jenkins&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;App logo&lt;/em&gt; - A URL to the Jenkins logo, which will be used as an icon in the list of credentials. Eg: &lt;a href=&quot;https://jenkins.yourcompany.com/logo.png&quot; class=&quot;bare&quot;&gt;https://jenkins.yourcompany.com/logo.png&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Server base URL - The URL to your Jenkins server. Eg: &lt;a href=&quot;https://jenkins.yourcompany.com&quot; class=&quot;bare&quot;&gt;https://jenkins.yourcompany.com&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;In Jenkins&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Install the Jenkins plugin&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Login to your Jenkins server and navigate to the Plugin Manager.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Select the &#39;Available&#39; tab and search for &#39;Atlassian Jira Software Cloud&#39; as the plugin name then install it.&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The open-source plugin is hosted in the Jenkins GitHub account. &lt;a href=&quot;https://github.com/jenkinsci/atlassian-jira-software-cloud-plugin&quot;&gt;You can check it out here&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Set up Jenkins credentials&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;In Jenkins, go to &lt;strong&gt;Manage Jenkins &amp;gt; Configure System&lt;/strong&gt; screen and scroll to the Jira Software Cloud integration section.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Select &lt;strong&gt;Add Jira Cloud Site &amp;gt; Jira Cloud Site&lt;/strong&gt;. The &lt;em&gt;Site name&lt;/em&gt;, &lt;em&gt;ClientID&lt;/em&gt;, and &lt;em&gt;Secret&lt;/em&gt; fields display.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Enter the following details:&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Site name: The URL for your Jira Cloud site, for example yourcompany.atlassian.net.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Client ID: Copy from &lt;strong&gt;OAuth credentials&lt;/strong&gt; screen (Client ID column).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Secret: Select Add &amp;gt; Jenkins.&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;For &lt;em&gt;Kind&lt;/em&gt;, select &lt;strong&gt;Secret text&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For &lt;em&gt;Secret&lt;/em&gt;, copy from &lt;strong&gt;OAuth credentials&lt;/strong&gt; screen (Secret column).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For &lt;em&gt;Description&lt;/em&gt;, provide a helpful description&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Select Test settings to make sure your credentials are valid for your Jira site.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;how-to-use-the-plugin&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#how-to-use-the-plugin&quot; /&gt;How to use the plugin&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;To start using the integration:&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Go into a specific pipeline in Jenkins ( Note: Your pipeline must be a &#39;Multibranch Pipeline&#39; ).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;From the left-hand menu, select &lt;strong&gt;Pipeline Syntax&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In the Snippet Generator, select &lt;strong&gt;jiraSendDeploymentInfo&lt;/strong&gt; or &lt;strong&gt;jiraSendBuildInfo&lt;/strong&gt; from the dropdown list of Sample Steps and fill in the relevant details.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Select &lt;strong&gt;Generate Pipeline Script&lt;/strong&gt; and copy/paste the output into your &lt;em&gt;Jenkinsfile&lt;/em&gt; on the relevant Repository you are using. This will be used to notify Jira when you run that pipeline on that repo.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;For sending build information&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is an example snippet of a very simple ‘build’ stage set up in a &lt;em&gt;Jenkinsfile&lt;/em&gt;. After the pipeline is run, it will post the build information to your Jira Cloud site by looking at the branch name. If there is a Jira issue key (e.g. “TEST-123”) in the branch name, it will send the data over to Jira.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Jenkinsfile example&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;groovy&quot;&gt;pipeline {
     agent any
     stages {
         stage(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Build&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;) {
             steps {
                 echo &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Building...&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;
             }
             post {
                 always {
                     jiraSendBuildInfo &lt;span style=&quot;color:#606&quot;&gt;site&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;example.atlassian.net&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;
                 }
             }
         }
     }
 }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;For sending deployment information&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is an example snippet of two stages that run on any change to the staging or master branch. Again, we use a post step to send deployment data to Jira and the relevant issues. Here, the &lt;strong&gt;environmentId&lt;/strong&gt;, &lt;strong&gt;environmentName&lt;/strong&gt;, and &lt;strong&gt;environmentType&lt;/strong&gt; need to be set to whatever you want to appear in Jira.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Jenkinsfile example&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;groovy&quot;&gt;pipeline {
     agent any
     stages {
         stage(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Deploy - Staging&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;) {
             when {
                 branch &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;master&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;
             }
             steps {
                 echo &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Deploying to Staging from master...&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;
             }
             post {
                 always {
                     jiraSendDeploymentInfo &lt;span style=&quot;color:#606&quot;&gt;site&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;example.atlassian.net&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#606&quot;&gt;environmentId&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;us-stg-1&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#606&quot;&gt;environmentName&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;us-stg-1&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#606&quot;&gt;environmentType&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;staging&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;
                 }
             }
         }
         stage(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Deploy - Production&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;) {
            when {
                branch &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;master&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;
            }
            steps {
                echo &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Deploying to Production from master...&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;
            }
            post {
                always {
                    jiraSendDeploymentInfo &lt;span style=&quot;color:#606&quot;&gt;site&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;example.atlassian.net&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#606&quot;&gt;environmentId&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;us-prod-1&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#606&quot;&gt;environmentName&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;us-prod-1&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#606&quot;&gt;environmentType&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;production&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;
                }
            }
         }
     }
 }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The entire &lt;em&gt;Jenkinsfile&lt;/em&gt; may look something like this. This is only meant to represent an example of what the Jira snippets could look like within a stage or step.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Jenkinsfile example&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;groovy&quot;&gt;pipeline {
     agent any
     stages {
         stage(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Build&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;) {
             steps {
                 echo &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Building...&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;
             }
             post {
                 always {
                     jiraSendBuildInfo &lt;span style=&quot;color:#606&quot;&gt;site&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;example.atlassian.net&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;
                 }
             }
         }
         stage(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Deploy - Staging&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;) {
             when {
                 branch &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;master&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;
             }
             steps {
                 echo &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Deploying to Staging from master...&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;
             }
             post {
                 always {
                     jiraSendDeploymentInfo &lt;span style=&quot;color:#606&quot;&gt;site&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;example.atlassian.net&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#606&quot;&gt;environmentId&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;us-stg-1&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#606&quot;&gt;environmentName&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;us-stg-1&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#606&quot;&gt;environmentType&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;staging&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;
                 }
             }
         }
         stage(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Deploy - Production&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;) {
            when {
                branch &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;master&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;
            }
            steps {
                echo &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Deploying to Production from master...&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;
            }
            post {
                always {
                    jiraSendDeploymentInfo &lt;span style=&quot;color:#606&quot;&gt;site&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;example.atlassian.net&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#606&quot;&gt;environmentId&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;us-prod-1&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#606&quot;&gt;environmentName&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;us-prod-1&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#606&quot;&gt;environmentType&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;production&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;
                }
            }
         }
     }
 }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;questions-or-feedback&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#questions-or-feedback&quot; /&gt;Questions or feedback?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you have any questions, please contact &lt;a href=&quot;https://support.atlassian.com/contact/&quot;&gt;Atlassian support&lt;/a&gt; and they will route it to the correct team to help you.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://zbynek.github.io/jenkins.io/order-syntax/blog/2019/08/30/jenkins-cli/</id>
<title>Managing Jenkins with jcli</title>
<updated>2019-12-12T20:07:24+00:00</updated>
<published>2019-08-30T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://zbynek.github.io/jenkins.io/order-syntax/blog/2019/08/30/jenkins-cli/" />
<author>
<name>linuxsuren</name>
</author>
<category term="general"></category>
<category term="jcli"></category>
<category term="cli"></category>
<category term="tools"></category>
<summary>
As a developer, I usually use Jenkins like this:




Find a job which is related with my current work


Trigger that job


Check the output of the build log




Sometimes, I might need to check the update center. Maybe a new plugin is needed, or I need to update an existing plugin.
Or, I want to upload a plugin from my computer. For all these cases, I just don&#8217;t need a UI or even a browser.
I like to use a CLI to complete most of my tasks. For example, I use kubectl to manage my Kubernetes cluster,
to create or modify the kubernetes resources. So, I...
</summary>
<content type="html">
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As a developer, I usually use Jenkins like this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Find a job which is related with my current work&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Trigger that job&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Check the output of the build log&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Sometimes, I might need to check the update center. Maybe a new plugin is needed, or I need to update an existing plugin.
Or, I want to upload a plugin from my computer. For all these cases, I just don’t need a UI or even a browser.
I like to use a CLI to complete most of my tasks. For example, I use &lt;code&gt;kubectl&lt;/code&gt; to manage my Kubernetes cluster,
to create or modify the kubernetes resources. So, I start to think, &#39;Why not use a CLI to manage my Jenkins?&#39;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;why-create-a-new-one&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#why-create-a-new-one&quot; /&gt;Why create a new one?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;First, I almost forgot about the existing &lt;a href=&quot;https://jenkins.io/doc/book/managing/cli/&quot;&gt;Jenkins CLI&lt;/a&gt;, written in Java. Let me introduce how to use that one.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Visit Jenkins page from &lt;code&gt;&lt;a href=&quot;http://localhost:8080/jenkins/cli/&quot; class=&quot;bare&quot;&gt;http://localhost:8080/jenkins/cli/&lt;/a&gt;&lt;/code&gt;. You’ll see a command like &lt;code&gt;java -jar jenkins-cli.jar -s &lt;a href=&quot;http://localhost:8080/jenkins/&quot; class=&quot;bare&quot;&gt;http://localhost:8080/jenkins/&lt;/a&gt; help&lt;/code&gt;. So, a jar file needs to be download.
We can use this command to complete this task &lt;code&gt;wget &lt;a href=&quot;http://localhost:8080/jenkins/jnlpJars/jenkins-cli.jar&quot; class=&quot;bare&quot;&gt;http://localhost:8080/jenkins/jnlpJars/jenkins-cli.jar&lt;/a&gt;&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now you can see that this is not a Linux-style CLI. Please consider some points below:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The users must have a JRE. This is not convenient for developers who don’t use Java.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The CLI is too wordy. We always need to type &lt;code&gt;java -jar jenkins-cli.jar -s &lt;a href=&quot;http://localhost:8080/jenkins/&quot; class=&quot;bare&quot;&gt;http://localhost:8080/jenkins/&lt;/a&gt;&lt;/code&gt; as the initial command.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Cannot install it by some popular package manager, like &lt;code&gt;brew&lt;/code&gt; or &lt;code&gt;yum&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Of course, the Java CLI client is more native with Jenkins. But I’d like to use this more easily.
So I decided to create a new CLI tool which would be written in Go and which would natively run on modern platforms.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;That’s the story of creating &lt;code&gt;jcli&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;features&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#features&quot; /&gt;Features&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Easy to maintain config file for jcli&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Multiple Jenkins support&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Plugins management (list, search, install, upload)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Job management (search, build, log)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Open your Jenkins with a browser&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Restart your Jenkins&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Connection with proxy support&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;how-to-get-it&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#how-to-get-it&quot; /&gt;How to get it?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can clone &lt;code&gt;jcli&lt;/code&gt; from &lt;a href=&quot;https://github.com/jenkins-zh/jenkins-cli/&quot;&gt;the jenkins-cli repo&lt;/a&gt;. For now, we support
these three most popular OS platforms: MacOS, Linux, and Windows.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;macos&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#macos&quot; /&gt;MacOS&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can use brew to install jcli.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code&gt;brew tap jenkins-zh/jcli
brew install jcli&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;linux&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#linux&quot; /&gt;Linux&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It’s very simple to install jcli into your Linux OS. Just need to execute a command line at below:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code&gt;curl -L https://github.com/jenkins-zh/jenkins-cli/releases/latest/download/jcli-linux-amd64.tar.gz|tar xzv
sudo mv jcli /usr/local/bin/&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;windows&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#windows&quot; /&gt;Windows&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can find the latest version by clicking &lt;a href=&quot;https://github.com/jenkins-zh/jenkins-cli/releases/latest/download/jcli-windows-386.tar.gz&quot;&gt;here&lt;/a&gt;. Then download the tar file, cp the uncompressed &lt;code&gt;jcli&lt;/code&gt; directory into your system path.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;how-to-get-started&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#how-to-get-started&quot; /&gt;How to get started?&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It’s very simple to use this. Once you get &lt;code&gt;jcli&lt;/code&gt; on your computer, use this command to generate a sample configuration:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code&gt;$ jcli config generate
current: yourServer
jenkins_servers:
- name: yourServer
  url: http://localhost:8080/jenkins
  username: admin
  token: 111e3a2f0231198855dceaff96f20540a9
  proxy: &quot;&quot;
  proxyAuth: &quot;&quot;
# Goto &#39;http://localhost:8080/jenkins/me/configure&#39;, then you can generate your token.&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In most cases, you should modify three fields which are &lt;code&gt;url&lt;/code&gt;, &lt;code&gt;username&lt;/code&gt; and &lt;code&gt;token&lt;/code&gt;. OK, I believe you’re ready. Please check whether you install the &lt;code&gt;github&lt;/code&gt; plugin in your Jenkins:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;jcli plugin list --filter name=github&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;That’s the end. It’s still in very early development stage. Any contribution is welcome.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://zbynek.github.io/jenkins.io/order-syntax/blog/2019/08/26/role-strategy-performance/</id>
<title>Performance Improvements to Role Strategy Plugin</title>
<updated>2019-12-12T20:07:24+00:00</updated>
<published>2019-08-26T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://zbynek.github.io/jenkins.io/order-syntax/blog/2019/08/26/role-strategy-performance/" />
<author>
<name>abhyudayasharma</name>
</author>
<category term="plugins"></category>
<category term="security"></category>
<category term="performance"></category>
<category term="gsoc"></category>
<category term="gsoc2019"></category>
<summary>
The task for my Google Summer of Code program was to improve the performance
of the Role Strategy Plugin. The performance issues for Role Strategy Plugin
had been reported multiple times on Jenkins JIRA. With a large number of roles
and with complex regular expressions, a large slow-down was visible on the Web UI.
Even before GSoC started, there were a number of patches which tried to improve
performance of the plugin (by Deepansh Nagaria
and others).


At the time, there was no way to reliably measure improvements in performance.
Therefore, we started by creating a
framework
for running micro-benchmarks on Jenkins Plugins. Benchmarks using the framework
were added to the...
</summary>
<content type="html">
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The task for my Google Summer of Code program was to improve the performance
of the Role Strategy Plugin. The performance issues for Role Strategy Plugin
had been reported multiple times on Jenkins JIRA. With a large number of roles
and with complex regular expressions, a large slow-down was visible on the Web UI.
Even before GSoC started, there were a number of patches which tried to improve
performance of the plugin (by &lt;a href=&quot;https://github.com/deepanshnagaria&quot;&gt;Deepansh Nagaria&lt;/a&gt;
and others).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;At the time, there was no way to reliably measure improvements in performance.
Therefore, we started by creating a
&lt;a href=&quot;https://zbynek.github.io/jenkins.io/order-syntax/blog/2019/06/21/performance-testing-jenkins/&quot;&gt;framework&lt;/a&gt;
for running micro-benchmarks on Jenkins Plugins. Benchmarks using the framework
were added to the &lt;a href=&quot;https://plugins.jenkins.io/role-strategy&quot;&gt;Role Strategy Plugin&lt;/a&gt; find performance
critical parts of the plugins and to measure the improvements of a change.
This blog post summarizes the changes that were made and performance improvements
measured.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;caching-matching-roles&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#caching-matching-roles&quot; /&gt;Caching matching roles&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A couple of major changes were made to the Role Strategy Plugin to improve its
performance. First, we started collection of roles that matched a given
project name. The Role Strategy plugin before version 2.12 used to run over
regular expressions for every role that it had for every permission checking
request it got. Storing this produced set of roles in the memory provides us
large improvements in performance and avoids repeated matching of project names
with regular expressions. For keeping the plugin working securely, we invalidate
the cache whenever any update is made to the roles.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;After this change, we were able to observe performance improvements of up to
3300%. These improvements were visualized using
&lt;a href=&quot;&quot;&gt;JMH Visualizer&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://zbynek.github.io/jenkins.io/order-syntax/images/post-images/role-strategy-performance/benchmarks1.png&quot; alt=&quot;Benchmarks results after caching matching roles&quot;&gt;
&lt;/img&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;More information is available at pull request on GitHub:
&lt;a href=&quot;https://github.com/jenkinsci/role-strategy-plugin/pull/81&quot; class=&quot;bare&quot;&gt;https://github.com/jenkinsci/role-strategy-plugin/pull/81&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;calculating-implying-permisions-when-plugin-is-loaded&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#calculating-implying-permisions-when-plugin-is-loaded&quot; /&gt;Calculating Implying Permisions when plugin is loaded&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Jenkins&#39; permission model allows one permissions to imply other permissions.
When a permission check is made, we need to check if the user has any of
permissions that would imply this permisison. For every permission checking
request that that the Role Strategy, it used to calculate all the implying
permissions. To avoid this, we now calculate and store implying permissions
for every permission in the Jenkins system when the plugin gets loaded.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;After both of these changes, we were able to experience improvements of up to
10000%. The benchmark results show it better:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://zbynek.github.io/jenkins.io/order-syntax/images/post-images/role-strategy-performance/benchmarks2.png&quot; alt=&quot;Benchmarks results after both changes&quot;&gt;
&lt;/img&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;More information about this change can be found at the GitHub pull request:
&lt;a href=&quot;https://github.com/jenkinsci/role-strategy-plugin/pull/83&quot; class=&quot;bare&quot;&gt;https://github.com/jenkinsci/role-strategy-plugin/pull/83&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Both of these changes were integrated into the Role Strategy Plugin and the
improvements can be experienced starting with version
&lt;a href=&quot;https://github.com/jenkinsci/role-strategy-plugin/releases/tag/role-strategy-2.13&quot;&gt;2.13&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;bonus-configuration-as-code-export-now-works-for-role-strategy&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#bonus-configuration-as-code-export-now-works-for-role-strategy&quot; /&gt;Bonus: Configuration-as-Code export now works for Role Strategy&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With &lt;a href=&quot;https://plugins.jenkins.io/configuration-as-code&quot;&gt;Configuration-as-Code plugin&lt;/a&gt; version
&lt;a href=&quot;https://github.com/jenkinsci/configuration-as-code-plugin/releases/tag/configuration-as-code-1.24&quot;&gt;1.24&lt;/a&gt;
and above, export of your configuration as YAML now works!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://zbynek.github.io/jenkins.io/order-syntax/images/post-images/role-strategy-performance/jcasc-export.png&quot; alt=&quot;Role Strategy configuration export working with JCasC 1.24&quot;&gt;
&lt;/img&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As an alternative to
Role Strategy Plugin, I also created the brand new &lt;a href=&quot;https://plugins.jenkins.io/folder-auth&quot;&gt;Folder Authorization Plugin&lt;/a&gt;.
You can check out the &lt;a href=&quot;https://zbynek.github.io/jenkins.io/order-syntax/blog/2019/08/16/folder-auth-plugin/&quot;&gt;blog post&lt;/a&gt; for
more information about the plugin.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;links-and-feedback&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#links-and-feedback&quot; /&gt;Links and Feedback&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I would love to hear your comments and suggestions. Please feel free to reach
out to me through either the
&lt;a href=&quot;https://gitter.im/jenkinsci/role-strategy-plugin&quot;&gt;Role Strategy Plugin Gitter chat&lt;/a&gt; or through
&lt;a href=&quot;mailto:jenkinsci-dev@googlegroups.com&quot;&gt;Jenkins Developer Mailing list&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://drive.google.com/file/d/1lAXDljWXypCq6noiqPHI-eZJqBqaSYue/view?usp=sharing&quot;&gt;Presentation slides for final evaluation of GSoC&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/jenkinsci/folder-auth-plugin&quot;&gt;The Folder Authorization Plugin&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://youtu.be/g19o24uzy6c?t=1234&quot;&gt;Demo for the final evaluations&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://zbynek.github.io/jenkins.io/order-syntax/blog/2019/08/25/jenkinsworld-contrib-summit-ask-the-expert-booth/</id>
<title>Jenkins World Contributor Summit and Ask the Expert booth</title>
<updated>2019-12-12T20:07:24+00:00</updated>
<published>2019-08-25T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://zbynek.github.io/jenkins.io/order-syntax/blog/2019/08/25/jenkinsworld-contrib-summit-ask-the-expert-booth/" />
<author>
<name>markyjackson-taulia</name>
</author>
<category term="jenkinsworld"></category>
<category term="devopsworld2019"></category>
<category term="gsoc"></category>
<category term="gsoc2019"></category>
<category term="community"></category>
<category term="opensource"></category>
<category term="events"></category>
<category term="contributorsummit"></category>
<category term="asktheexpert"></category>
<summary>
Jenkins turns 15 years old!
Jenkins World brings together DevOps thought leaders, IT executives, continuous delivery practitioners and the Jenkins
community and ecosystem in one global event, providing attendees with the opportunity to learn, explore, network
face-to-face and help shape the next evolution of Jenkins development and solutions for DevOps.


There is also the Jenkins Contributor Summit in San Francisco. The Jenkins Contributor Summit is the place where
current and future contributors get together to discuss, learn and collaborate on the latest and greatest efforts within
Jenkins project. The morning portion of the summit is a mix of presentations by the core contributors. The
presentations highlight what...
</summary>
<content type="html">
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Jenkins turns 15 years old!
Jenkins World brings together DevOps thought leaders, IT executives, continuous delivery practitioners and the Jenkins
community and ecosystem in one global event, providing attendees with the opportunity to learn, explore, network
face-to-face and help shape the next evolution of Jenkins development and solutions for DevOps.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There is also the Jenkins Contributor Summit in San Francisco. The Jenkins Contributor Summit is the place where
current and future contributors get together to discuss, learn and collaborate on the latest and greatest efforts within
Jenkins project. The morning portion of the summit is a mix of presentations by the core contributors. The
presentations highlight what each effort is about and what community members can do to help. In the
afternoon breakout sessions with  Birds of a Feather tables for in-depth discussion, and collaboration with sub-project
contributors.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I feel very honored to have been a part of this.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://zbynek.github.io/jenkins.io/order-syntax/images/post-images/jenkinsworld2019/IMG_0439.jpg&quot; alt=&quot;Jenkins World 2019&quot; height=&quot;500&quot;&gt;
&lt;/img&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;day-1&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#day-1&quot; /&gt;Day 1&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Day one started with the contributor summit. This was a chance for everyone to get together and talk about
contributions and put faces to names. Most people I had only met via video chat or on gitter so I was super excited.
We gathered to hear about the start of the Jenkins open source landscape.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://zbynek.github.io/jenkins.io/order-syntax/images/post-images/jenkinsworld2019/IMG_0440.jpg&quot; alt=&quot;Contributor Summit Agenda&quot; height=&quot;500&quot;&gt;
&lt;/img&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Next up was the BoF/Unconference. I was leading these sessions and I felt they went really well.
We had fellow org admins Martin d’Anjou and Jeff Pearce give a talk about Google Summer of Code projects.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://zbynek.github.io/jenkins.io/order-syntax/images/post-images/jenkinsworld2019/IMG_0446.jpg&quot; alt=&quot;Unconference&quot; height=&quot;500&quot;&gt;
&lt;/img&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Google Summer of Code student Natasha Stopa presented her project, Plugin Installation Manager Library/CLI Tool. This is
a super cool project and very well received in the community.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://zbynek.github.io/jenkins.io/order-syntax/images/post-images/jenkinsworld2019/IMG_0449.jpg&quot; alt=&quot;GSOC Student&quot; height=&quot;500&quot;&gt;
&lt;/img&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We closed out the session with a presentation from Steven Terrana from Booz Allen Hamilton and the awesome Jenkins
Templating Engine. If you have not had a chance to try this, please make sure you do at &lt;a href=&quot;https://github.com/boozallen/jenkins-templating-engine&quot; class=&quot;bare&quot;&gt;https://github.com/boozallen/jenkins-templating-engine&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://zbynek.github.io/jenkins.io/order-syntax/images/post-images/jenkinsworld2019/IMG_0451.jpg&quot; alt=&quot;Community Plugin&quot; height=&quot;500&quot;&gt;
&lt;/img&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;main-expo-hall&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#main-expo-hall&quot; /&gt;Main Expo Hall&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Day two and onward saw me and other Jenkins org admins in the Ask the Expert booth for the Jenkins community.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://zbynek.github.io/jenkins.io/order-syntax/images/post-images/jenkinsworld2019/IMG_0465.jpg&quot; alt=&quot;Jenkins World 2019&quot; height=&quot;500&quot;&gt;
&lt;/img&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This was a really cool experience and gave me a chance to hear about things the community is working on and help with
issues they are facing.
There were a range of questions from Jenkins X to many of the plugins I maintain such and the Jenkins Prometheus and the
Sysdig Secure Scanning plugins.
There were also a lot of Kubernetes questions. There is a lot of marketing data regarding the increased usage of
Kubernetes but I was seriously surprised by the massive interest in Jenkins on Kubernetes.
Of course there were opportunities for selfie requests.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://zbynek.github.io/jenkins.io/order-syntax/images/post-images/jenkinsworld2019/IMG_0472.jpg&quot; alt=&quot;Community Booth&quot; height=&quot;500&quot;&gt;
&lt;/img&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Lunch time demos got underway and we had a busy schedule.
First up was the awesome Mark Waite to talk about the
&lt;a href=&quot;https://www.slideshare.net/markewaite/git-for-jenkins-faster-and-better&quot;&gt;Git plugin&lt;/a&gt;. A lot of people use git in
Jenkins.
Thank you so much for all that you do Mark.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://zbynek.github.io/jenkins.io/order-syntax/images/post-images/jenkinsworld2019/IMG_0480.jpg&quot; alt=&quot;Lunch Time Demo - Mark Waite&quot; height=&quot;500&quot;&gt;
&lt;/img&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Jenkins org admin Martin d’Anjou was next on deck to talk about the Google Summer of Code. So amazing to think that the
Google Summer of Code is also in its 15th year like Jenkins!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://zbynek.github.io/jenkins.io/order-syntax/images/post-images/jenkinsworld2019/IMG_0489.jpg&quot; alt=&quot;Lunch Time Demo - Martin d’Anjou&quot; height=&quot;500&quot;&gt;
&lt;/img&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Natasha Stopa is a Google Summer of Code student and she presented her project Plugin Installation Manager Library/CLI Tool.
Natasha really put a lot of hard work in to this plugin and it was really awesome to see the turn out and support during
her presentation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://zbynek.github.io/jenkins.io/order-syntax/images/post-images/jenkinsworld2019/IMG_0494.jpg&quot; alt=&quot;Lunch Time Demo - Natasha Stopa&quot; height=&quot;500&quot;&gt;
&lt;/img&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Finally there was me. I presented the Sysdig Secure Scanning Jenkins plugin which I am a maintainer of. I thank everyone who attended&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://zbynek.github.io/jenkins.io/order-syntax/images/post-images/jenkinsworld2019/IMG_0499.jpg&quot; alt=&quot;Lunch Time Demo - Marky Jackson&quot; height=&quot;500&quot;&gt;
&lt;/img&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Right after the lunch time demos I also oversaw the Jenkins open space. This was an opportunity for the community to talk
about items and let them flow organically. I really enjoyed this session and felt it was also well received.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://zbynek.github.io/jenkins.io/order-syntax/images/post-images/jenkinsworld2019/IMG_0501.jpg&quot; alt=&quot;Jenkins Open Space&quot; height=&quot;500&quot;&gt;
&lt;/img&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We closed out the day and the event with a picture of some of the Jenkins org admins and Google Summer of Code students.
Missing from this photos are fellow org admins, Lloyd Chang and Oleg Nenashev&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://zbynek.github.io/jenkins.io/order-syntax/images/post-images/jenkinsworld2019/IMG_0500.jpg&quot; alt=&quot;Closing Day&quot; height=&quot;500&quot;&gt;
&lt;/img&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;closing&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#closing&quot; /&gt;Closing&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This was an amazing experience. Huge thanks to CloudBees, the Jenkins community, Google Summer of Code, Tracy Miranda,
Alyssa Tong and my employer Sysdig.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To think Jenkins is 15 years old is amazing! There has been so much accomplished and the future is so bright. I am so
thankful for the opportunity to serve and be a part of the open source community.
Here’s to 15 more years all!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are interested in joining any one of the Jenkins open source special interest groups, look here. We can use your
help: &lt;a href=&quot;https://jenkins.io/sigs/&quot; class=&quot;bare&quot;&gt;https://jenkins.io/sigs/&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are interested in joining the Summer of Code, look here: &lt;a href=&quot;https://jenkins.io/projects/gsoc/&quot; class=&quot;bare&quot;&gt;https://jenkins.io/projects/gsoc/&lt;/a&gt;
If you want to chat with us, find us here: &lt;a href=&quot;https://jenkins.io/chat/&quot; class=&quot;bare&quot;&gt;https://jenkins.io/chat/&lt;/a&gt;
Or if you want to email us, reach out at: &lt;a href=&quot;https://jenkins.io/mailing-lists/&quot; class=&quot;bare&quot;&gt;https://jenkins.io/mailing-lists/&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Some photos outtakes:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://zbynek.github.io/jenkins.io/order-syntax/images/post-images/jenkinsworld2019/IMG_0483.jpg&quot; alt=&quot;Outtakes&quot; height=&quot;500&quot;&gt;
&lt;/img&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://zbynek.github.io/jenkins.io/order-syntax/images/post-images/jenkinsworld2019/IMG_0486.jpg&quot; alt=&quot;Outtakes&quot; height=&quot;500&quot;&gt;
&lt;/img&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://zbynek.github.io/jenkins.io/order-syntax/images/post-images/jenkinsworld2019/IMG_0461.jpg&quot; alt=&quot;Outtakes&quot; height=&quot;500&quot;&gt;
&lt;/img&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://zbynek.github.io/jenkins.io/order-syntax/images/post-images/jenkinsworld2019/IMG_0462.jpg&quot; alt=&quot;Outtakes&quot; height=&quot;500&quot;&gt;
&lt;/img&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://zbynek.github.io/jenkins.io/order-syntax/blog/2019/08/23/introducing-gitlab-branch-source-plugin/</id>
<title>Introducing new GitLab Branch Source Plugin</title>
<updated>2019-12-12T20:07:24+00:00</updated>
<published>2019-08-23T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://zbynek.github.io/jenkins.io/order-syntax/blog/2019/08/23/introducing-gitlab-branch-source-plugin/" />
<author>
<name>baymac</name>
</author>
<category term="gitlab"></category>
<category term="plugins"></category>
<category term="pipeline"></category>
<category term="multibranch"></category>
<category term="gsoc"></category>
<category term="gsoc2019"></category>
<summary>
The GitLab Branch Source Plugin has come out of its beta stage and has been released to the Jenkins update center. It allows you to create job based on GitLab user or group or subgroup project(s). You can either:




Import a single project&#8217;s branches as jobs from a GitLab user/group/subgroup (Multibranch Pipeline Job)


Import all or a subset of projects as jobs from a GitLab user/group/subgroup (GitLab Group Job or GitLab Folder Organization)




The GitLab Group project scans the projects, importing the pipeline jobs it identifies based on the criteria provided. After a project is imported, Jenkins immediately runs the jobs based on...
</summary>
<content type="html">
&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The GitLab Branch Source Plugin has come out of its beta stage and has been released to the Jenkins update center. It allows you to create job based on GitLab &lt;code&gt;user&lt;/code&gt; or &lt;code&gt;group&lt;/code&gt; or &lt;code&gt;subgroup&lt;/code&gt; project(s). You can either:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Import a single project’s branches as jobs from a GitLab user/group/subgroup (Multibranch Pipeline Job)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Import all or a subset of projects as jobs from a GitLab user/group/subgroup (GitLab Group Job or GitLab Folder Organization)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The GitLab Group project scans the projects, importing the pipeline jobs it identifies based on the criteria provided. After a project is imported, Jenkins immediately runs the jobs based on the &lt;code&gt;Jenkinsfile&lt;/code&gt; pipeline script and notifies the status to GitLab Pipeline Status. This plugin unlike other Branch Source Plugins provides GitLab server configuration which can be configured in Configure System. Jenkins Configuration as Code (JCasC) can also be used to configure the server. To learn more about server configuration see my &lt;a href=&quot;https://jenkins.io/blog/2019/06/29/phase-1-multibranch-pipeline-support-for-gitlab/&quot;&gt;previous blog post&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;requirements&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#requirements&quot; /&gt;Requirements&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Jenkins - 2.176.2 (LTS)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;GitLab - v11.0+&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;creating-a-job&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#creating-a-job&quot; /&gt;Creating a Job&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To create a Multibranch Pipeline Job (with GitLab branch source) or GitLab Group Job, you must have GitLab Personal Access Token added to the server configuration. The credentials is used to fetch meta data of the project(s) and to set up hooks on GitLab Server. If the token has admin access you can also set up &lt;code&gt;System Hooks&lt;/code&gt; while &lt;code&gt;Web Hooks&lt;/code&gt; can be set up from any user token.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;create-a-multibranch-pipeline-job&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#create-a-multibranch-pipeline-job&quot; /&gt;Create a Multibranch Pipeline Job&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Go to Jenkins &amp;gt; New Item &amp;gt; Multibranch Pipeline &amp;gt; Add Source &amp;gt; GitLab Project&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://zbynek.github.io/jenkins.io/order-syntax/images/post-images/gsoc-gitlab-branch-source-plugin/branch-source.png&quot; alt=&quot;GitLab Project Branch Source&quot;&gt;
&lt;/img&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Server&lt;/code&gt; - Select your desired GitLab server from the dropdown, needs to be configured before creating this job.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Checkout Credentials&lt;/code&gt; - Add credentials of type &lt;code&gt;SSHPrivateKey&lt;/code&gt; or &lt;code&gt;Username/Password&lt;/code&gt; if there are any private projects to be built by the plugin. If all projects are public then no checkout credentials required. Checkout credential is different from the credential (of type &lt;code&gt;GitLab Personal Access Token&lt;/code&gt;) setup in GitLab server config.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Owner&lt;/code&gt; - Can be a &lt;code&gt;user&lt;/code&gt;, &lt;code&gt;group&lt;/code&gt; or &lt;code&gt;subgroup&lt;/code&gt;. Depending on this the &lt;code&gt;Projects&lt;/code&gt; field is populated.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Projects&lt;/code&gt; - Select the project you want to build from the dropdown.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Behaviours&lt;/code&gt; - These traits are very powerful tool to configure the build logic and post build logic. We have defined new traits. You can see all the information in repository documentation.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Save and wait for the branches indexing. You are free to navigate from here, the job progress is displayed to the left hand side.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://zbynek.github.io/jenkins.io/order-syntax/images/post-images/gsoc-gitlab-branch-source-plugin/multibranch-indexing.png&quot; alt=&quot;Multibranch Pipeline Job Indexing&quot;&gt;
&lt;/img&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;After the indexing, the imported project listed all the branches, merge requests and tags as jobs.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://zbynek.github.io/jenkins.io/order-syntax/images/post-images/gsoc-gitlab-branch-source-plugin/multibranch-folder.png&quot; alt=&quot;Multibranch Pipeline Job Folder&quot;&gt;
&lt;/img&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On visiting each job, you will find some action items on the left hand side:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;You can trigger the job manually by selecting &lt;code&gt;Build Now&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You can visiting the particular branch/merge request/tag on your GitLab Server by selecting the corresponding button.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://zbynek.github.io/jenkins.io/order-syntax/images/post-images/gsoc-gitlab-branch-source-plugin/icon-tag.png&quot; alt=&quot;Build Actions&quot;&gt;
&lt;/img&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;create-a-gitlab-group-job-type&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#create-a-gitlab-group-job-type&quot; /&gt;Create a GitLab Group Job Type&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Go to Jenkins &amp;gt; New Item &amp;gt; GitLab Group&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://zbynek.github.io/jenkins.io/order-syntax/images/post-images/gsoc-gitlab-branch-source-plugin/gitlab-group.png&quot; alt=&quot;GitLab Folder Organization&quot;&gt;
&lt;/img&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can notice the configuration is very similar to Multibranch Pipeline Job with only &lt;code&gt;Projects&lt;/code&gt; field missing. You can add all the projects inside your Owner i.e. User/Group/Subgroup. The form validation will check with your GitLab server if the owner is valid. You can add &lt;code&gt;Discover subgroup project&lt;/code&gt; trait which allows you to discover this child projects of all subgroups inside a Group or Subgroup but this trait is not applicable to User. While indexing, web hook is created in each project. GitLab Api doesn’t support creation of Group web hooks so this plugin doesn’t support that feature which is only available in GitLab EE.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can now explore your imported projects, configuring different settings on each of those folders if needed.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://zbynek.github.io/jenkins.io/order-syntax/images/post-images/gsoc-gitlab-branch-source-plugin/gitlab-group-folder.png&quot; alt=&quot;GitLab Group Folder&quot;&gt;
&lt;/img&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;gitlab-pipeline-status-notification&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#gitlab-pipeline-status-notification&quot; /&gt;GitLab Pipeline Status Notification&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;GitLab is notified about build status from the point of queuing of jobs.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Success - the job was successful&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Failure - the job failed and the merge request is not ready to be merged&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Error - something unexpected happened; example: the job was aborted in Jenkins&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Pending - the job is waiting in the build queue&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://zbynek.github.io/jenkins.io/order-syntax/images/post-images/gsoc-gitlab-branch-source-plugin/pipeline-status.png&quot; alt=&quot;GitLab Pipeline Status&quot;&gt;
&lt;/img&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On GitLab Pipeline status are hyperlinks to the corresponding Jenkins job build. To see the Pipeline Stages and the console output you will be required to visit your Jenkins server. We also planned to notify the pipeline stages to GitLab but it came with some drawbacks which has been addressed so far but there is future plan to add it as trait.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can also skip notifying GitLab about the pipeline status by selecting &lt;code&gt;Skip pipeline status notifications&lt;/code&gt; from the traits list.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;merge-requests&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#merge-requests&quot; /&gt;Merge Requests&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Implementing support for Merge Requests for the projects was challenging. First, MRs are of 2 types i.e. Origin branches and Forked Project branches so there had to be different implementation for each head. Second, MRs from forks can be from untrusted sources, so a new strategy &lt;code&gt;Trust Members&lt;/code&gt; was implemented which allows CI to build MRs only from trusted users who have accesslevel of &lt;code&gt;Developer&lt;/code&gt;/&lt;code&gt;Maintainer&lt;/code&gt;/&lt;code&gt;Owner&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://zbynek.github.io/jenkins.io/order-syntax/images/post-images/gsoc-gitlab-branch-source-plugin/trusted-members.png&quot; alt=&quot;Trusted Member Strategy&quot;&gt;
&lt;/img&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Third, MRs from forks do not support pipeline status notification due to GitLab issue, see &lt;a href=&quot;https://docs.gitlab.com/ee/ci/merge_request_pipelines/#important-notes-about-merge-requests-from-forked-projects&quot;&gt;this&lt;/a&gt;. You can add a trait &lt;code&gt;Log Build Status as Comment on GitLab&lt;/code&gt; that allows you to add a sudo user (leave empty if you want owner user) to comment on the commit/tag/mrs the build result. To add a sudo user your token must have admin access. By default only failure/error are logged as comment but you can also enable logging of success build by ticking the checkbox.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://zbynek.github.io/jenkins.io/order-syntax/images/post-images/gsoc-gitlab-branch-source-plugin/log-comment-trait.png&quot; alt=&quot;Build Status Comment Trait&quot;&gt;
&lt;/img&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Sometimes, Merge Requests fail due to external errors so you want to trigger rebuild of mr by commenting &lt;code&gt;jenkins rebuild&lt;/code&gt;. To enable this trigger add the trait &lt;code&gt;Trigger build on merge request comment&lt;/code&gt;. The comment body can be changed in the trait. For security reasons, commentor should have &lt;code&gt;Developer&lt;/code&gt;/&lt;code&gt;Maintainer&lt;/code&gt;/&lt;code&gt;Owner&lt;/code&gt; accesslevel in the project.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://zbynek.github.io/jenkins.io/order-syntax/images/post-images/gsoc-gitlab-branch-source-plugin/build-trigger-trait.png&quot; alt=&quot;Merge request build trigger&quot;&gt;
&lt;/img&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;hooks&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#hooks&quot; /&gt;Hooks&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Web hooks are automatically created on your projects if configured to do so in server configuration. Web hooks are ensured to pass through a CSRF filter. Jenkins listens to web hooks on the path &lt;code&gt;/gitlab-webhook/post&lt;/code&gt;. On GitLab web hooks are triggered on the following events:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Push Event&lt;/code&gt; - when a commit or branch is pushed&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Tag Event&lt;/code&gt; - when a new tag is created&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Merge Request Event&lt;/code&gt; - when a merge request is created/updated&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Note Event&lt;/code&gt; - when a comment is made on a merge request&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can also set up System Hooks on your GitLab server if your token has admin access. System hooks are triggered when new projects are created, Jenkins triggers a rescan of the new project based on the configuration and sets up web hook on it. Jenkins listens to system hooks on the path &lt;code&gt;/gitlab-systemhook/post&lt;/code&gt;. On GitLab system hooks are triigered on &lt;code&gt;Repository Update Events&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can also use &lt;code&gt;Override Hook Management mode&lt;/code&gt; trait to override the default hook management and choose if you want to use a different context (say Item) or disable it altogether.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://zbynek.github.io/jenkins.io/order-syntax/images/post-images/gsoc-gitlab-branch-source-plugin/override-hook.png&quot; alt=&quot;Override Hook Management&quot;&gt;
&lt;/img&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;job-dsl-and-jcasc&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#job-dsl-and-jcasc&quot; /&gt;Job DSL and JCasC&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can use &lt;code&gt;Job DSL&lt;/code&gt; to create jobs. Here’s an example of Job DSL script:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;groovy&quot;&gt;organizationFolder(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;GitLab Organization Folder&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;) {
    description(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;GitLab org folder created with Job DSL&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;)
    displayName(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;My Project&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;)
    &lt;span style=&quot;color:#777&quot;&gt;// &quot;Projects&quot;&lt;/span&gt;
    organizations {
        gitLabSCMNavigator {
            projectOwner(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;baymac&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;)
            credentialsId(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;i&amp;lt;3GitLab&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;)
            serverName(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;gitlab-3214&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;)
            &lt;span style=&quot;color:#777&quot;&gt;// &quot;Traits&quot; (&quot;Behaviours&quot; in the GUI) that are &quot;declarative-compatible&quot;&lt;/span&gt;
            traits {
                subGroupProjectDiscoveryTrait() &lt;span style=&quot;color:#777&quot;&gt;// discover projects inside subgroups&lt;/span&gt;
                gitLabBranchDiscovery {
                    strategyId(&lt;span style=&quot;color:#00D&quot;&gt;3&lt;/span&gt;) &lt;span style=&quot;color:#777&quot;&gt;// discover all branches&lt;/span&gt;
                }
                originMergeRequestDiscoveryTrait {
                    strategyId(&lt;span style=&quot;color:#00D&quot;&gt;1&lt;/span&gt;) &lt;span style=&quot;color:#777&quot;&gt;// discover MRs and merge them with target branch&lt;/span&gt;
                }
                gitLabTagDiscovery() &lt;span style=&quot;color:#777&quot;&gt;// discover tags&lt;/span&gt;
            }
        }
    }
    &lt;span style=&quot;color:#777&quot;&gt;// &quot;Traits&quot; (&quot;Behaviours&quot; in the GUI) that are NOT &quot;declarative-compatible&quot;&lt;/span&gt;
    &lt;span style=&quot;color:#777&quot;&gt;// For some &#39;traits, we need to configure this stuff by hand until JobDSL handles it&lt;/span&gt;
    &lt;span style=&quot;color:#777&quot;&gt;// https://issues.jenkins.io/browse/JENKINS-45504&lt;/span&gt;
    configure {
        &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;def&lt;/span&gt; traits = &lt;span style=&quot;color:#950&quot;&gt;it&lt;/span&gt; / navigators / &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;io.jenkins.plugins.gitlabbranchsource.GitLabSCMNavigator&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt; / traits
        traits &amp;lt;&amp;lt; &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;io.jenkins.plugins.gitlabbranchsource.ForkMergeRequestDiscoveryTrait&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt; {
            strategyId(&lt;span style=&quot;color:#00D&quot;&gt;2&lt;/span&gt;)
            trust(&lt;span style=&quot;color:#339;font-weight:bold&quot;&gt;class&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;io.jenkins.plugins.gitlabbranchsource.ForkMergeRequestDiscoveryTrait$TrustPermission&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;)
        }
    }
    &lt;span style=&quot;color:#777&quot;&gt;// &quot;Project Recognizers&quot;&lt;/span&gt;
    &lt;span style=&quot;color:#B06;font-weight:bold&quot;&gt;projectFactories&lt;/span&gt; {
        workflowMultiBranchProjectFactory {
            scriptPath &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Jenkinsfile&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;
        }
    }
    &lt;span style=&quot;color:#777&quot;&gt;// &quot;Orphaned Item Strategy&quot;&lt;/span&gt;
    orphanedItemStrategy {
        discardOldItems {
            daysToKeep(&lt;span style=&quot;color:#00D&quot;&gt;10&lt;/span&gt;)
            numToKeep(&lt;span style=&quot;color:#00D&quot;&gt;5&lt;/span&gt;)
        }
    }
    &lt;span style=&quot;color:#777&quot;&gt;// &quot;Scan Organization Folder Triggers&quot; : 1 day&lt;/span&gt;
    &lt;span style=&quot;color:#777&quot;&gt;// We need to configure this stuff by hand because JobDSL only allow &#39;periodic(int min)&#39; for now&lt;/span&gt;
    triggers {
        periodicFolderTrigger {
            interval(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;1d&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;)
        }
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can also use &lt;code&gt;JCasC&lt;/code&gt; to directly create job from a Job DSL script. For example see the plugin &lt;a href=&quot;https://github.com/jenkinsci/gitlab-branch-source-plugin/blob/master/README.md&quot;&gt;repository&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;how-to-talk-to-us-about-bugs-or-new-features&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#how-to-talk-to-us-about-bugs-or-new-features&quot; /&gt;How to talk to us about bugs or new features?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;This project uses &lt;a href=&quot;https://issues.jenkins-ci.org/&quot;&gt;Jenkins JIRA&lt;/a&gt; to track issues. You can file issues under &lt;a href=&quot;https://issues.jenkins-ci.org/issues/?jql=project+%3D+JENKINS+AND+component+%3D+gitlab-branch-source-plugin&quot;&gt;&lt;code&gt;gitlab-branch-source-plugin&lt;/code&gt;&lt;/a&gt; component.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Send your mail in the &lt;a href=&quot;https://groups.google.com/forum/#!forum/jenkinsci-dev&quot;&gt;Developer Mailing list&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Join our &lt;a href=&quot;https://gitter.im/jenkinsci/gitlab-branch-source-plugin&quot;&gt;Gitter channel&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;future-work&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#future-work&quot; /&gt;Future work&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Actively maintain &lt;code&gt;GitLab Branch Source Plugin&lt;/code&gt; and take feedbacks from users to improve the plugin’s user experience.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Extend support for GitLab Pipeline to Blueocean.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;resources&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#resources&quot; /&gt;Resources&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/jenkinsci/gitlab-api-plugin&quot;&gt;GitLab API Plugin&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://wiki.jenkins.io/display/JENKINS/GitLab+API+Plugin&quot;&gt;GitLab API Plugin Wiki&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/jenkinsci/gitlab-branch-source-plugin&quot;&gt;GitLab Branch Source Plugin&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://jenkins.io/projects/gsoc/2019/gitlab-support-for-multibranch-pipeline/&quot;&gt;Project Summary&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://go.cloudbees.com/docs/plugins/github-branch-source/&quot;&gt;GitHub Branch Source Plugin Release&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Thank you Jenkins and Google Summer of Code :)&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://zbynek.github.io/jenkins.io/order-syntax/blog/2019/08/23/introduce-react-plugin-template/</id>
<title>Introduce React Plugin Template</title>
<updated>2019-12-12T20:07:24+00:00</updated>
<published>2019-08-23T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://zbynek.github.io/jenkins.io/order-syntax/blog/2019/08/23/introduce-react-plugin-template/" />
<author>
<name>jackshen</name>
</author>
<category term="react"></category>
<category term="plugins"></category>
<category term="template"></category>
<category term="gsoc"></category>
<category term="gsoc2019"></category>
<summary>
The template&#8217;s main repo is at
React Plugin Template


This template is part of the project Working Hours UI Improvement during
Google Summer of Code 2019, which improved the UI of Working Hours Plugin using this pattern to develop Jenkins plugins with React. The Working Hours Plugin repository can be found at Working Hours Plugin.


Overview


Developing plugin for Jenkins has always been easy to do with its Jelly based UI render system, but Jelly seems to be pretty heavy when we want to use more modernized frameworks like React, or if we need to make the plugin UI more customized. This is what this...
</summary>
<content type="html">
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The template’s main repo is at
&lt;a href=&quot;https://github.com/jenkinsci/react-plugin-template&quot;&gt;React Plugin Template&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This template is part of the project &lt;a href=&quot;https://summerofcode.withgoogle.com/projects/#6112735123734528&quot;&gt;Working Hours UI Improvement&lt;/a&gt; during
&lt;a href=&quot;https://summerofcode.withgoogle.com/&quot;&gt;Google Summer of Code 2019&lt;/a&gt;, which improved the UI of &lt;code&gt;Working Hours Plugin&lt;/code&gt; using this pattern to develop Jenkins plugins with React. The &lt;code&gt;Working Hours Plugin&lt;/code&gt; repository can be found at &lt;a href=&quot;https://github.com/jenkinsci/working-hours-plugin&quot;&gt;Working Hours Plugin&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;overview&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#overview&quot; /&gt;Overview&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Developing plugin for Jenkins has always been easy to do with its Jelly based UI render system, but Jelly seems to be pretty heavy when we want to use more modernized frameworks like React, or if we need to make the plugin UI more customized. This is what this template is built for.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;And with React integrated, development of Jenkins plugin is more modernized, developer can now use tons of React libraries, the way to use libraries is now tinier and safer with webpack, in short, coding with Jenkins plugin can be much easier.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;features&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#features&quot; /&gt;Features&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 20%;&quot;&gt;
&lt;col style=&quot;width: 80%;&quot;&gt;
&lt;/col&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Feature&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Summary&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;React Integrated&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;React is integrated, you can take full control of the UI&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Using Iframe&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Using iframe can create a new javascript env, we can get rid of some side effects of some polyfills which was added globally.(such as Prototype.js)&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Maven Lifecycle&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;npm commands are integrated into Maven lifecycle with help of &lt;a href=&quot;https://github.com/eirslett/frontend-maven-plugin/&quot;&gt;Frontend Maven Plugin&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Webpack&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Webpack helps us reduce the size of the bundle, also avoids pollution on the global namespace.&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Jenkins Crumb attached&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Crumb is attached to Axios client, now you can send requests in the way you used to do in React.&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Express as devserver&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;You can run your react app in a standalone page so you can develop in webpack hot reload mode, also with webpack proxy, the standalone app is still accessible to the jenkins dev server.&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Axios as http client&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Axios hugely simplify the way to make requests.&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/col&gt;
&lt;/colgroup&gt;
&lt;/table&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;screenshots&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#screenshots&quot; /&gt;Screenshots&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Example Plugin UI&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://zbynek.github.io/jenkins.io/order-syntax/images/post-images/react-plugin-template/plugin-ui.jpg&quot; alt=&quot;plugin ui&quot; /&gt;
Management Link&lt;/span&gt;
&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://zbynek.github.io/jenkins.io/order-syntax/images/post-images/react-plugin-template/management-link.jpg&quot; alt=&quot;management link&quot; /&gt;&lt;/span&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;getting-started&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#getting-started&quot; /&gt;Getting Started&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Clone the repo:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;shell&quot;&gt;git clone https://github.com/jenkinsci/react-plugin-template.git
cd react-plugin-template&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Install the Maven dependencies and node modules.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;shell&quot;&gt;mvn install -DskipTests&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Run standalone React app with hot reload&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;shell&quot;&gt;npm run start&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Run plugin&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;shell&quot;&gt;mvn hpi:run -Dskip.npm -f pom.xml&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;send-http-requests&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#send-http-requests&quot; /&gt;Send HTTP requests&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As Crumb Issuer is default enabled in Jenkins and each ajax request is required to contain a &lt;code&gt;Jenkins Crumb&lt;/code&gt; in request header, so be sure to use the &lt;code&gt;axiosInstance&lt;/code&gt; which is already set up with &lt;code&gt;Jenkins Crumb&lt;/code&gt; and exported at &lt;code&gt;src/main/react/app/api.js&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;javascript&quot;&gt;&lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;export&lt;/span&gt; const apiGetData = () =&amp;gt; {
  &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;return&lt;/span&gt; axiosInstance.post(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;/data&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;);
};&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Or if you want to use your own http client, remember to add the &lt;code&gt;Jenkins Crumb&lt;/code&gt; to your request’s header, the Crumb’s key and content could be found at &lt;code&gt;src/main/react/app/utils/urlConfig.js&lt;/code&gt;, then you can set the header like below.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;javascript&quot;&gt;const headers = {};
const crumbHeaderName = UrlConfig.getCrumbHeaderName();

&lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;if&lt;/span&gt; (crumbHeaderName) {
  headers[crumbHeaderName] = UrlConfig.getCrumbToken();
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;write-your-own-request-handler&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#write-your-own-request-handler&quot; /&gt;Write your own request handler&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now you can customize your request pattern as you want, also we need to write a handler.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Jenkins is using stapler to preprocess the requests, so if you need a request handler. For example and also in this template, you can use an &lt;code&gt;Action&lt;/code&gt; class to create a sub-url, and then a &lt;code&gt;StaplerProxy&lt;/code&gt; to proxy the request like a router. More info about a handler can be found here &lt;a href=&quot;http://stapler.kohsuke.org/reference.html&quot;&gt;Stapler Reference&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;example-handler&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#example-handler&quot; /&gt;Example handler&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;ManagementLink would get the request and then hand it off to the &lt;code&gt;PluginUI&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#007&quot;&gt;@Extension&lt;/span&gt;
&lt;span style=&quot;color:#088;font-weight:bold&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color:#339;font-weight:bold&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color:#B06;font-weight:bold&quot;&gt;PluginManagementLink&lt;/span&gt; &lt;span style=&quot;color:#088;font-weight:bold&quot;&gt;extends&lt;/span&gt; ManagementLink &lt;span style=&quot;color:#088;font-weight:bold&quot;&gt;implements&lt;/span&gt; StaplerProxy {

    PluginUI webapp;

    &lt;span style=&quot;color:#088;font-weight:bold&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color:#0a8;font-weight:bold&quot;&gt;Object&lt;/span&gt; getTarget() {
        &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;return&lt;/span&gt; webapp;
    }

    &lt;span style=&quot;color:#088;font-weight:bold&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color:#0a8;font-weight:bold&quot;&gt;String&lt;/span&gt; getUrlName() {
        &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;react-plugin-template&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;;
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;PluginUI&lt;/code&gt;, stapler would then find methods in the target class, in this case, it finds &lt;code&gt;doDynamic&lt;/code&gt;, then we can choose the next handler by return the methods result, in this case, &lt;code&gt;getTodos&lt;/code&gt; or &lt;code&gt;setTodos&lt;/code&gt;, and &lt;code&gt;PluginUI&lt;/code&gt; just function like a url router.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#088;font-weight:bold&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color:#339;font-weight:bold&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color:#B06;font-weight:bold&quot;&gt;PluginUI&lt;/span&gt;{
    &lt;span style=&quot;color:#088;font-weight:bold&quot;&gt;public&lt;/span&gt; HttpResponse doDynamic(StaplerRequest request) {
        ...

        List&amp;lt;&lt;span style=&quot;color:#0a8;font-weight:bold&quot;&gt;String&lt;/span&gt;&amp;gt; params = getRequestParams(request);

        &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;switch&lt;/span&gt; (params.get(&lt;span style=&quot;color:#00D&quot;&gt;0&lt;/span&gt;)) {
        &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;case&lt;/span&gt; &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;get-todos&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;:
            &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;return&lt;/span&gt; getTodos();
        &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;case&lt;/span&gt; &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;set-todos&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;:
            &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;return&lt;/span&gt; setTodos(request);
        }
        ...
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;data-persistence&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#data-persistence&quot; /&gt;Data Persistence&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can save your data with a descriptor&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#007&quot;&gt;@Extension&lt;/span&gt;
&lt;span style=&quot;color:#088;font-weight:bold&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color:#339;font-weight:bold&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color:#B06;font-weight:bold&quot;&gt;PluginConfig&lt;/span&gt; &lt;span style=&quot;color:#088;font-weight:bold&quot;&gt;extends&lt;/span&gt; &lt;span style=&quot;color:#0a8;font-weight:bold&quot;&gt;Descriptor&lt;/span&gt;&amp;lt;PluginConfig&amp;gt; &lt;span style=&quot;color:#088;font-weight:bold&quot;&gt;implements&lt;/span&gt; Describable&amp;lt;PluginConfig&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;And after each time you change data, call &lt;code&gt;save()&lt;/code&gt; to persist them.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;    &lt;span style=&quot;color:#088;font-weight:bold&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color:#339;font-weight:bold&quot;&gt;void&lt;/span&gt; setTodos(
            &lt;span style=&quot;color:#007&quot;&gt;@CheckForNull&lt;/span&gt; &lt;span style=&quot;color:#0a8;font-weight:bold&quot;&gt;List&lt;/span&gt;&amp;lt;Todo&amp;gt; value) {
        &lt;span style=&quot;color:#950&quot;&gt;this&lt;/span&gt;.todos = value;
        save();
    }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;And in your handler, you can get the config class by calling&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;config = ExtensionList.lookup(PluginConfig.class).get(&lt;span style=&quot;color:#00D&quot;&gt;0&lt;/span&gt;);&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;customize-your-plugin&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#customize-your-plugin&quot; /&gt;Customize your plugin&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;be-sure-to-modify-all-the-occurrence-of-react-template&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#be-sure-to-modify-all-the-occurrence-of-react-template&quot; /&gt;Be sure to modify all the occurrence of &lt;code&gt;react-template&lt;/code&gt;&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;At &lt;code&gt;org/jenkinsci/plugins/reactplugintemplate/PluginUI/index.jelly&lt;/code&gt; , change the iframe’s id and its source url.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;At &lt;code&gt;src/main/react/app/utils/urlConfig.js&lt;/code&gt; change&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;At &lt;code&gt;src/main/react/server/config.js&lt;/code&gt; , change the proxy route.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;At &lt;code&gt;src/main/react/package.json&lt;/code&gt; , change the start script’s BASE_URL&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;At &lt;code&gt;pom.xml&lt;/code&gt; , change the artifactId&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;At &lt;code&gt;org/jenkinsci/plugins/reactplugintemplate/PluginManagementLink.java&lt;/code&gt; , change names.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Also use the &lt;code&gt;same value&lt;/code&gt; to modify the occurrence in &lt;code&gt;src\main\react\app\utils\urlConfig.js&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;customize-a-page-for-your-plugin&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#customize-a-page-for-your-plugin&quot; /&gt;Customize a page for your plugin&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A management Link is recommended, which would get your plugin a standalone page, along with a entry button in the &lt;code&gt;/manage&lt;/code&gt; system manage page.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://zbynek.github.io/jenkins.io/order-syntax/images/post-images/react-plugin-template/management-link.jpg&quot; alt=&quot;management link&quot; /&gt;&lt;/span&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;how-does-this-template-work&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#how-does-this-template-work&quot; /&gt;How does this template work?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This template is putting a webpack project inside a Maven project, and this template is just chaining the build result by copy the webpack output to the plugin’s webapp folder to make it accessible from the iframe, then Jelly render the iframe and the client gets the Plugin UI.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;why-iframe&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#why-iframe&quot; /&gt;Why iframe?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Over time, Jenkins has added a lot of various javascript libraries to every regular page, which now causes problems for using modern Javascript tooling and as such, we decided to inline the new react based pages in their own sandbox which prevents collisions with other libraries, and maybe the iframe is a good sandbox case.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;links&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#links&quot; /&gt;Links&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/jenkinsci/react-plugin-template&quot;&gt;Github: React Plugin Template&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/jenkinsci/working-hours-plugin&quot;&gt;Github: Working Hours Plugin&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://zbynek.github.io/jenkins.io/order-syntax/blog/2019/08/22/devops-world/</id>
<title>My DevOps World - Jenkins World 2019 Experience</title>
<updated>2019-12-12T20:07:24+00:00</updated>
<published>2019-08-22T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://zbynek.github.io/jenkins.io/order-syntax/blog/2019/08/22/devops-world/" />
<author>
<name>stopalopa</name>
</author>
<category term="pluginmanagement"></category>
<category term="devopsworld2019"></category>
<category term="gsoc"></category>
<category term="gsoc2019"></category>
<category term="community"></category>
<category term="events"></category>
<summary>
Last week I had the privilege of attending DevOps World - Jenkins World in San
Francisco to present my Google Summer of Code project for plugin management. It was
an amazing experience getting to meet people from all over world who are trying
to make the development and release process easier and more efficient. I enjoyed
learning more about industry tools, processes, and standards, and meeting CI/CD
experts and contributors in the open source community.


Below is a summary of my experience. Thank you to the Jenkins project and CloudBees for making
 my trip and attendence possible!


Day 1

Monday was the Continuous Delivery Contributor Summit, which focused...
</summary>
<content type="html">
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Last week I had the privilege of attending &lt;a href=&quot;https://www.cloudbees.com/devops-world/san-francisco&quot;&gt;DevOps World - Jenkins World in San
Francisco&lt;/a&gt; to present &lt;a href=&quot;https://zbynek.github.io/jenkins.io/order-syntax/projects/gsoc/2019/plugin-installation-manager-tool-cli&quot;&gt;my Google Summer of Code project&lt;/a&gt; for plugin management. It was
an amazing experience getting to meet people from all over world who are trying
to make the development and release process easier and more efficient. I enjoyed
learning more about industry tools, processes, and standards, and meeting CI/CD
experts and contributors in the open source community.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Below is a summary of my experience. Thank you to the Jenkins project and CloudBees for making
 my trip and attendence possible!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;day-1&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#day-1&quot; /&gt;Day 1&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Monday was the Continuous Delivery Contributor Summit, which focused on projects
under the CDF umbrella.  After checking in and grabbing my badge, I was able to
meet up with some of the Google Summer of Code org admins. It was great
being able to actually meet them in person after talking to them over video
conferencing and chats all summer!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://zbynek.github.io/jenkins.io/order-syntax/images/post-images/gsoc-plugin-management-tool/speakerbadge.jpg&quot; alt=&quot;Speaker Badge&quot; height=&quot;500&quot;&gt;
&lt;/img&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Tracy Miranda started the summit out by introducing the &lt;a href=&quot;https://cd.foundation/&quot;&gt;Continuous Delivery Foundation&lt;/a&gt;,
which aims to provide a vendor neutral home to help and sustain open source projects
focusing on all aspects of continuous delivery.  Currently, Jenkins, Tekton, Spinnaker,
and JenkinsX have joined the foundation.  Project updates were given for Jenkins,
Tekton, and JenkinsX.  In the afternoon, attendees split into different groups for
unconference sessions.  I presented my project to the Jenkins group.  Afterwards,
there was free time to chat with other attendees about my project and the other Jenkins
projects. Lastly, lightning talks were given before everyone headed to the contributor
appreciation event to grab some food and drinks.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://zbynek.github.io/jenkins.io/order-syntax/images/post-images/gsoc-plugin-management-tool/contributorsummit.jpg&quot; alt=&quot;Contributor Summit&quot; height=&quot;500&quot;&gt;
&lt;/img&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;day-2&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#day-2&quot; /&gt;Day 2&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I attended the Jenkins Pipeline Fundamentals Short Course in the morning. Even
though I’m working on a project for Jenkins, there’s still a lot I don’t know so
I just wanted to try to learn more.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://zbynek.github.io/jenkins.io/order-syntax/images/post-images/gsoc-plugin-management-tool/pipeline.jpg&quot; alt=&quot;Jenkins Pipeline Basics Session&quot; height=&quot;500&quot;&gt;
&lt;/img&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A lot of the afternoon sessions filled up, so I spent the afternoon trying to meet
other people at the conference, before heading to the keynote. The keynote
talked more about the CDF and some of the backstory behind its origin.  This year is also a big anniversary for Jenkins - it has now been
around for 15 years.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://zbynek.github.io/jenkins.io/order-syntax/images/post-images/gsoc-plugin-management-tool/cdfkeynote.jpg&quot; alt=&quot;CDF Key Note&quot; height=&quot;500&quot;&gt;
&lt;/img&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://zbynek.github.io/jenkins.io/order-syntax/images/post-images/gsoc-plugin-management-tool/cdforigin.jpg&quot; alt=&quot;CDF Origin&quot; height=&quot;500&quot;&gt;
&lt;/img&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;After the keynote, I checked out a Women in Tech mixer and
the opening of the exibition hall. Probably my favorite swag I picked up was the
&quot;Will Code for Beer&quot; stickers and a bottle of hot sauce.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://zbynek.github.io/jenkins.io/order-syntax/images/post-images/gsoc-plugin-management-tool/jenkinssticker.jpg&quot; alt=&quot;Jenkins Sticker&quot; height=&quot;500&quot;&gt;
&lt;/img&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://zbynek.github.io/jenkins.io/order-syntax/images/post-images/gsoc-plugin-management-tool/willcodeforbeer.jpg&quot; alt=&quot;Will Code for Beer Sticker&quot; height=&quot;500&quot;&gt;
&lt;/img&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;day-3&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#day-3&quot; /&gt;Day 3&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The morning began with another keynote. Shawn Ahmed of Cloudbees talked about the
challenges of visibility into bottlenecks of the development process and Rajeev Mahajan
discussed how HSBC tackled DevOps.  The rest of the day I attended different sessions
on container tooling, implementing CI/CD in a cloud native environment, running
Jenkins on Jenkins, and database DevOps.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://zbynek.github.io/jenkins.io/order-syntax/images/post-images/gsoc-plugin-management-tool/kubernetes.jpg&quot; alt=&quot;Session on Containers&quot; height=&quot;500&quot;&gt;
&lt;/img&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;After the sessions finished, I wandered
around the expo until it closed, then joined some of the other conference attendees
to have some fun at a ping pong bar nearby.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;day-4&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#day-4&quot; /&gt;Day 4&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The final and last day of the conference was probably my favorite.  The morning
keynote revealed that &lt;a href=&quot;https://github.com/LinuxSuRen&quot;&gt;Zhao Xiaojie&lt;/a&gt; had won an award for his work on Jenkins advocacy,
some other DevOps award panelists talked about their approaches to different challenges,
then David Stanke gave an enjoyable presentation about cloud native CI/CD. I was
able to present my summer project and attend a few more sessions, including one
about DevOps at scale, and another about use cases for machine learning in CI/CD pipelines.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://zbynek.github.io/jenkins.io/order-syntax/images/post-images/gsoc-plugin-management-tool/presentation.jpg&quot; alt=&quot;Plugin Management Tool Presentation&quot; height=&quot;500&quot;&gt;
&lt;/img&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The last keynote given by James Govenor was a thoughtful look into the current and
future states of tech. How does tech look like it will scale in the coming years
in the U.S. and across the world? How can we make tech more inclusive and accessible?
What can we do to minimize our environmental footprint?  In particular, his points
on welcoming people from a non-traditional computer science background resonated with
me since I’m currently undergoing my own career transition to tech.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;After the conference ended, I said goodbye to the remaining GSoC org admins before
meeting an old friend for dinner and bringing along some new friends I met at the
conference.  I spent the remaining part of the night singing karaoke with
them before heading out of San Francisco the next morning.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://zbynek.github.io/jenkins.io/order-syntax/images/post-images/gsoc-plugin-management-tool/orgadmins.jpg&quot; alt=&quot;GSoC Mentors&quot; height=&quot;500&quot;&gt;
&lt;/img&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Thanks again to everyone who supported me and encouraged me leading up to and during
my presentation, patiently answered my questions as I tried to gather more context
about CI/CD tools and practices, and made my first DevOps conference so enjoyable!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://zbynek.github.io/jenkins.io/order-syntax/blog/2019/08/19/remoting-kafka-kubernetes-release-2/</id>
<title>Remoting over Apache Kafka 2.0: Built-in Kubernetes support</title>
<updated>2019-12-12T20:07:24+00:00</updated>
<published>2019-08-19T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://zbynek.github.io/jenkins.io/order-syntax/blog/2019/08/19/remoting-kafka-kubernetes-release-2/" />
<author>
<name>longnguyen</name>
</author>
<category term="remoting"></category>
<category term="kafka"></category>
<category term="kubernetes"></category>
<category term="helm"></category>
<category term="plugin"></category>
<category term="gsoc"></category>
<category term="gsoc2019"></category>
<summary>
I am Long Nguyen from FPT University, Vietnam. My project for Google Summer of Code 2019 is Remoting over Apache Kafka with Kubernetes features. After a successful Phase 1, finally the 2.0 version of the plugin has been released. The 2.0 version provides seamless integration with Kubernetes environment.


2.0 version features




Start a simple Apache Kafka server in Kubernetes.


Dynamically provision Remoting Kafka Agent in Kubernetes.


Helm chart to bootstrap the whole system in Kubernetes.






Start a simple Apache Kafka server in Kubernetes


Use of the plugin requires that users have a configured Apache Zookeeper and Apache Kafka server, which could be intimidating for people who...
</summary>
<content type="html">
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I am Long Nguyen from &lt;a href=&quot;https://international.fpt.edu.vn/&quot;&gt;FPT University&lt;/a&gt;, Vietnam. My project for Google Summer of Code 2019 is &lt;a href=&quot;https://zbynek.github.io/jenkins.io/order-syntax/projects/gsoc/2019/remoting-over-apache-kafka-docker-k8s-features/&quot;&gt;Remoting over Apache Kafka with Kubernetes features&lt;/a&gt;. After a successful &lt;a href=&quot;https://zbynek.github.io/jenkins.io/order-syntax/blog/2019/07/11/remoting-kafka-kubernetes-phase-1/&quot;&gt;Phase 1&lt;/a&gt;, finally the 2.0 version of the plugin has been released. The 2.0 version provides seamless integration with Kubernetes environment.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;2-0-version-features&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#2-0-version-features&quot; /&gt;2.0 version features&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Start a simple Apache Kafka server in Kubernetes.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Dynamically provision Remoting Kafka Agent in Kubernetes.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Helm chart to bootstrap the whole system in Kubernetes.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;start-a-simple-apache-kafka-server-in-kubernetes&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#start-a-simple-apache-kafka-server-in-kubernetes&quot; /&gt;Start a simple Apache Kafka server in Kubernetes&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Use of the plugin requires that users have a configured Apache Zookeeper and Apache Kafka server, which could be intimidating for people who just want to try out the plugin. Now, users can start a simple, single-node Apache Kafka server in Kubernetes environment with just one button click.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://zbynek.github.io/jenkins.io/order-syntax/images/post-images/remoting-kafka/kafka-provisioning-kubernetes-ui.png&quot; alt=&quot;Apache Kafka provisioning in Kubernetes UI&quot; /&gt;&lt;/span&gt;
&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On the Global Configuration page, users can input Kubernetes server information and credentials. When users click &lt;code&gt;Start Kafka on Kubernetes&lt;/code&gt; button, Jenkins will create a Kubernetes client from the information and then apply Apache Zookeeper and Apache Kafka YAML specification files from &lt;code&gt;resources&lt;/code&gt;. After downloading images and creating containers, it will automatically update Apache Zookeeper and Apache Kafka URLs into respective fields.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;dynamically-provision-remoting-kafka-agent-in-kubernetes&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#dynamically-provision-remoting-kafka-agent-in-kubernetes&quot; /&gt;Dynamically provision Remoting Kafka Agent in Kubernetes&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With previous version, users have to manually add/remove nodes so it is hard to scale builds quickly. &lt;a href=&quot;https://plugins.jenkins.io/kubernetes&quot;&gt;Kubernetes plugin&lt;/a&gt; allows us to dynamically provision agents in Kubernetes but it is designed for JNLP agent. With this new version, Remoting Kafka agent can also be provisioned automatically in Kubernetes environment.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://zbynek.github.io/jenkins.io/order-syntax/images/post-images/remoting-kafka/cloud-ui.png&quot; alt=&quot;Remoting Kafka Cloud UI&quot; /&gt;&lt;/span&gt;
&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Users can find the new feature in Cloud section in &lt;code&gt;/configure&lt;/code&gt;. Here users could input Kubernetes connection parameters and desired Remoting Kafka agent properties including labels. When new build with matching labels gets started and there are no free nodes, Cloud will automatically provision Remoting Kafka agent pod in Kubernetes to run the build.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://zbynek.github.io/jenkins.io/order-syntax/images/post-images/remoting-kafka/cloud-nodes.png&quot; alt=&quot;Remoting Kafka Agent get provisioned&quot; /&gt;&lt;/span&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;helm-chart&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#helm-chart&quot; /&gt;Helm Chart&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Helm chart for Remoting over Apache Kafka plugin is based on &lt;a href=&quot;https://github.com/helm/charts/tree/master/stable/jenkins&quot;&gt;stable/jenkins&lt;/a&gt; chart and &lt;a href=&quot;https://github.com/helm/charts/tree/master/incubator/kafka&quot;&gt;incubator/kafka&lt;/a&gt; chart. You can follow the instruction &lt;a href=&quot;https://github.com/jenkinsci/remoting-kafka-plugin/blob/master/README.md&quot;&gt;here&lt;/a&gt; to install a demo ready-to-use Helm release. Your &lt;code&gt;kubectl get all&lt;/code&gt; should look like this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;bash&quot;&gt;NAME                                READY   STATUS    RESTARTS   AGE
pod/demo-jenkins-64dbd87987-bmndf   1/1     Running   0          2m21s
pod/demo-kafka-0                    1/1     Running   0          2m21s
pod/demo-zookeeper-0                1/1     Running   0          2m21s

NAME                              TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)                      AGE
service/demo-jenkins              NodePort    10.108.238.56   &amp;lt;none&amp;gt;        8080:30386/TCP               2m21s
service/demo-jenkins-agent        ClusterIP   10.98.85.184    &amp;lt;none&amp;gt;        50000/TCP                    2m21s
service/demo-kafka                ClusterIP   10.109.231.58   &amp;lt;none&amp;gt;        9092/TCP                     2m21s
service/demo-kafka-headless       ClusterIP   None            &amp;lt;none&amp;gt;        9092/TCP                     2m21s
service/demo-zookeeper            ClusterIP   10.103.2.231    &amp;lt;none&amp;gt;        2181/TCP                     2m21s
service/demo-zookeeper-headless   ClusterIP   None            &amp;lt;none&amp;gt;        2181/TCP,3888/TCP,2888/TCP   2m21s

NAME                           READY   UP-TO-DATE   AVAILABLE   AGE
deployment.apps/demo-jenkins   1/1     1            1           2m21s

NAME                                      DESIRED   CURRENT   READY   AGE
replicaset.apps/demo-jenkins-64dbd87987   1         1         1       2m21s

NAME                              READY   AGE
statefulset.apps/demo-kafka       1/1     2m21s
statefulset.apps/demo-zookeeper   1/1     2m21s&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;how-to-contribute&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#how-to-contribute&quot; /&gt;How to Contribute&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You are welcome to try out the plugin and integrate it into your current setup. If you find out any bug or if you would like to request new feature, you can create ticket at &lt;a href=&quot;https://issues.jenkins-ci.org/issues/?jql=project+%3D+JENKINS+AND+component+%3D+remoting-kafka-plugin&quot;&gt;JIRA&lt;/a&gt;. If you would like to contribute code directly, you can create pull requests in the GitHub page below.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;links&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#links&quot; /&gt;Links&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://youtu.be/tnoObQqGhyM?t=2368&quot;&gt;Phase 2 Demo Video&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.google.com/presentation/d/1BN2lUcI5UweN2pumAu2m4XHIVXQw6ujzeO9Fbage3ys/edit?usp=sharing&quot;&gt;Phase 2 Presentation Slides&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://jenkins.io/blog/2019/07/11/remoting-kafka-kubernetes-phase-1/&quot;&gt;Phase 1 Blog Post&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://youtu.be/MDs0Vr7gnnA?t=2601&quot;&gt;Phase 1 Demo Video&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.google.com/presentation/d/1yIPwwL7P051XaSE2EOJYAtbVsd6YvGvvKp9QcJE4J1Y/edit?usp=sharing&quot;&gt;Phase 1 Presentation Slides&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/jenkinsci/remoting-kafka-plugin&quot;&gt;Remoting over Apache Kafka plugin source code&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://jenkins.io/projects/gsoc/2019/remoting-over-apache-kafka-docker-k8s-features/&quot;&gt;Project Page&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://gitter.im/jenkinsci/remoting&quot;&gt;Gitter Channel&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://zbynek.github.io/jenkins.io/order-syntax/blog/2019/08/16/folder-auth-plugin/</id>
<title>Introducing new Folder Authorization Plugin</title>
<updated>2019-12-12T20:07:24+00:00</updated>
<published>2019-08-16T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://zbynek.github.io/jenkins.io/order-syntax/blog/2019/08/16/folder-auth-plugin/" />
<author>
<name>abhyudayasharma</name>
</author>
<category term="plugins"></category>
<category term="security"></category>
<category term="performance"></category>
<category term="gsoc"></category>
<category term="gsoc2019"></category>
<summary>
During my Google Summer of Code Project,
I have created the brand new Folder Auth Plugin for easily
managing permissions to projects organized in folders from the Folders plugin.
This new plugin is designed for fast permission checks with easy-to-manage roles.
The 1.0 version of the plugin has just been released and can be downloaded
from your Jenkins' Update center.


This plugin was inspired by the Role Strategy Plugin
and brings about performance improvements and makes managing roles much easier.
The plugin was developed to overcome performance limitations of the Role Strategy
plugin on a large number of roles. At the same time, the plugin addresses one
of the most...
</summary>
<content type="html">
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;During my &lt;a href=&quot;https://zbynek.github.io/jenkins.io/order-syntax/projects/gsoc/2019/role-strategy-performance&quot;&gt;Google Summer of Code Project&lt;/a&gt;,
I have created the brand new &lt;a href=&quot;https://plugins.jenkins.io/folder-auth&quot;&gt;Folder Auth Plugin&lt;/a&gt; for easily
managing permissions to projects organized in folders from the &lt;a href=&quot;https://plugins.jenkins.io/cloudbees-folder&quot;&gt;Folders plugin&lt;/a&gt;.
This new plugin is designed for fast permission checks with easy-to-manage roles.
The 1.0 version of the plugin has just been released and can be downloaded
from your Jenkins&#39; Update center.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This plugin was inspired by the &lt;a href=&quot;https://plugins.jenkins.io/role-strategy&quot;&gt;Role Strategy Plugin&lt;/a&gt;
and brings about performance improvements and makes managing roles much easier.
The plugin was developed to overcome performance limitations of the Role Strategy
plugin on a large number of roles. At the same time, the plugin addresses one
of the most popular ways of organizing projects in Jenkins, through folders.
The plugin also has a new UI with more improvements to come in the future.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The plugin supports three types of roles which are applicable at different places
in Jenkins.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Global Roles: applicable everywhere in Jenkins&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Agent Roles: restrict permissions for multiple agents connected to your instance&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Folder Roles: applicable to multiple jobs organized inside folders&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://zbynek.github.io/jenkins.io/order-syntax/images/post-images/gsoc-folder-auth-plugin/folder-auth.png&quot; alt=&quot;Screenshot of the Folder Auth Plugin&quot;&gt;
&lt;/img&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;performance-improvements-over-role-strategy-plugin&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#performance-improvements-over-role-strategy-plugin&quot; /&gt;Performance Improvements over Role Strategy Plugin&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This plugin, unlike the Role Strategy plugin, does not use regular expressions
for finding matching projects and agents giving us performance improvements
and makes administrators&#39; lives easier. To reduce the number of roles required
to be managed, permissions given to a folder through a folder role get inherited
to all of its children. This is useful for giving access to multiple projects
through a single role. Similarly, an agent role can be applied to multiple agents
and assigned to multiple users.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This plugin is designed to outperform Role Strategy Plugin in permission
checks. The improvements were measured using the
&lt;a href=&quot;https://zbynek.github.io/jenkins.io/order-syntax/blog/2019/06/21/performance-testing-jenkins/&quot;&gt;micro-benchmark framework&lt;/a&gt;
I had created during the first phase of my GSoC project.
Benchmarks for identical configurations for both plugin show that the
permissions check are up to 934x faster for 500 global roles when compared to
the global roles from the Role Strategy 2.13, which in itself contains several
performance improvements. Comparing folder roles with Role Strategy’s project
roles, a permission check for access to a job almost 15x faster for 250 projects
organized in two-level deep folders on an instance with 150 users. You can see
the benchmarks and the result comparisons
&lt;a href=&quot;https://github.com/jenkinsci/folder-auth-plugin/pull/13&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;jenkins-configuration-as-code-support&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#jenkins-configuration-as-code-support&quot; /&gt;Jenkins Configuration as Code Support&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The plugin supports Jenkins Configuration-as-Code so you can configure permissions
without going through the Web UI. A YAML configuration looks like this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#606&quot;&gt;jenkins&lt;/span&gt;:
  &lt;span style=&quot;color:#606&quot;&gt;authorizationStrategy&lt;/span&gt;:
    &lt;span style=&quot;color:#606&quot;&gt;folderBased&lt;/span&gt;:
      &lt;span style=&quot;color:#606&quot;&gt;globalRoles&lt;/span&gt;:
        - &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#D20&quot;&gt;name: &quot;admin&quot;&lt;/span&gt;&lt;/span&gt;
          &lt;span style=&quot;color:#606&quot;&gt;permissions&lt;/span&gt;:
            - &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#D20&quot;&gt;id: &quot;hudson.model.Hudson.Administer&quot;&lt;/span&gt;&lt;/span&gt;
              &lt;span style=&quot;color:#777&quot;&gt;# ...&lt;/span&gt;
          &lt;span style=&quot;color:#606&quot;&gt;sids&lt;/span&gt;:
            - &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;admin&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
        - &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#D20&quot;&gt;name: &quot;read&quot;&lt;/span&gt;&lt;/span&gt;
          &lt;span style=&quot;color:#606&quot;&gt;permissions&lt;/span&gt;:
            - &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#D20&quot;&gt;id: &quot;hudson.model.Hudson.Read&quot;&lt;/span&gt;&lt;/span&gt;
          &lt;span style=&quot;color:#606&quot;&gt;sids&lt;/span&gt;:
            - &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;user1&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
      &lt;span style=&quot;color:#606&quot;&gt;folderRoles&lt;/span&gt;:
        - &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#D20&quot;&gt;folders:&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;
            - &quot;root&quot;&lt;/span&gt;&lt;/span&gt;
          &lt;span style=&quot;color:#606&quot;&gt;name&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;viewRoot&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
          &lt;span style=&quot;color:#606&quot;&gt;permissions&lt;/span&gt;:
            - &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#D20&quot;&gt;id: &quot;hudson.model.Item.Read&quot;&lt;/span&gt;&lt;/span&gt;
          &lt;span style=&quot;color:#606&quot;&gt;sids&lt;/span&gt;:
            - &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;user1&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
      &lt;span style=&quot;color:#606&quot;&gt;agentRoles&lt;/span&gt;:
        - &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#D20&quot;&gt;agents:&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;
            - &quot;agent1&quot;&lt;/span&gt;&lt;/span&gt;
          &lt;span style=&quot;color:#606&quot;&gt;name&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;agentRole1&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
          &lt;span style=&quot;color:#606&quot;&gt;permissions&lt;/span&gt;:
            - &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#D20&quot;&gt;id: &quot;hudson.model.Computer.Configure&quot;&lt;/span&gt;&lt;/span&gt;
            - &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#D20&quot;&gt;id: &quot;hudson.model.Computer.Disconnect&quot;&lt;/span&gt;&lt;/span&gt;
          &lt;span style=&quot;color:#606&quot;&gt;sids&lt;/span&gt;:
            - &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;user1&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;rest-apis-with-swagger-support&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#rest-apis-with-swagger-support&quot; /&gt;REST APIs with Swagger support&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The plugin provides REST APIs for managing roles with OpenAPI specifications
through Swagger.json. You can check out the Swagger API on
&lt;a href=&quot;https://app.swaggerhub.com/apis/abhyudaya/folder-auth/1.0.0s&quot;&gt;SwaggerHub&lt;/a&gt;.
SwaggerHub provides stubs in multiple languages which can be downloaded and
used to interact with the plugin. You can also see some sample requests from
the command line using &lt;a href=&quot;https://curl.haxx.se/&quot;&gt;curl&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://zbynek.github.io/jenkins.io/order-syntax/images/post-images/gsoc-folder-auth-plugin/swagger.png&quot; alt=&quot;Screenshot of the APIs on SwaggerHub&quot; height=&quot;500&quot;&gt;
&lt;/img&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://zbynek.github.io/jenkins.io/order-syntax/images/post-images/gsoc-folder-auth-plugin/swagger2.png&quot; alt=&quot;Another Screenshot of the APIs on SwaggerHub&quot; height=&quot;400&quot;&gt;
&lt;/img&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;whats-next&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#whats-next&quot; /&gt;What’s next&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the (not-too-distant) future, I would like to work on improving the UI and
make the plugin easier to work with. I would also like to work on improving the
APIs, documentation and more optimizations for improving the plugin’s performance.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;links-and-feedback&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#links-and-feedback&quot; /&gt;Links and Feedback&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I would love to hear your comments and suggestions. Please feel free to reach
out to me through either the
&lt;a href=&quot;https://gitter.im/jenkinsci/role-strategy-plugin&quot;&gt;Role Strategy Plugin Gitter chat&lt;/a&gt; or through
&lt;a href=&quot;mailto:jenkinsci-dev@googlegroups.com&quot;&gt;Jenkins Developer Mailing list&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://drive.google.com/file/d/1IVe3T8WdTILmb62PAIJveR4KbBWzPt1k/view?usp=sharing&quot;&gt;Presentation slides for second phase evaluations&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/jenkinsci/folder-auth-plugin/blob/master/README.md&quot;&gt;Documentation for the Folder Auth Plugin&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=tAUHfYYQrpo&quot;&gt;Demo of the Folder Authorization plugin&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://zbynek.github.io/jenkins.io/order-syntax/blog/2019/07/30/plugin-management-tool-phase2-updates/</id>
<title>Plugin Management Library and CLI Tool Phase 2 GSoC Updates</title>
<updated>2019-12-12T20:07:24+00:00</updated>
<published>2019-07-30T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://zbynek.github.io/jenkins.io/order-syntax/blog/2019/07/30/plugin-management-tool-phase2-updates/" />
<author>
<name>stopalopa</name>
</author>
<category term="plugins"></category>
<category term="pluginmanagement"></category>
<category term="platform-sig"></category>
<category term="cli"></category>
<category term="gsoc"></category>
<category term="gsoc2019"></category>
<summary>
At end of the first GSoC phase, I
announced
the first alpha release of the CLI tool and library that will help centralize
plugin management and make plugin tooling easier.


Phase 2 has mainly been focused on improving upon the initial CLI and library written
in Coding Phase 1. In particular, we&#8217;ve been focusing on getting the tool ready to
incorporate into the Jenkins Docker Image to replace the
install-plugins.sh bash script
to download plugins.  This work included parsing improvements so that blank lines and comments in the
plugins.txt file are filtered out, allowing update centers and the plugin download
directory to be set via environment variables or CLI...
</summary>
<content type="html">
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;At end of the first &lt;a href=&quot;https://summerofcode.withgoogle.com/&quot;&gt;GSoC&lt;/a&gt; phase, I
&lt;a href=&quot;https://zbynek.github.io/jenkins.io/order-syntax/blog/2019/07/02/plugin-management-tool-alpha-release/&quot;&gt;announced
the first alpha release&lt;/a&gt; of the CLI tool and library that will help centralize
plugin management and make plugin tooling easier.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Phase 2 has mainly been focused on improving upon the initial CLI and library written
in Coding Phase 1. In particular, we’ve been focusing on getting the tool ready to
incorporate into the Jenkins Docker Image to replace the
&lt;a href=&quot;https://github.com/jenkinsci/docker/blob/master/install-plugins.sh&quot;&gt;install-plugins.sh bash script&lt;/a&gt;
to download plugins.  This work included parsing improvements so that blank lines and comments in the
plugins.txt file are filtered out, allowing update centers and the plugin download
directory to be set via environment variables or CLI Options, creating Windows
compatible defaults, and fixing a bug in which dependencies for specific
plugin versions were not always getting resolved correctly.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In parallel to getting the tool ready for Jenkins Docker integration, Phase 2 saw
the addition of several new features.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;yaml-input&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#yaml-input&quot; /&gt;Yaml Input&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In addition to specifying the plugins they want to download via the &lt;code&gt;--plugins&lt;/code&gt;
CLI option or through a .txt file, users can now use a Jenkins yaml file with a
&lt;code&gt;plugins&lt;/code&gt; root element.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Say goodbye to the days of specifying incremental
plugins like &lt;code&gt;incrementals;org.jenkins-ci.plugins.workflow;2.20-rc530.b4f7f7869384&lt;/code&gt; -
  you can enter the artifactId, groupId, and version to specify an incremental plugin.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://zbynek.github.io/jenkins.io/order-syntax/images/post-images/gsoc-plugin-management-tool/yamlexample.png&quot; alt=&quot;Yaml Input Example&quot;&gt;
&lt;/img&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://zbynek.github.io/jenkins.io/order-syntax/images/post-images/gsoc-plugin-management-tool/yamlcli.png&quot; alt=&quot;Yaml CLI Example&quot;&gt;
&lt;/img&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;making-the-download-process-more-transparent&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#making-the-download-process-more-transparent&quot; /&gt;Making the Download Process More Transparent&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Previously, the plugin download process was not very transparent to users - it was
difficult to know the final set of plugins that would be downloaded after pulling in
all the dependencies.  Instead of determing the set of plugins that will be downloaded
at the time of download, users now have the option to see the full set of plugins
and their versions that will be downloaded in advance. With the &lt;code&gt;--list&lt;/code&gt; CLI
option, users can see all currently downloaded and bundled plugins, the set of all
plugins that will be downloaded, and the effective plugin set - the set of all
plugins that are already downloaded or will be downloaded.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://zbynek.github.io/jenkins.io/order-syntax/images/post-images/gsoc-plugin-management-tool/listplugins.png&quot; alt=&quot;List CLI Option Example&quot;&gt;
&lt;/img&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;viewing-information-about-plugins&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#viewing-information-about-plugins&quot; /&gt;Viewing Information About plugins&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now that you know which plugins will be downloaded, wouldn’t it be nice to know
if these are the latest versions or if any of the versions you want to install have
security warnings?  You can do that now too.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://zbynek.github.io/jenkins.io/order-syntax/images/post-images/gsoc-plugin-management-tool/securitywarnings.png&quot; alt=&quot;Security Warning CLI Option Example&quot;&gt;
&lt;/img&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://zbynek.github.io/jenkins.io/order-syntax/images/post-images/gsoc-plugin-management-tool/available-updates.png&quot; alt=&quot;Security Warning CLI Option Example&quot;&gt;
&lt;/img&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;next-steps-and-additional-information&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#next-steps-and-additional-information&quot; /&gt;Next Steps and Additional Information&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The updates mentioned in this blog will be released soon so you can try them out.
The focus of Phase 3 will be to continue to iterate upon and improve the library
and CLI. We hope to release a first version and submit a pull request to Jenkins Docker soon.
Thanks to everyone who has already tried it out and given feedback! I will also be
presenting my work at &lt;a href=&quot;https://www.cloudbees.com/devops-world/san-francisco&quot;&gt;DevOps World&lt;/a&gt;
in San Francisco in a few weeks.  You can use the code PREVIEW for a discounted registration
($799 instead of $1,499).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Feel free to reach out through
the &lt;a href=&quot;https://gitter.im/jenkinsci/plugin-installation-manager-cli-tool&quot;&gt;Plugin Installation Manager CLI Tool Gitter chat&lt;/a&gt; or through
the &lt;a href=&quot;mailto:jenkinsci-dev@googlegroups.com&quot;&gt;Jenkins Developer Mailing list&lt;/a&gt;. I would love to get your questions, comments, and feedback!
We have meetings Tuesdays and Thursdays at 6PM UTC.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.google.com/presentation/d/1wsM09IGgoA7gSsA9tW5fHlFAhl6B9fXlr-4iEP89SCk/edit?usp=sharing&quot;&gt;Phase 2 Presentation Slides&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://youtu.be/HlENuZZq7zc?t=221&quot;&gt;Phase 2 Recorded Demo&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://issues.jenkins-ci.org/browse/JENKINS-58199?jql=project%20%3D%20JENKINS%20AND%20component%20%3D%20plugin-installation-manager-tool&quot;&gt;Jira Issue Search&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/jenkinsci/plugin-installation-manager-tool&quot;&gt;Repository&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://zbynek.github.io/jenkins.io/order-syntax/blog/2019/07/25/azure-artifact-manager/</id>
<title>Managing Jenkins Artifacts with the Azure Artifact Manager Plugin</title>
<updated>2019-12-12T20:07:24+00:00</updated>
<published>2019-07-25T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://zbynek.github.io/jenkins.io/order-syntax/blog/2019/07/25/azure-artifact-manager/" />
<author>
<name>jshen</name>
</author>
<category term="general"></category>
<category term="azure"></category>
<category term="plugin"></category>
<summary>
Jenkins stores all generated artifacts on the master server filesystem. This presents a couple of challenges especially when you try to run Jenkins in the cloud:




As the number of artifacts grow, your Jenkins master will run out of disk space. Eventually, performance can be impacted.


Frequent transfer of files between agents and master may cause load, CPU or network issues which are always hard to diagnose.




Several existing plugins allow you to manage your artifacts externally. To use these plugins, you need to know how they work and perform specific steps in your job&#8217;s configuration. And if you are new to Jenkins,...
</summary>
<content type="html">
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Jenkins stores all generated artifacts on the master server filesystem. This presents a couple of challenges especially when you try to run Jenkins in the cloud:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;As the number of artifacts grow, your Jenkins master will run out of disk space. Eventually, performance can be impacted.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Frequent transfer of files between agents and master may cause load, CPU or network issues which are always hard to diagnose.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Several existing plugins allow you to manage your artifacts externally. To use these plugins, you need to know how they work and perform specific steps in your job’s configuration. And if you are new to Jenkins, you may find it hard to follow existing samples in Jenkins tutorial like &lt;a href=&quot;https://jenkins.io/doc/pipeline/tour/tests-and-artifacts/&quot;&gt;Recording tests and artifacts&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So, if you are running Jenkins in Azure, you can consider automatically managing new artifacts on &lt;a href=&quot;https://azure.microsoft.com/en-us/services/storage/&quot;&gt;Azure Storage&lt;/a&gt;. The new &lt;a href=&quot;https://plugins.jenkins.io/azure-artifact-manager&quot;&gt;Azure Artifact Management plugin&lt;/a&gt; allows you to store artifacts in Azure blob storage and simplify your existing Jenkins jobs that contain Jenkins general artifacts management steps. This approach will give you all the advantages of a cloud storage, with less effort on your part to maintain your Jenkins instance.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;configuration&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#configuration&quot; /&gt;Configuration&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;azure-storage-account&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#azure-storage-account&quot; /&gt;Azure storage account&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;First, you need to have an Azure Storage account. You can skip this section if you already have one. Otherwise, create an Azure storage account for storing your artifacts. Follow this &lt;a href=&quot;https://docs.microsoft.com/en-us/azure/storage/common/storage-quickstart-create-account?tabs=azure-portal&quot;&gt;tutorial&lt;/a&gt; to quickly create one. Then navigate to &lt;strong&gt;Access keys&lt;/strong&gt; in the &lt;strong&gt;Settings&lt;/strong&gt; section to get the storage account name and one of its keys.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image center&quot;&gt;&lt;img src=&quot;https://zbynek.github.io/jenkins.io/order-syntax/images/post-images/2019-07-25-azure-artifact-manager/1-azure-accesskey.png&quot; alt=&quot;1 azure accesskey&quot; /&gt;&lt;/span&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;existing-jenkins-instance&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#existing-jenkins-instance&quot; /&gt;Existing Jenkins instance&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For existing Jenkins instance, make sure you install the &lt;a href=&quot;https://plugins.jenkins.io/azure-artifact-manager&quot;&gt;Azure Artifact Manager&lt;/a&gt; plugin. Then you can go to your Jenkins &lt;em&gt;System Configuration&lt;/em&gt; page and locate the &lt;em&gt;Artifact Management for Builds&lt;/em&gt; section. Select the &lt;strong&gt;Add&lt;/strong&gt; button to configure an Azure Artifact Storage. Fill in the following parameters:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Storage Type:&lt;/strong&gt; Azure storage supports several storage types like blob, file, queue etc. This plugin currently supports blob storage only.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Storage Credentials:&lt;/strong&gt; Credentials used to authenticate with Azure storage. If you do not have an existing Azure storage credential in you Jenkins credential store, click the &lt;strong&gt;Add&lt;/strong&gt; button and choose &lt;strong&gt;Microsoft Azure Storage&lt;/strong&gt; kind to create one.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Azure Container Name:&lt;/strong&gt; The container under which to keep your artifacts. If the container name does not exist in the blob, this plugin automatically creates one for you when artifacts are uploaded to the blob.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Base Prefix:&lt;/strong&gt; Prefix added to your artifact paths stored in your container, a forward slash will be parsed as a folder. In the following screenshot, all your artifacts will be stored in the “staging” folder in the container “Jenkins”.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image center&quot;&gt;&lt;img src=&quot;https://zbynek.github.io/jenkins.io/order-syntax/images/post-images/2019-07-25-azure-artifact-manager/2.configuration.png&quot; alt=&quot;2.configuration&quot; /&gt;&lt;/span&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;new-jenkins-instance&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#new-jenkins-instance&quot; /&gt;New Jenkins instance&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you need to create a new Jenkins master, follow this &lt;a href=&quot;https://docs.microsoft.com/en-us/azure/jenkins/install-jenkins-solution-template&quot;&gt;tutorial&lt;/a&gt; to quickly create an Jenkins instance on Azure. In the &lt;strong&gt;Integration Settings&lt;/strong&gt; section, you can now set up Azure Artifact Manager directly. Note that you can change any of the configuration after your Jenkins instance is created. Azure storage account and credential, in this case, are still prerequisites.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image center&quot;&gt;&lt;img src=&quot;https://zbynek.github.io/jenkins.io/order-syntax/images/post-images/2019-07-25-azure-artifact-manager/3.integration-setting-azure.png&quot; alt=&quot;3.integration setting azure&quot; /&gt;&lt;/span&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;usage&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#usage&quot; /&gt;Usage&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;jenkins-pipeline&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#jenkins-pipeline&quot; /&gt;Jenkins Pipeline&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here are a few commonly used artifact related steps in pipeline jobs; all are supported to push artifacts to the Azure Storage blob specified.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can use &lt;em&gt;archiveArtifacts&lt;/em&gt; step to archive target artifacts into Azure storage. For more details about &lt;em&gt;archiveArtifacts&lt;/em&gt; step, see the Jenkins &lt;a href=&quot;https://jenkins.io/doc/pipeline/steps/core/#archiveartifacts-archive-the-artifacts&quot;&gt;archiveArtifacts setp documentation&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;nowrap&quot;&gt;node {
  //...
  stage(&#39;Archive&#39;) { 
    archiveArtifacts &quot;pattern&quot;
  } 
}&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can use the &lt;em&gt;unarchive&lt;/em&gt; step to retrieve the artifacts from Azure storage. For more details about &lt;em&gt;unarchive&lt;/em&gt; step, please see &lt;a href=&quot;https://jenkins.io/doc/pipeline/steps/workflow-basic-steps/#code-unarchive-code-copy-archived-artifacts-into-the-workspace&quot;&gt;unarchive step documentation&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;nowrap&quot;&gt;node {
  //...
  stage(&#39;Unarchive&#39;) { 
    unarchive mapping: [&quot;pattern&quot;: &#39;.&#39;]
  } 
}&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To save a set of files so that you can use them later in the same build (generally on another node or workspace), you can use &lt;em&gt;stash&lt;/em&gt; step to store files into Azure storage for later use. &lt;em&gt;Stash&lt;/em&gt; step documentation can be found &lt;a href=&quot;https://jenkins.io/doc/pipeline/steps/workflow-basic-steps/#unstash-restore-files-previously-stashed&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;nowrap&quot;&gt;node {
  //...
  stash name: &#39;name&#39;, includes: &#39;*&#39;
}&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can use &lt;em&gt;unstash&lt;/em&gt; step to retrieve the files saved with &lt;em&gt;stash&lt;/em&gt; step from Azure storage to the local workspace.  &lt;em&gt;Unstash&lt;/em&gt; documentation can be found &lt;a href=&quot;https://jenkins.io/doc/pipeline/steps/workflow-basic-steps/#unstash-restore-files-previously-stashed&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;nowrap&quot;&gt;node {
  //...
  unstash &#39;name&#39;
}&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;freestyle-job&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#freestyle-job&quot; /&gt;FreeStyle Job&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For a FreeStyle Jenkins job, you can use &lt;strong&gt;Archive the artifacts&lt;/strong&gt; step in &lt;strong&gt;Post-build Actions&lt;/strong&gt; to upload the target artifacts into Azure storage.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image center&quot;&gt;&lt;img src=&quot;https://zbynek.github.io/jenkins.io/order-syntax/images/post-images/2019-07-25-azure-artifact-manager/4.post-build-actions.png&quot; alt=&quot;4.post build actions&quot; /&gt;&lt;/span&gt;
&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This Azure Artifact Manager plugin is also compatible with some other popular management plugins, such as the &lt;a href=&quot;https://plugins.jenkins.io/copyartifact&quot;&gt;Copy Artifact&lt;/a&gt; plugin. You can still use these plugins without changing anything.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image center&quot;&gt;&lt;img src=&quot;https://zbynek.github.io/jenkins.io/order-syntax/images/post-images/2019-07-25-azure-artifact-manager/5-build.png&quot; alt=&quot;5 build&quot; /&gt;&lt;/span&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;troubleshooting&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#troubleshooting&quot; /&gt;Troubleshooting&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you have any problems or suggestions when using Azure Artifact Manager plugin, you can file a ticket on &lt;a href=&quot;https://issues.jenkins-ci.org/secure/Dashboard.jspa&quot;&gt;Jenkins JIRA&lt;/a&gt; for the azure-artifact-manager-plugin component.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#conclusion&quot; /&gt;Conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;a href=&quot;https://plugins.jenkins.io/azure-artifact-manager&quot;&gt;Azure Artifact Manager&lt;/a&gt; enables a more cloud-native Jenkins. This is the first step in the &lt;a href=&quot;https://jenkins.io/sigs/cloud-native/&quot;&gt;Cloud Native project&lt;/a&gt;. We have a long way to go to get Jenkins to run on cloud environments as a true “Cloud Native” application. We need help and welcome your participation and contributions to make Jenkins better. Please start contributing and/or give us feedback!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://zbynek.github.io/jenkins.io/order-syntax/blog/2019/07/21/Jenkins-code-coverage-diff-for-pull-request/</id>
<title>Jenkins code coverage diff in pull requests</title>
<updated>2019-12-12T20:07:24+00:00</updated>
<published>2019-07-21T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://zbynek.github.io/jenkins.io/order-syntax/blog/2019/07/21/Jenkins-code-coverage-diff-for-pull-request/" />
<author>
<name>asavanchuk</name>
</author>
<category term="plugins"></category>
<category term="codecoverage"></category>
<summary>
Hello.


As you may know, during the last year GSoC Mr. Shenyu Zheng was working on the Jenkins Code Coverage API Plugin. With Mr. Zheng we made a change so the plugin now is able to check the difference in code coverage between pull requests and target branches.


In lots of projects it is a common practice to track if unit tests code coverage doesn&#8217;t decrease. So, with this plugin, you may skip separate services that track code coverage and have this feature right in your favorite CI system.


How it works


When you build a PR in Jenkins, using plugins like Github or...
</summary>
<content type="html">
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Hello.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As you may know, during the last year GSoC &lt;a href=&quot;https://github.com/cizezsy&quot;&gt;Mr. Shenyu Zheng&lt;/a&gt; was working on the &lt;a href=&quot;https://zbynek.github.io/jenkins.io/order-syntax/projects/gsoc/2018/code-coverage-api-plugin/&quot;&gt;Jenkins Code Coverage API Plugin&lt;/a&gt;. With Mr. Zheng we made a change so the plugin now is able to check the difference in code coverage between pull requests and target branches.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In lots of projects it is a common practice to track if unit tests code coverage doesn’t decrease. So, with this plugin, you may skip separate services that track code coverage and have this feature right in your favorite CI system.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;how-it-works&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#how-it-works&quot; /&gt;How it works&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When you build a PR in Jenkins, using plugins like &lt;a href=&quot;https://plugins.jenkins.io/github&quot;&gt;Github&lt;/a&gt; or &lt;a href=&quot;https://plugins.jenkins.io/cloudbees-bitbucket-branch-source&quot;&gt;Bitbucket Branch Source&lt;/a&gt;, that use &lt;a href=&quot;https://wiki.jenkins.io/display/JENKINS/SCM+API+Plugin&quot;&gt;SCM API Plugin&lt;/a&gt;, your PR knows what target branch commit it is based on. (The commit may change because of &lt;em&gt;Discover pull requests from origin&lt;/em&gt; strategies). To calculate the diff, when you publish your coverage from PR, it looks for the target branch build for the commit that your PR was based on. If it finds the build on the target branch, it looks for any published code coverage for this target branch build. In case the build has it, the plugin calculates the percentage diff for the &lt;strong&gt;line coverage&lt;/strong&gt; and shows it on the pull request build page. Also, it gives you a link to the target branch build that was used for the comparison.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;That it how it looks like:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Decreased coverage&lt;/div&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://zbynek.github.io/jenkins.io/order-syntax/images/post-images/2019-07-21-Jenkins-code-coverage-diff-for-pull-request/decrease.png&quot; alt=&quot;decrease&quot; /&gt;&lt;/span&gt;
&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Increased coverage&lt;/div&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://zbynek.github.io/jenkins.io/order-syntax/images/post-images/2019-07-21-Jenkins-code-coverage-diff-for-pull-request/increase.png&quot; alt=&quot;increase&quot; /&gt;&lt;/span&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;how-to-enable-code-coverage-diff-for-pull-requests&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#how-to-enable-code-coverage-diff-for-pull-requests&quot; /&gt;How to enable code coverage diff for pull requests&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To enable this behavior you need to publish your code coverage with the &lt;code&gt;calculateDiffForChangeRequests&lt;/code&gt; flag equals &lt;code&gt;true&lt;/code&gt;, like this:
.Jenkinsfile&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;groovy&quot;&gt;node(...) {
  ...
  &lt;span style=&quot;color:#777&quot;&gt;// Here we are using the istanbulCoberturaAdapter&lt;/span&gt;
  publishCoverage &lt;span style=&quot;color:#606&quot;&gt;adapters&lt;/span&gt;: [istanbulCoberturaAdapter(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;cobertura-coverage.xml&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;)],
    &lt;span style=&quot;color:#606&quot;&gt;sourceFileResolver&lt;/span&gt;: sourceFiles(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;NEVER_STORE&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;),
    &lt;span style=&quot;color:#606&quot;&gt;calculateDiffForChangeRequests&lt;/span&gt;: &lt;span style=&quot;color:#069&quot;&gt;true&lt;/span&gt;

  ...
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;links-and-feedback&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#links-and-feedback&quot; /&gt;Links and Feedback&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you have some questions about this behavior, please ask me &lt;a href=&quot;mailto:dntsaygoodbye@gmail.com&quot;&gt;in email&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You are free to contribute to this plugin to make it better for everyone. There are a lot of interesting features that can be added and issues that can be solved. Also, you can write some new plugins for other code coverage formats that use the Code Coverage API plugin as a base.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here is the repo of the plugin - &lt;a href=&quot;https://github.com/jenkinsci/code-coverage-api-plugin&quot;&gt;Code Coverage API Plugin&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Thank you.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://zbynek.github.io/jenkins.io/order-syntax/blog/2019/07/17/DevOps-World-Jenkins-World-2019-San-Francisco-Lunch-Demos/</id>
<title>DevOps World - Jenkins World 2019 San Francisco: Lunch Time Demos</title>
<updated>2019-12-12T20:07:24+00:00</updated>
<published>2019-07-17T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://zbynek.github.io/jenkins.io/order-syntax/blog/2019/07/17/DevOps-World-Jenkins-World-2019-San-Francisco-Lunch-Demos/" />
<author>
<name>alyssat</name>
</author>
<category term="event"></category>
<category term="devopsworldjenkinsworld2019"></category>
<summary>
If you’re looking for more opportunities to learn Jenkins and Jenkins X during the lunch hours while at DevOps World - Jenkins World 2019 San Francisco, come join us at the Jenkins and Jenkins X Community Booth!


If you don&#8217;t yet have your pass for DevOps World - Jenkins World 2019 San Francisco, and don&#8217;t want to miss out on the fun, you can get yours using JWFOSS for a 30% discount.


During lunch hours we are scheduling the following demo briefs at the Jenkins and Jenkins X Community Booth:


Wednesday  August 14, 2019

12:10 - 12:25pm 	Faster Git	Mark Waite

Attendees will learn the...
</summary>
<content type="html">
&lt;div class=&quot;imageblock center center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://zbynek.github.io/jenkins.io/order-syntax/images/post-images/dwjw-2019/2019-dwjw-email-san-fran-rev.png&quot; alt=&quot;2019 dwjw email san fran&quot; height=&quot;256&quot;&gt;
&lt;/img&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you’re looking for more opportunities to learn Jenkins and Jenkins X during the lunch hours while at &lt;a href=&quot;https://www.cloudbees.com/devops-world/san-francisco&quot;&gt;&lt;strong&gt;DevOps World - Jenkins World 2019 San Francisco&lt;/strong&gt;&lt;/a&gt;, come join us at the Jenkins and Jenkins X Community Booth!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you don’t yet have your pass for &lt;a href=&quot;https://www.cloudbees.com/devops-world/san-francisco&quot;&gt;&lt;strong&gt;DevOps World - Jenkins World 2019 San Francisco&lt;/strong&gt;&lt;/a&gt;, and don’t want to miss out on the fun, you can get yours using &lt;strong&gt;JWFOSS&lt;/strong&gt; for a 30% discount.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;During lunch hours we are scheduling the following demo briefs at the Jenkins and Jenkins X Community Booth:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;wednesday-august-14-2019&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#wednesday-august-14-2019&quot; /&gt;Wednesday  August 14, 2019&lt;/h3&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;1210-1225pm-faster-gitmark-waite&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#1210-1225pm-faster-gitmark-waite&quot; /&gt;12:10 - 12:25pm 	Faster Git	&lt;a href=&quot;https://github.com/MarkEWaite&quot;&gt;Mark Waite&lt;/a&gt;&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Attendees will learn the techniques they can use with Jenkins to make their systems clone and update git repositories faster and with less disc space.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;1225-1240pmobservability-in-jenkins-xoscar-medina&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#1225-1240pmobservability-in-jenkins-xoscar-medina&quot; /&gt;12:25 - 12:40pm	Observability in Jenkins X	&lt;a href=&quot;https://github.com/sharepointoscar&quot;&gt;Oscar Medina&lt;/a&gt;&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are using Jenkins X, you’re already building at rapid pace.  However, most miss the opportunity to gain real insights into their build and release pipeline.  I’ll show you how you can increase observability by activating metric capture and analysis during a containerized application deployment with Jenkins X.  This  entails modifying the declarative Tekton pipelines.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;1240-1255pmfrom-setup-to-build-status-on-the-command-linemartin-danjou&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#1240-1255pmfrom-setup-to-build-status-on-the-command-linemartin-danjou&quot; /&gt;12:40 - 12:55pm	From setup to build status on the command line	&lt;a href=&quot;https://github.com/martinda&quot;&gt;Martin d’Anjou&lt;/a&gt;&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Using bash, groovy, &lt;a href=&quot;https://github.com/jenkinsci/configuration-as-code-plugin&quot;&gt;JCasC&lt;/a&gt; and the &lt;a href=&quot;https://github.com/cdancy/jenkins-rest&quot;&gt;jenkins-rest&lt;/a&gt;, we demonstrate how to setup Jenkins from scratch, upload a configuration as code yaml file, create folders and jobs, run a build, and track it to its completion, all from the command line, without ever touching the GUI.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;1255-110pmdevops-without-quality-an-it-horror-storylaura-keaton&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#1255-110pmdevops-without-quality-an-it-horror-storylaura-keaton&quot; /&gt;12:55 - 1:10pm		DevOps without Quality: An IT Horror Story	Laura Keaton&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;DevOps, the current IT Industry sweetheart, has a dark secret that has victimized organizations on their transformational journey. Investigate two case studies that left development and delivery teams in tatters and how quality engineering solutions could have prevented their disastrous outcomes.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;110-125pmsecuring-your-jenkins-container-pipeline-with-open-source-toolschristian-wiens&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#110-125pmsecuring-your-jenkins-container-pipeline-with-open-source-toolschristian-wiens&quot; /&gt;1:10 - 1:25pm	Securing Your Jenkins Container Pipeline with Open Source Tools	&lt;a href=&quot;https://github.com/cwiens1211&quot;&gt;Christian Wiens&lt;/a&gt;&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Discuss the security pitfalls of containers and how embedding an open source image scanning and policy based compliance tool like Anchore into your CI/CD pipeline can mitigate this risk.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;thursday-august-15-2019&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#thursday-august-15-2019&quot; /&gt;Thursday  August 15, 2019&lt;/h3&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;1225-1235pmresults-from-the-2019-jenkins-google-summer-of-codemartin-danjou&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#1225-1235pmresults-from-the-2019-jenkins-google-summer-of-codemartin-danjou&quot; /&gt;12:25 - 12:35pm	Results from the 2019 Jenkins Google Summer of Code	&lt;a href=&quot;https://github.com/martinda&quot;&gt;Martin d’Anjou&lt;/a&gt;&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In 2019, the Jenkins project participated in the Google Summer of Code. This is an annual, international, program which encourages college-aged students to participate in open source projects during the summer break between classes. In 2019, we had dozens of applications and many student projects. In this session, we will showcase the students&#39; projects and talk about what they bring to the Jenkins ecosystem.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;1235-1245pmplugin-installation-cli-toolnatasha-stopa&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#1235-1245pmplugin-installation-cli-toolnatasha-stopa&quot; /&gt;12:35 - 12:45pm		Plugin installation CLI Tool		&lt;a href=&quot;https://github.com/stopalopa&quot;&gt;Natasha Stopa&lt;/a&gt;&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This talk will demo the new plugin installation tool done as part of a Google Summer of Code project. It will show the CLI features and how the library has been incorporated into other areas of Jenkins.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;1245-1255pmsysdig-secure-jenkins-pluginmarky-jackson&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#1245-1255pmsysdig-secure-jenkins-pluginmarky-jackson&quot; /&gt;12:45 - 12:55pm		Sysdig Secure Jenkins Plugin		&lt;a href=&quot;https://github.com/markyjackson-taulia&quot;&gt;Marky Jackson&lt;/a&gt;&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://sysdig.com/products/secure&quot;&gt;Sysdig Secure&lt;/a&gt; is a container security platform that brings together docker image scanning and run-time protection to identify vulnerabilities, block threats, enforce compliance, and audit activity across your microservices. The Sysdig Secure Jenkins plugin can be used in a Pipeline job, or added as a build step to a Freestyle job, to automate the process of running an image analysis, evaluating custom policies against images, and performing security scans.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;1255-110pmusing-react-for-plugin-uijeff-pearce&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#1255-110pmusing-react-for-plugin-uijeff-pearce&quot; /&gt;12:55 - 1:10pm		Using React for plugin UI	&lt;a href=&quot;https://github.com/jeffpearce&quot;&gt;Jeff Pearce&lt;/a&gt;&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The working hours plugin has a date driven UI. During this summer’s Google Summer of Code, our student rewrite the UI in React, so that we could take advantage open source modules such as calendar pickers. I’ll talk about how the student approached the UI, demonstrate the UI and talk about particular challenges we faces.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;110-125pmjenkins-gke-plugincraig-barber&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#110-125pmjenkins-gke-plugincraig-barber&quot; /&gt;1:10 - 1:25pm		Jenkins GKE Plugin	&lt;a href=&quot;https://github.com/craigdbarber&quot;&gt;Craig Barber&lt;/a&gt;&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this demo we will showcase the Jenkins GKE plugin, newest addition to GCP’s suite of officially supported plugins. We’ll show how to leverage this plugin to deploy applications built in Jenkins pipelines to multiple clusters running in GKE.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Grab your lunch and join us at the community theater!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://zbynek.github.io/jenkins.io/order-syntax/blog/2019/07/15/pipeline-config-history-plugin/</id>
<title>Introducing the Pipeline Configuration History Plugin</title>
<updated>2019-12-12T20:07:24+00:00</updated>
<published>2019-07-15T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://zbynek.github.io/jenkins.io/order-syntax/blog/2019/07/15/pipeline-config-history-plugin/" />
<category term="pipeline"></category>
<category term="plugins"></category>
<summary>
Pipelines are the efficient and modern way how to create jobs in Jenkins.
To recognize pipeline changes quickly and easily, we developed the Pipeline Configuration History plugin.
This plugin detects changes of pipelines and provides the user an option to view changes between two builds (diffs) of pipeline configurations visibly and traceably.


How everything started


It all started 10 years ago&#8201;&#8212;&#8201;with classical job types (e.g. Freestyle, Maven, etc.).
Every once in a while users contacted us because their jobs failed to build overnight.
Why did the job fail?
Was the failure related to a job configuration change?
The users' typical answer was: "We didn&#8217;t change anything!", but is...
</summary>
<content type="html">
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://jenkins.io/doc/book/pipeline/&quot;&gt;Pipelines&lt;/a&gt; are the efficient and modern way how to create jobs in Jenkins.
To recognize pipeline changes quickly and easily, we developed the &lt;a href=&quot;https://plugins.jenkins.io/pipeline-config-history&quot;&gt;Pipeline Configuration History&lt;/a&gt; plugin.
This plugin detects changes of pipelines and provides the user an option to view changes between two builds (diffs) of pipeline configurations visibly and traceably.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;how-everything-started&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#how-everything-started&quot; /&gt;How everything started&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It all started 10 years ago — with classical job types (e.g. Freestyle, Maven, etc.).
Every once in a while users contacted us because their jobs failed to build overnight.
Why did the job fail?
Was the failure related to a job configuration change?
The users&#39; typical answer was: &quot;We didn’t change anything!&quot;, but is that really true?
We thought about this and decided to develop a plugin that helped us solve this problem.
This was the idea and the beginning of &lt;a href=&quot;https://plugins.jenkins.io/jobConfigHistory&quot;&gt;Job Configuration History&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now it was possible to view changes of job configurations (like other branches, JDK versions, etc.) and more often the reason for breaking builds were changes of job configurations.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://zbynek.github.io/jenkins.io/order-syntax/images/post-images/2019-07-pipeline-config-history/Diff_2.6.png&quot; alt=&quot;Screenshot of Job Configuration History&quot;&gt;
&lt;/img&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Over the years the plugin got developed and is still under development.
New functions were added, that not only view job configurations, but also changes of global and agent configurations.
It is also possible to recover old configuration versions.
Today the plugin has more than 30,000 installations.
For many years JobConfigHistory relieves our daily work — with more than 3,000 Jenkins jobs!
Then there was a new type of job: &lt;strong&gt;Pipelines&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;pipelines-something-new-was-needed&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#pipelines-something-new-was-needed&quot; /&gt;Pipelines - something new was needed&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Pipeline jobs are fundamentally different than classical job types .
While classic job types are configured via the Jenkins GUI, Pipeline jobs are configured as code.
Every pipeline job indeed gets created via the Jenkins GUI, however that is not necessarily where the pipeline configuration is located.
Pipelines can be configured:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Directly in the Jenkins job as script.
The code gets inserted directly in the job configuration page.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;As Jenkinsfile in the source code management system (SCM): The pipeline configuration is defined in a text file (Jenkinsfile) in the SCM.
In the job itself only the path to the repository of the Jenkinsfile is configured.
During the build the Jenkinsfile gets checked out from the SCM and processed.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;As a shared library: A part of the pipeline configuration gets moved to separate files that can be used by several jobs.
These files are also saved in the SCM.
Even so a Jenkinsfile is still needed (or a pipeline script in the job).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With every save operation of the job configuration, JobConfigHistory creates a copy of the actual job configuration if something has changed.
That only works for pipeline jobs if the pipeline configuration is inserted in the job configuration page as script.
Changes in the Jenkinsfile or the shared libraries are not detected by JobConfigHistory.
You have to use the SCM system to view changes of the Jenkinsfile or the shared libraries.
It is complex and time intensive to find a correlation between the time of a build and a change to the Jenkinsfile or shared library.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This new problem is much more than JobConfigHistory.  A new solution was needed to detect pipeline changes and show these changes in Jenkins.
So we developed Pipeline Configuration History.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;During every pipeline run the Jenkinsfile and related shared libraries are saved in the &lt;code&gt;builds&lt;/code&gt; directory of the job.
Pipeline Configuration History saves changes of the pipeline files between the last run and the previous run as history events.
Therefore when a pipeline job ceases to build successfully, you can check if something has changed on any used pipeline file.
You can also see the build where changes occurred.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://zbynek.github.io/jenkins.io/order-syntax/images/post-images/2019-07-pipeline-config-history/image2019-5-15_13-44-54.png&quot; alt=&quot;Screenshot of Pipeline Configuration History&quot;&gt;
&lt;/img&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Because a pipeline configuration can consist of several files where changes could have occurred, only files with changes between two builds are shown in the diff.
That makes the whole thing more compact and effective:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://zbynek.github.io/jenkins.io/order-syntax/images/post-images/2019-07-pipeline-config-history/image2019-5-15_14-5-13.png&quot; alt=&quot;Screenshot of Pipeline Configuration History&quot;&gt;
&lt;/img&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;But sometimes you may want to show more than the differences between pipeline files.  You may want to see which pipeline files are in use or the content of those files when they were used.
So it’s possible to view all files and their content.
If required you can download them as well:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://zbynek.github.io/jenkins.io/order-syntax/images/post-images/2019-07-pipeline-config-history/image2019-5-15_14-11-7.png&quot; alt=&quot;Screenshot of Pipeline Configuration History&quot;&gt;
&lt;/img&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#conclusion&quot; /&gt;Conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We use Pipeline Configuration History successfully in production. It has helped us from the very first day as we solved problems that occurred due to pipeline configuration changes.
Pipeline Configuration History won’t replace Job Configuration History.
The plugins have different use cases.
Many times small changes on job or pipeline configurations also have big impacts.
Because of the correlation in time between changes of job or pipeline configurations and different build behavior, it is now possible to substantially reduce the time and effort to analyze build failures.
The Job Configuration History and Pipeline Configuration History plugins let us help our users in consulting and in solving issues.  We resolve problems much faster through easy access to the configuration history of jobs.  These plugins are essential for our daily work.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://zbynek.github.io/jenkins.io/order-syntax/blog/2019/07/11/remoting-kafka-kubernetes-phase-1/</id>
<title>Remoting over Apache Kafka plugin with Kafka launcher in Kubernetes</title>
<updated>2019-12-12T20:07:24+00:00</updated>
<published>2019-07-11T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://zbynek.github.io/jenkins.io/order-syntax/blog/2019/07/11/remoting-kafka-kubernetes-phase-1/" />
<author>
<name>longnguyen</name>
</author>
<category term="remoting"></category>
<category term="kafka"></category>
<category term="kubernetes"></category>
<category term="helm"></category>
<category term="developer"></category>
<category term="gsoc"></category>
<category term="gsoc2019"></category>
<summary>
I am Long Nguyen from FPT University, Vietnam. My project for Google Summer of Code 2019 is Remoting over Apache Kafka with Kubernetes features. This is the first time I have contributed for Jenkins and I am very excited to announce the features that have been done in Phase 1.




Project Introduction


Current version of Remoting over Apache Kafka plugin requires users to manually configure the entire system which includes Zookeeper, Kafka and remoting agents. It also doesn&#8217;t support dynamic agent provisioning so scalability is harder to achieve. My project aims to solve two problems:




Out-of-the-box solution to provision Apache Kafka cluster.


Dynamic agent...
</summary>
<content type="html">
&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I am Long Nguyen from FPT University, Vietnam. My project for Google Summer of Code 2019 is &lt;a href=&quot;https://jenkins.io/projects/gsoc/2019/remoting-over-apache-kafka-docker-k8s-features/&quot;&gt;Remoting over Apache Kafka with Kubernetes features&lt;/a&gt;. This is the first time I have contributed for Jenkins and I am very excited to announce the features that have been done in Phase 1.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;project-introduction&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#project-introduction&quot; /&gt;Project Introduction&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Current version of &lt;a href=&quot;https://github.com/jenkinsci/remoting-kafka-plugin&quot;&gt;Remoting over Apache Kafka plugin&lt;/a&gt; requires users to manually configure the entire system which includes Zookeeper, Kafka and remoting agents. It also doesn’t support dynamic agent provisioning so scalability is harder to achieve. My project aims to solve two problems:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Out-of-the-box solution to provision Apache Kafka cluster.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Dynamic agent provisioning in a Kubernetes cluster.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;current-state&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#current-state&quot; /&gt;Current State&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Kubernetes connector with credentials supported.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Apache Kafka provisioning in Kubernetes feature is fully implemented.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Helm chart is partially implemented.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;apache-kafka-provisioning-in-kubernetes&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#apache-kafka-provisioning-in-kubernetes&quot; /&gt;Apache Kafka provisioning in Kubernetes&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This feature is part of 2.0 version so it is not yet released officially. You can try out the feature by using the &lt;a href=&quot;https://jenkins.io/doc/developer/publishing/releasing-experimental-updates/&quot;&gt;Experimental Update Center&lt;/a&gt; to update to &lt;code&gt;2.0.0-alpha&lt;/code&gt; version or building directly from master branch:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;bash&quot;&gt;git clone https://github.com/jenkinsci/remoting-kafka-plugin.git
cd remoting-kafka-plugin/plugin
mvn hpi:run&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On the Global Configuration page, users can input Kubernetes server information and credentials. Then they can start Apache Kafka with only one button click.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://zbynek.github.io/jenkins.io/order-syntax/images/post-images/remoting-kafka/kafka-provisioning-kubernetes-ui.png&quot; alt=&quot;Kafka provisioning in Kubernetes UI&quot; /&gt;&lt;/span&gt;
&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When users click &lt;code&gt;Start Kafka on Kubernetes&lt;/code&gt; button, Jenkins will create a Kubernetes client from the information and then apply Zookeeper and Kafka YAML specification files from &lt;code&gt;resources&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://zbynek.github.io/jenkins.io/order-syntax/images/post-images/remoting-kafka/kafka-provisioning-kubernetes-architecture.png&quot; alt=&quot;Kafka provisioning in Kubernetes architecture&quot; /&gt;&lt;/span&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;helm-chart&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#helm-chart&quot; /&gt;Helm Chart&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Helm chart for Remoting over Apache Kafka plugin is based on &lt;a href=&quot;https://github.com/helm/charts/tree/master/stable/jenkins&quot;&gt;stable/jenkins&lt;/a&gt; chart and &lt;a href=&quot;https://github.com/helm/charts/tree/master/incubator/kafka&quot;&gt;incubator/kafka&lt;/a&gt; chart. As of now, the chart is still a &lt;a href=&quot;https://github.com/jenkinsci/remoting-kafka-plugin/pull/62&quot;&gt;Work in Progress&lt;/a&gt; because it is still waiting for Cloud API implementation in Phase 2. However, you can check out the demo chart with a single standalone Remoting Kafka Agent:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;bash&quot;&gt;git clone -b demo-helm-phase-1 https://github.com/longngn/remoting-kafka-plugin.git
cd remoting-kafka-plugin
K8S_NODE=&amp;lt;your Kubernetes node IP&amp;gt; ./helm/jenkins-remoting-kafka/do.sh start&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The command &lt;code&gt;do.sh start&lt;/code&gt; will do the following steps:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Install the chart (with Jenkins and Kafka).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Launch a Kafka computer on Jenkins master by applying the following JCasC.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#606&quot;&gt;jenkins&lt;/span&gt;:
  &lt;span style=&quot;color:#606&quot;&gt;nodes&lt;/span&gt;:
    - &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#D20&quot;&gt;permanent:&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;
        name: &quot;test&quot;
        remoteFS: &quot;/home/jenkins&quot;
        launcher:
          kafka: {}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Launch a single Remoting Kafka Agent pod.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can check the chart state by running &lt;code&gt;kubectl&lt;/code&gt;, for example:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;bash&quot;&gt;$ kubectl get all -n demo-helm
NAME                                    READY   STATUS    RESTARTS   AGE
pod/demo-jenkins-998bcdfd4-tjmjs        2/2     Running   0          6m30s
pod/demo-jenkins-remoting-kafka-agent   1/1     Running   0          4m10s
pod/demo-kafka-0                        1/1     Running   0          6m30s
pod/demo-zookeeper-0                    1/1     Running   0          6m30s

NAME                              TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)                      AGE
service/demo-0-external           NodePort    10.106.254.187   &amp;lt;none&amp;gt;        19092:31090/TCP              6m30s
service/demo-jenkins              NodePort    10.101.84.33     &amp;lt;none&amp;gt;        8080:31465/TCP               6m31s
service/demo-jenkins-agent        ClusterIP   10.97.169.65     &amp;lt;none&amp;gt;        50000/TCP                    6m31s
service/demo-kafka                ClusterIP   10.106.248.10    &amp;lt;none&amp;gt;        9092/TCP                     6m30s
service/demo-kafka-headless       ClusterIP   None             &amp;lt;none&amp;gt;        9092/TCP                     6m30s
service/demo-zookeeper            ClusterIP   10.109.222.63    &amp;lt;none&amp;gt;        2181/TCP                     6m30s
service/demo-zookeeper-headless   ClusterIP   None             &amp;lt;none&amp;gt;        2181/TCP,3888/TCP,2888/TCP   6m31s

NAME                           READY   UP-TO-DATE   AVAILABLE   AGE
deployment.apps/demo-jenkins   1/1     1            1           6m30s

NAME                                     DESIRED   CURRENT   READY   AGE
replicaset.apps/demo-jenkins-998bcdfd4   1         1         1       6m30s

NAME                              READY   AGE
statefulset.apps/demo-kafka       1/1     6m30s
statefulset.apps/demo-zookeeper   1/1     6m30s&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;next-phase-plan&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#next-phase-plan&quot; /&gt;Next Phase Plan&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Implement Cloud API to provision Remoting Kafka Agent. (&lt;a href=&quot;https://issues.jenkins-ci.org/browse/JENKINS-57668&quot;&gt;JENKINS-57668&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Integrate Cloud API implementation with Helm chart. (&lt;a href=&quot;https://issues.jenkins-ci.org/browse/JENKINS-58288&quot;&gt;JENKINS-58288&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Unit tests and integration tests.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Release version 2.0 and address feedbacks. (&lt;a href=&quot;https://issues.jenkins-ci.org/browse/JENKINS-58289&quot;&gt;JENKINS-58289&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;links&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#links&quot; /&gt;Links&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://youtu.be/MDs0Vr7gnnA?t=2601&quot;&gt;Phase 1 Demo Video&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.google.com/presentation/d/1yIPwwL7P051XaSE2EOJYAtbVsd6YvGvvKp9QcJE4J1Y/edit?usp=sharing&quot;&gt;Phase 1 Presentation Slides&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/jenkinsci/remoting-kafka-plugin&quot;&gt;Remoting over Apache Kafka plugin&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://jenkins.io/projects/gsoc/2019/remoting-over-apache-kafka-docker-k8s-features/&quot;&gt;Project Page&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://gitter.im/jenkinsci/remoting&quot;&gt;Gitter Channel&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://zbynek.github.io/jenkins.io/order-syntax/blog/2019/07/09/Phase1-Updates-On-Working-Hours-Plugin/</id>
<title>GSOC Phase 1 Updates On Working Hours Plugin</title>
<updated>2019-12-12T20:07:24+00:00</updated>
<published>2019-07-09T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://zbynek.github.io/jenkins.io/order-syntax/blog/2019/07/09/Phase1-Updates-On-Working-Hours-Plugin/" />
<author>
<name>jackshen</name>
</author>
<category term="react"></category>
<category term="plugins"></category>
<category term="gsoc"></category>
<category term="gsoc2019"></category>
<summary>
The Working Hour Plugin provides an interface to set up a schedule of allowable build days and times.  Jobs that run outside of configured working hours are held until the next allowable build time.


For the first code phase at Google Summer of Code, I&#8217;ve been working on Working Hours Project, which needed improvements on usability.


Rather than classical Jelly pages, React seems to be more prefered when we want to design a much customized UI with a huge amount of libraries we could use, especially the open source components such as date pickers.


But we have to face a challenge of...
</summary>
<content type="html">
&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Working Hour Plugin provides an interface to set up a schedule of allowable build days and times.  Jobs that run outside of configured working hours are held until the next allowable build time.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For the first code phase at Google Summer of Code, I’ve been working on &lt;a href=&quot;https://zbynek.github.io/jenkins.io/order-syntax/projects/gsoc/2019/working-hours-improvements/&quot;&gt;Working Hours Project&lt;/a&gt;, which needed improvements on usability.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Rather than classical Jelly pages, React seems to be more prefered when we want to design a much customized UI with a huge amount of libraries we could use, especially the open source components such as date pickers.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;But we have to face a challenge of the integration of React and Jenkins, which I’m currently working on.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;achievements-for-the-first-code-phase&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#achievements-for-the-first-code-phase&quot; /&gt;Achievements For The First Code Phase&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For the first code phase, we are focusing on the UI improvements, we’ve achieved following major improvements:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A standalone webapp which could be then integrated.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Slider for choosing a time range.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;More fields when setting a excluded date.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Presets for choosing a excluded date.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A Jenkins styling UI.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;how-we-integrate-react-into-jenkins&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#how-we-integrate-react-into-jenkins&quot; /&gt;How We Integrate React Into Jenkins&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A solution doc for integration could be found at
&lt;a href=&quot;https://drive.google.com/open?id=1JLRCDg9JNBWR0Dfq8w3pTI9mrl6i9JU29pBoH6bO0J8&quot; class=&quot;bare&quot;&gt;https://drive.google.com/open?id=1JLRCDg9JNBWR0Dfq8w3pTI9mrl6i9JU29pBoH6bO0J8&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;At first, we found BlueOcean is a great example for using React in Jenkins, but yet it’s not a choice for common development with plugins. So we need to find out another way to integrate.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here are the steps to do the integration:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A mount point in your jelly file, usually it’s a element with a unique &lt;code&gt;id&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Write your React Application, but need to set the mount point to the id you set above.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Copy the output after you build the Project into the plugin’s webapp dir.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Add your files using a script tag in your jelly file.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;nowrap&quot;&gt;&amp;lt;script type=&quot;text/javascript&quot;
        src=&quot;${resURL}/plugin/working-hours/js/main.js&quot;&amp;gt;&amp;lt;/script&amp;gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Once we are using React, the traditional jelly request won’t be available anymore, another way to process requests will be using stapler. You can define a process function like below.
[source, java]&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;nowrap&quot;&gt;public HttpResponse doDynamic(StaplerRequest request) {
        if (config == null) {
            config = ExtensionList.lookup(WorkingHoursPlugin.class).get(0);
        }
        String restOfPath = request.getRestOfPath();
        String[] pathTokens = restOfPath.split(&quot;/&quot;);
        List&amp;lt;String&amp;gt; params = new ArrayList&amp;lt;&amp;gt;();
        switch (params.get(0)) {
            case &quot;list-excluded-dates&quot;:
                return listExcludedDate(request);
            case &quot;set-excluded-dates&quot;:
                return setExcludedDates(request);
            case &quot;list-time-ranges&quot;:
                return listTimeRanges(request);
            case &quot;set-time-ranges&quot;:
                return setTimeRanges(request);
        }
    }&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;run-our-application&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#run-our-application&quot; /&gt;Run Our Application&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you would like to take a look at our plugin, you can go to the repo
&lt;a href=&quot;https://github.com/jenkinsci/working-hours-plugin/tree/dev&quot;&gt;working-hours-plugin&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Just follow the README file, then you could run a copy of your working hours plugin.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;screenshots&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#screenshots&quot; /&gt;Screenshots&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The current plugin’s outlook is a bit simple and the plugin is a bit unconvinient for use.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;One of the problems is that if we want to input a excluded date, it’ll be a string in a constant format like 15/9/2019, but the new UI choosed React so we could use a datepicker to improve this.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;current-plugin&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#current-plugin&quot; /&gt;Current Plugin&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://zbynek.github.io/jenkins.io/order-syntax/images/post-images/working-hours/working-hours-config.png&quot; alt=&quot;Screenshot for Current Plugin&quot; /&gt;&lt;/span&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;new-time-ranges&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#new-time-ranges&quot; /&gt;New (Time Ranges)&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://zbynek.github.io/jenkins.io/order-syntax/images/post-images/working-hours/working-hours-example-time-range.png&quot; alt=&quot;Time Ranges Example&quot; /&gt;&lt;/span&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;new-exclude-dates&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#new-exclude-dates&quot; /&gt;New (Exclude Dates)&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://zbynek.github.io/jenkins.io/order-syntax/images/post-images/working-hours/working-hours-exmaple-excluded-date.png&quot; alt=&quot;Excluded Dates Example&quot; /&gt;&lt;/span&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;helpful-links&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#helpful-links&quot; /&gt;Helpful links&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you have any questions or advices, we are glad to hear from you.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Several useful links are listed below:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/jenkinsci/working-hours-plugin/tree/dev&quot;&gt;Develop Repo&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/jenkinsci/working-hours-plugin&quot;&gt;Main Repo&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.google.com/document/d/1SezLtQejur2ji-KUur3dC3TXK8ivxrttiwHYbTkA8Yk/edit#&quot;&gt;Design Doc&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://drive.google.com/open?id=1JLRCDg9JNBWR0Dfq8w3pTI9mrl6i9JU29pBoH6bO0J8&quot;&gt;Doc for React Integration Solution &lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://gitter.im/jenkinsci/working-hours-plugin&quot;&gt;
    Gitter Chat
&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.google.com/presentation/d/1Psz6MrYvw81D_7d8pfW04FDoBtexlSVdgrbqp99Wjm0/edit?usp=sharing&quot;&gt;
    Slides for Phase 1 Demo
&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=MDs0Vr7gnnA&quot;&gt;
    Video Recording for Phase 1
&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://zbynek.github.io/jenkins.io/order-syntax/blog/2019/07/05/jenkins-pipeline-stage-result-visualization-improvements/</id>
<title>Jenkins Pipeline Stage Result Visualization Improvements</title>
<updated>2019-12-12T20:07:24+00:00</updated>
<published>2019-07-05T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://zbynek.github.io/jenkins.io/order-syntax/blog/2019/07/05/jenkins-pipeline-stage-result-visualization-improvements/" />
<author>
<name>dwnusbaum</name>
</author>
<category term="pipeline"></category>
<category term="blueocean"></category>
<summary>
Some changes have recently been released to give Pipeline authors some new tools to improve Pipeline visualizations in Blue Ocean, in particular to address the highly-voted issue JENKINS-39203, which causes all non-failing stages to be visualized as though they were unstable if the overall build result of the Pipeline was unstable. This issue made it difficult to quickly identify why a build was unstable, and forced users to read through builds logs and the Jenkinsfile to figure out what actually happened.


In order to fix this issue, we introduced a new Pipeline API that can be used to attach additional result...
</summary>
<content type="html">
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Some changes have recently been released to give Pipeline authors some new tools to improve Pipeline visualizations in Blue Ocean, in particular to address the highly-voted issue &lt;a href=&quot;https://issues.jenkins-ci.org/browse/JENKINS-39203&quot;&gt;JENKINS-39203&lt;/a&gt;, which causes all non-failing stages to be visualized as though they were unstable if the overall build result of the Pipeline was unstable. This issue made it difficult to quickly identify why a build was unstable, and forced users to read through builds logs and the Jenkinsfile to figure out what actually happened.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In order to fix this issue, we introduced a new Pipeline API that can be used to attach additional result information to individual Pipeline steps. Visualization tools like Blue Ocean use this new API when deciding how a given stage should be displayed. Steps like &lt;code&gt;junit&lt;/code&gt; that used to set only the overall build result now additionally use the new API to set step-level result information. We created the new &lt;code&gt;unstable&lt;/code&gt; and &lt;code&gt;warnError&lt;/code&gt; steps so that Pipeline authors with more complicated use cases can still take advantage of this new API.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The core fixes for the issue are present in the following plugins, all of which require Jenkins 2.138.4 or newer:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Pipeline: API 2.34&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Pipeline: Basic Steps 2.18 (requires a simultaneous update to Pipeline: Groovy 2.70)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Pipeline: Graph Analysis 1.10&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Pipeline: Declarative 1.3.9&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Blue Ocean 1.17.0&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here is a screenshot from Blue Ocean of a Pipeline using the &lt;code&gt;unstable&lt;/code&gt; step where only the failing stage is marked as unstable:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://zbynek.github.io/jenkins.io/order-syntax/images/post-images/2019/07/2019-07-05-jenkins-pipeline-stage-result-visualization-improvements/unstable-stage-example.png&quot; alt=&quot;Visualization of a Pipeline in Blue Ocean with a single stage shown as unstable&quot;&gt;
&lt;/img&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;examples&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#examples&quot; /&gt;Examples&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here are some examples of how to update your Pipelines to use the new improvements:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Use the new &lt;a href=&quot;https://jenkins.io/doc/pipeline/steps/workflow-basic-steps/#warnerror-catch-error-and-set-build-and-stage-result-to-unstable&quot;&gt;&lt;code&gt;warnError&lt;/code&gt;&lt;/a&gt; step to catch errors and mark the build and stage as unstable.&lt;/strong&gt; &lt;code&gt;warnError&lt;/code&gt; requires a single &lt;code&gt;String&lt;/code&gt; parameter, which is a message to log when an error is caught. When &lt;code&gt;warnError&lt;/code&gt; catches an error, it logs the message  and the error and sets the build and stage result to unstable. Using it looks like this:&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;groovy&quot;&gt;warnError(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Script failed!&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;) {
  sh(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;false&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;)
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Use the new &lt;a href=&quot;https://jenkins.io/doc/pipeline/steps/workflow-basic-steps/#unstable-set-stage-result-to-unstable&quot;&gt;&lt;code&gt;unstable&lt;/code&gt;&lt;/a&gt; step to set the build and stage result to unstable&lt;/strong&gt;. This step can be used as a direct replacement for &lt;code&gt;currentBuild.result = &#39;UNSTABLE&#39;&lt;/code&gt;, and may be useful in cases where &lt;code&gt;warnError&lt;/code&gt; is not flexible enough. &lt;code&gt;unstable&lt;/code&gt; requires a single &lt;code&gt;String&lt;/code&gt; parameter, which is a message to log when the step runs. Using it might look like this:&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;groovy&quot;&gt;&lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;try&lt;/span&gt; {
  sh(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;false&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;)
} &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;catch&lt;/span&gt; (ex) {
  unstable(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Script failed!&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;)
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://plugins.jenkins.io/junit&quot;&gt;JUnit Plugin&lt;/a&gt;&lt;/strong&gt;: Update to version 1.28 or newer to pick up fixes for the &lt;code&gt;junit&lt;/code&gt; step so that it correctly marks the stage as unstable.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://plugins.jenkins.io/warnings-ng&quot;&gt;Warnings Next Generation Plugin&lt;/a&gt;&lt;/strong&gt;: Update to version 5.2.0 or newer to pick up fixes for the &lt;code&gt;publishIssues&lt;/code&gt; and &lt;code&gt;recordIssues&lt;/code&gt; steps so that they correctly mark the stage as unstable.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Other Plugins&lt;/strong&gt;: If your Pipeline is marked as unstable by a step in another plugin, please &lt;a href=&quot;https://issues.jenkins-ci.org&quot;&gt;file a new issue&lt;/a&gt; with the component set to that plugin (after checking for duplicates), clearly describing which step has the problem and under what circumstances it occurs, and link to the developer section of this post as a reference for how the maintainer might be able to address the problem.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;limitations&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#limitations&quot; /&gt;Limitations&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;If you do not migrate to the &lt;code&gt;unstable&lt;/code&gt; or &lt;code&gt;warnError&lt;/code&gt; steps, or update plugins that set the build result to versions that integrate with the new API, then in cases where the build is unstable, Blue Ocean will not show any stages as unstable.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Even after these changes, &lt;code&gt;currentBuild.result&lt;/code&gt; continues to refer only to the overall build result. Unfortunately, it was not possible to adapt the &lt;code&gt;currentBuild&lt;/code&gt; global variable to make it track step or stage-level results, since it is implemented as a global variable, which means it does not have any step-level context through which it could use the new API.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://plugins.jenkins.io/pipeline-stage-view&quot;&gt;Pipeline Stage View Plugin&lt;/a&gt; has not yet been updated to use the new API, so these changes do not affect the visualization it provides.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;history&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#history&quot; /&gt;History&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Jenkins Pipeline steps can complete in one of two ways: successfully, by returning a (possibly null) result, or unsuccessfully, by throwing an exception. When a step fails by throwing an exception, that exception propagates throughout the Pipeline until another step or Groovy code catches it, or it reaches the top level of the Pipeline, which causes the Pipeline itself to fail. Depending on the type of exception thrown, the final result of the Pipeline may be something other than failure (for example in some cases it will be aborted). Because of the way the exception propagates, it is easy for tools like Blue Ocean to identify steps (and therefore stages) which failed due to an exception.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In order for Pipelines to be able to interact with established Jenkins APIs, it was also necessary for Pipeline builds to have an overall build result that can be modified during the build. Among other things, this allows Pipelines to use build steps and wrappers that were originally written for use in Freestyle projects.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In some cases, it is desirable for a Pipeline step to be able to complete successfully so that the rest of the Pipeline continues normal execution, but for it to be able to note that some kind of error occurred so that visualizations are able to identify that something went wrong with the step, even though it didn’t fail completely. A good example of this is the &lt;code&gt;junit&lt;/code&gt; step. This step looks at specified test results, and if there were any failures, marks the overall build result as unstable. This kind of behavior is problematic for visualization tools like Blue Ocean, because the step completed successfully, and there is no programmatic way to associate the overall build result with the step that ended up setting that result.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Looking at &lt;a href=&quot;https://issues.jenkins-ci.org/browse/JENKINS-39203&quot;&gt;JENKINS-39203&lt;/a&gt; again, we see that there were essentially two options for the visualization. If the overall build result was unstable, either all steps that completed successfully could be shown as unstable, because they may have been the step that caused the build to become unstable, or they could be shown as successful, because we have no way to relate the setting of the build result to a specific step. In the end, the first option was chosen.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To work around this issue, some users tried to do things like throw exceptions and add try/catch blocks around stages that handle exceptions so that Blue Ocean would be able to use the exceptions to mark step and stage results as desired, and then by catching the exception the Pipeline would be able to continue normal execution. These kinds of workarounds were hard to understand, fragile, and did not work well (if at all) for Declarative Pipelines.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;developers&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#developers&quot; /&gt;Developers&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are a developer of a plugin that integrates with Pipeline using a step, and want to take advantage of the new API so that your step can report an non-successful result without throwing an exception, please see &lt;a href=&quot;https://groups.google.com/d/msg/jenkinsci-dev/5A7U1KmfX08/IP5Bg_OaAgAJ&quot;&gt;this post&lt;/a&gt; to the Jenkins Developers mailing list, and respond there if you have any questions.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://zbynek.github.io/jenkins.io/order-syntax/blog/2019/07/02/plugin-management-tool-alpha-release/</id>
<title>Plugin Management Library and CLI Tool Alpha Release</title>
<updated>2019-12-12T20:07:24+00:00</updated>
<published>2019-07-02T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://zbynek.github.io/jenkins.io/order-syntax/blog/2019/07/02/plugin-management-tool-alpha-release/" />
<author>
<name>stopalopa</name>
</author>
<category term="plugins"></category>
<category term="pluginmanagement"></category>
<category term="platform-sig"></category>
<category term="cli"></category>
<category term="gsoc"></category>
<category term="gsoc2019"></category>
<summary>
"Everybody is re-inventing the wheel, partially implementing the "details" of plugin management (signed metadata, artifacts checksums, plugins detached from core,&#8230;&#8203;).
It becomes obvious Jenkins should provide adequate tooling for plugin installation outside a live Jenkins instance." JENKINS-53767


My Google Summer of Code project
tries to solve this problem by creating a library that will unify plugin management logic across the different implementations
of Jenkins and providing a CLI tool that will make it easy for users to download plugins and view plugin information before Jenkins even starts.
I&#8217;m excited to share that we just released an alpha version that you can check out here!


GSoC Phase 1 Update


While...
</summary>
<content type="html">
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;em&gt;&quot;Everybody is re-inventing the wheel, partially implementing the &quot;details&quot; of plugin management (signed metadata, artifacts checksums, plugins detached from core,…​).
It becomes obvious Jenkins should provide adequate tooling for plugin installation outside a live Jenkins instance.&quot;&lt;/em&gt; &lt;a href=&quot;https://issues.jenkins-ci.org/browse/JENKINS-53767&quot;&gt;JENKINS-53767&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;My &lt;a href=&quot;https://zbynek.github.io/jenkins.io/order-syntax/projects/gsoc/2019/plugin-installation-manager-tool-cli/&quot;&gt;Google Summer of Code project&lt;/a&gt;
tries to solve this problem by creating a library that will unify plugin management logic across the different implementations
of Jenkins and providing a CLI tool that will make it easy for users to download plugins and view plugin information before Jenkins even starts.
I’m excited to share that we just released an alpha version that you can check out &lt;a href=&quot;https://github.com/jenkinsci/plugin-installation-manager-tool/releases&quot;&gt;here&lt;/a&gt;!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;gsoc-phase-1-update&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#gsoc-phase-1-update&quot; /&gt;GSoC Phase 1 Update&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;While I looked into pulling the &lt;a href=&quot;https://github.com/jenkinsci/jenkins/blob/master/core/src/main/java/hudson/PluginManager.java&quot;&gt;Plugin Manager&lt;/a&gt; out of Jenkins core,
this ended up being a challenging first step due to the complexity and number of dependencies.  We instead decided to start by converting the
&lt;a href=&quot;https://github.com/jenkinsci/docker/blob/master/install-plugins.sh&quot;&gt;install-plugins.sh bash script&lt;/a&gt; in Jenkins Docker to Java.
There are several issues with the install-plugins.sh script - namely, that it is a bash script and has limited extensibility.
Furthermore, it does not retrieve all of the most-up-to-date update center metadata.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;alpha-release-details&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#alpha-release-details&quot; /&gt;Alpha Release Details&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Mimicking what was done in the &lt;a href=&quot;https://github.com/jenkinsci/docker/blob/master/install-plugins.sh&quot;&gt;install-plugins.sh&lt;/a&gt; script from the official Jenkins Docker image, the new plugin management library takes in a list of plugins, their versions,
and/or urls from which to download the plugins, and downloads the requested plugins and their dependencies. The plugins are downloaded from the update center
to a specified directory, and can then be loaded into Jenkins. Currently, the plugins to be downloaded can be specified via a plugins.txt file and/or the -plugins cli option, but we plan to further expand the input formats that can be accepted.
&lt;a href=&quot;https://github.com/jenkinsci/docker#plugin-version-format&quot;&gt;Custom version specifiers&lt;/a&gt; for different update centers are also supported.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://zbynek.github.io/jenkins.io/order-syntax/images/post-images/gsoc-plugin-management-tool/pluginstxt.png&quot; alt=&quot;Example plugins.txt File&quot;&gt;
&lt;/img&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The library will first check if any of the requested plugins are currently either installed in the user-specified download location or user-specified Jenkins war file.
Already installed plugins will be ignored or upgraded if a higher version is requested or required as a dependency.  After determining the plugin download URL, the library
will download the plugins and resolve and download their dependencies.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://zbynek.github.io/jenkins.io/order-syntax/images/post-images/gsoc-plugin-management-tool/downloadexample.png&quot; alt=&quot;Example of Downloading Plugins&quot;&gt;
&lt;/img&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://zbynek.github.io/jenkins.io/order-syntax/images/post-images/gsoc-plugin-management-tool/downloadedplugins.png&quot; alt=&quot;Plugin Download Directory&quot;&gt;
&lt;/img&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is just the beginning: the plugin manager library and cli tool are very much still a work in progress.
For the most up-to-date information on CLI options and how to run the tool, see the &lt;a href=&quot;https://github.com/jenkinsci/plugin-installation-manager-tool/blob/master/README.md&quot;&gt;repository README.md&lt;/a&gt;.
More robust input parsing, support for security warnings and available updates, Docker integration, and additional features coming soon!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;links-and-feedback&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#links-and-feedback&quot; /&gt;Links and Feedback&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Feel free to reach out through
the &lt;a href=&quot;https://gitter.im/jenkinsci/plugin-installation-manager-cli-tool&quot;&gt;Plugin Installation Manager CLI Tool Gitter chat&lt;/a&gt; or through
the &lt;a href=&quot;mailto:jenkinsci-dev@googlegroups.com&quot;&gt;Jenkins Developer Mailing list&lt;/a&gt;. I would love to get your questions, comments, and feedback!
We have meetings Tuesdays and Thursdays at 6PM UTC.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.google.com/presentation/d/12Bo8w9SinrG5n82w-Unjx4MNq0mjkHFEOMc3Jf6rTQQ/edit#slide=id.p1&quot;&gt;Phase 1 Presentation Slides&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://youtu.be/MDs0Vr7gnnA?t=196&quot;&gt;Phase 1 Recorded Demo&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://issues.jenkins-ci.org/browse/JENKINS-58199?jql=project%20%3D%20JENKINS%20AND%20component%20%3D%20plugin-installation-manager-tool&quot;&gt;Jira Issue Search&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/jenkinsci/plugin-installation-manager-tool&quot;&gt;Repository&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://zbynek.github.io/jenkins.io/order-syntax/blog/2019/06/29/phase-1-multibranch-pipeline-support-for-gitlab/</id>
<title>Multi-branch Pipeline Jobs Support for GitLab SCM</title>
<updated>2019-12-12T20:07:24+00:00</updated>
<published>2019-06-29T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://zbynek.github.io/jenkins.io/order-syntax/blog/2019/06/29/phase-1-multibranch-pipeline-support-for-gitlab/" />
<author>
<name>baymac</name>
</author>
<category term="gitlab"></category>
<category term="plugins"></category>
<category term="pipeline"></category>
<category term="credentials"></category>
<category term="developer"></category>
<category term="gsoc"></category>
<category term="gsoc2019"></category>
<summary>
This is one of the Jenkins project in GSoC 2019. We are working on adding support
for Multi-branch
Pipeline Jobs and Folder Organisation in GitLab. The plan is to create the following
plugins:




GitLab API Plugin - Wraps GitLab Java APIs.


GitLab Branch Source Plugin - Contains two packages:



io.jenkins.plugins.gitlabserverconfig - Manages server configuration and web hooks management.
Ideally should reside inside another plugin with name GitLab Plugin. In future, this package should
be moved into a new plugin.


io.jenkins.plugins.gitlabbranchsource - Adds GitLab Branch Source for Multi-branch Pipeline Jobs (including
Merge Requests) and Folder organisation.









Present State




FreeStyle Job and Pipeline(Single Branch) Job are fully supported.


Multi-branch Pipeline Job is partially supported (no...
</summary>
<content type="html">
&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is one of the Jenkins project in GSoC 2019. We are working on adding support
for &lt;a href=&quot;https://zbynek.github.io/jenkins.io/order-syntax/projects/gsoc/2019/gitlab-support-for-multibranch-pipeline/&quot;&gt;Multi-branch
Pipeline Jobs and Folder Organisation in GitLab&lt;/a&gt;. The plan is to create the following
plugins:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/jenkinsci/gitlab-api-plugin&quot;&gt;GitLab API Plugin&lt;/a&gt; - Wraps GitLab Java APIs.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/baymac/gitlab-branch-source-plugin&quot;&gt;GitLab Branch Source Plugin&lt;/a&gt; - Contains two packages:&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;io.jenkins.plugins.gitlabserverconfig&lt;/code&gt; - Manages server configuration and web hooks management.
Ideally should reside inside another plugin with name &lt;code&gt;GitLab Plugin&lt;/code&gt;. In future, this package should
be moved into a new plugin.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;io.jenkins.plugins.gitlabbranchsource&lt;/code&gt; - Adds GitLab Branch Source for Multi-branch Pipeline Jobs (including
Merge Requests) and Folder organisation.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;present-state&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#present-state&quot; /&gt;Present State&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;FreeStyle Job and Pipeline(Single Branch) Job are fully supported.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Multi-branch Pipeline Job is partially supported (no MRs detection).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;GitLab Folder Organisation is not supported.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;goals-of-this-project&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#goals-of-this-project&quot; /&gt;Goals of this project&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Implement a lightweight GitLab Plugin that depends on GitLab API Plugin.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Follow convention of 3 separate plugins i.e. &lt;code&gt;GitLab Plugin&lt;/code&gt;, &lt;code&gt;GitLab API Plugin&lt;/code&gt;, &lt;code&gt;GitLab Branch Source Plugin&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Implement GitLab Branch Source Plugin with support for Multi-branch Pipeline Jobs.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Support new Jenkins features such as
&lt;a href=&quot;https://github.com/jenkinsci/configuration-as-code-plugin&quot;&gt;Jenkins Code as Configuration&lt;/a&gt; (JCasC),
&lt;a href=&quot;https://github.com/jenkinsci/incrementals-tools/&quot;&gt;Incremental Tools&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Clear &amp;amp; Efficient design.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Support new SCM Trait APIs.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Support Java 8 and above.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;building-the-plugin&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#building-the-plugin&quot; /&gt;Building the plugin&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;No binaries are available for this plugin as the plugin is in the very early alpha stage, and not ready for the general
public quite yet.  If you want to jump in early, you can try building it yourself from source.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;installation&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#installation&quot; /&gt;Installation:&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Checkout source code to your local machine:&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;bash&quot;&gt;git clone https://github.com/baymac/gitlab-branch-source-plugin.git

cd gitlab-branch-source-plugin&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Install the plugin:&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;bash&quot;&gt;mvn clean install

mvn clean install -DskipTests # to skip tests&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Run the plugin:&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;bash&quot;&gt;mvn hpi:run # runs a Jenkins instance at localhost:8080

mvn hpi:run -Djetty.port=&amp;lt;port&amp;gt; # to run on your desired port number&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you want to test it with your Jenkins server, after &lt;code&gt;mvn clean install&lt;/code&gt; follow these steps in your Jenkins instance:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Select &lt;code&gt;Manage Jenkins&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Select &lt;code&gt;Manage Plugins&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Select &lt;code&gt;Advanced&lt;/code&gt; tab&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In &lt;code&gt;Upload Plugin&lt;/code&gt; section, select &lt;code&gt;Choose file&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Select &lt;code&gt;$&amp;lt;root_dir&amp;gt;/target/gitlab-branch-source.hpi&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Select &lt;code&gt;Upload&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Select &lt;code&gt;Install without restart&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;usage&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#usage&quot; /&gt;Usage&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Assuming plugin installation has done been already.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;setting-up-gitlab-server-configuration-on-jenkins&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#setting-up-gitlab-server-configuration-on-jenkins&quot; /&gt;Setting up GitLab Server Configuration on Jenkins&lt;/h3&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;On jenkins, select &lt;code&gt;Manage Jenkins&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Select &lt;code&gt;Configure System&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Scroll down to find the &lt;code&gt;GitLab&lt;/code&gt; section&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://zbynek.github.io/jenkins.io/order-syntax/images/post-images/2019/06/2019-06-29-multibranch-pipeline-support-for-gitlab/gitlab-section.png&quot; alt=&quot;gitlab-section&quot; /&gt;&lt;/span&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;li&gt;
&lt;p&gt;Select &lt;code&gt;Add GitLab Server&lt;/code&gt; | Select &lt;code&gt;GitLab Server&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Now you will now see the GitLab Server Configuration options.&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://zbynek.github.io/jenkins.io/order-syntax/images/post-images/2019/06/2019-06-29-multibranch-pipeline-support-for-gitlab/gitlab-server.png&quot; alt=&quot;gitlab-server&quot; /&gt;&lt;/span&gt;
&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are 4 fields that needs to be configured:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Name&lt;/code&gt; - Plugin automatically generates an unique server name for you. User may want to configure this field
to suit their needs but should make sure it is sufficiently unique. We recommend to keep it as it is.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Server URL&lt;/code&gt; - Contains the URL to your GitLab Server. By default it is set to &quot;https://gitlab.com&quot;. User can
modify it to enter their GitLab Server URL e.g. &lt;a href=&quot;https://gitlab.gnome.org/&quot; class=&quot;bare&quot;&gt;https://gitlab.gnome.org/&lt;/a&gt;, &lt;a href=&quot;http://gitlab.example.com:7990&quot; class=&quot;bare&quot;&gt;http://gitlab.example.com:7990&lt;/a&gt;. etc.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Credentials&lt;/code&gt; - Contains a list of credentials entries that are of type GitLab Personal Access Token. When
no credential has been added it shows &quot;-none-&quot;. User can add a credential by clicking &quot;Add&quot; button.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Web Hook&lt;/code&gt; - This field is a checkbox. If you want the plugin to setup a webhook on your GitLab project(s)
related jobs, check this box. The plugin listens to a URL for the concerned GitLab project(s) and when an event
occurs in the GitLab Server, the server sends an event trigger to the URL where the web hook is setup. If you
want continuous integration (or continuous delivery) on your GitLab project then you may want to automatically
set it up.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;li&gt;
&lt;p&gt;Adding a Personal Access Token Credentials (To automatically generate Personal Access Token see
&lt;a href=&quot;#creating-personal-access-token-within-jenkins&quot;&gt;next section&lt;/a&gt;):&lt;/p&gt;
&lt;div class=&quot;olist loweralpha&quot;&gt;
&lt;ol class=&quot;loweralpha&quot; type=&quot;a&quot;&gt;
&lt;li&gt;
&lt;p&gt;User is required to add a &lt;code&gt;GitLab Personal Access Token&lt;/code&gt; type credentials entry to securely persist the token
inside Jenkins.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Generate a &lt;code&gt;Personal Access Token&lt;/code&gt; on your GitLab Server:&lt;/p&gt;
&lt;div class=&quot;olist lowerroman&quot;&gt;
&lt;ol class=&quot;lowerroman&quot; type=&quot;i&quot;&gt;
&lt;li&gt;
&lt;p&gt;Select profile dropdown menu from top-right corner&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Select &lt;code&gt;Settings&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Select &lt;code&gt;Access Token&lt;/code&gt; from left column&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Enter a name | Set Scope to &lt;code&gt;api&lt;/code&gt;,&lt;code&gt;read_user&lt;/code&gt;, &lt;code&gt;read_repository&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Select &lt;code&gt;Create Personal Access Token&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Copy the token generated&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Return to Jenkins | Select &lt;code&gt;Add&lt;/code&gt; in Credentials field | Select &lt;code&gt;Jenkins&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Set &lt;code&gt;Kind&lt;/code&gt; to GitLab Personal Access Token&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Enter &lt;code&gt;Token&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Enter a unique id in &lt;code&gt;ID&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Enter a human readable description&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Select &lt;code&gt;Add&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://zbynek.github.io/jenkins.io/order-syntax/images/post-images/2019/06/2019-06-29-multibranch-pipeline-support-for-gitlab/gitlab-credentials.png&quot; alt=&quot;gitlab-credentials&quot; /&gt;&lt;/span&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;li&gt;
&lt;p&gt;Testing connection:&lt;/p&gt;
&lt;div class=&quot;olist loweralpha&quot;&gt;
&lt;ol class=&quot;loweralpha&quot; type=&quot;a&quot;&gt;
&lt;li&gt;
&lt;p&gt;Select your desired token in the &lt;code&gt;Credentials&lt;/code&gt; dropdown&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Select &lt;code&gt;Test Connection&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It should return something like &lt;code&gt;Credentials verified for user &amp;lt;username&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Select &lt;code&gt;Apply&lt;/code&gt; (at the bottom)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;GitLab Server is now setup on Jenkins&lt;/p&gt;
&lt;/li&gt;
&lt;/li&gt;
&lt;/li&gt;
&lt;/li&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;creating-personal-access-token-within-jenkins&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#creating-personal-access-token-within-jenkins&quot; /&gt;Creating Personal Access Token within Jenkins&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Alternatively, users can generate a GitLab Personal Access Token within Jenkins itself and automatically add the
GitLab Personal Access Token credentials to Jenkins server credentials.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Select &lt;code&gt;Advanced&lt;/code&gt; at the bottom of &lt;code&gt;GitLab&lt;/code&gt; Section&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Select &lt;code&gt;Manage Additional GitLab Actions&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Select &lt;code&gt;Convert login and password to token&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Set the &lt;code&gt;GitLab Server URL&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;There are 2 options to generate token;&lt;/p&gt;
&lt;div class=&quot;olist loweralpha&quot;&gt;
&lt;ol class=&quot;loweralpha&quot; type=&quot;a&quot;&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;From credentials&lt;/code&gt; - To select an already persisting Username Password Credentials or add an Username Password
credential to persist it.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;From login and password&lt;/code&gt; - If this is a one time thing then you can directly enter you credentials to the text boxes
and the username/password credential is not persisted.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;After setting your username/password credential, select &lt;code&gt;Create token credentials&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The token creator will create a Personal Access Token in your GitLab Server for the given user with the
required scope and also create a credentials for the same inside Jenkins server. You can go back to the GitLab Server
Configuration to select the new credentials generated (select &quot;-none-&quot; first then new credentials will appear). For
security reasons this token is not revealed as plain text rather returns an &lt;code&gt;id&lt;/code&gt;. It is a 128-bit long UUID-4 string
(36 characters).&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://zbynek.github.io/jenkins.io/order-syntax/images/post-images/2019/06/2019-06-29-multibranch-pipeline-support-for-gitlab/gitlab-token-creator.png&quot; alt=&quot;gitlab-token-creator&quot; /&gt;&lt;/span&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;configuration-as-code&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#configuration-as-code&quot; /&gt;Configuration as Code&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;No need for messing around in the UI. &lt;code&gt;Jenkins Configuration as Code (JCasC)&lt;/code&gt; or simply &lt;code&gt;Configuration as Code&lt;/code&gt; Plugin
allows you to configure Jenkins via a &lt;code&gt;yaml&lt;/code&gt; file. If you are a first time user, you can learn more about JCasC
&lt;a href=&quot;https://github.com/jenkinsci/configuration-as-code-plugin&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;add-configuration-yaml&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#add-configuration-yaml&quot; /&gt;Add configuration YAML:&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are multiple ways to load JCasC yaml file to configure Jenkins:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;JCasC by default searches for a file with the name &lt;code&gt;jenkins.yaml&lt;/code&gt; in &lt;code&gt;$JENKINS_ROOT&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The JCasC looks for an environment variable &lt;code&gt;CASC_JENKINS_CONFIG&lt;/code&gt; which contains the path
for the configuration &lt;code&gt;yaml&lt;/code&gt; file.&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A path to a folder containing a set of config files e.g. &lt;code&gt;/var/jenkins_home/casc_configs&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A full path to a single file e.g. &lt;code&gt;/var/jenkins_home/casc_configs/jenkins.yaml&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A URL pointing to a file served on the web e.g. &lt;code&gt;&lt;a href=&quot;https://&amp;lt;your-domain&amp;gt;/jenkins.yaml&quot; class=&quot;bare&quot;&gt;https://&amp;lt;your-domain&amp;gt;/jenkins.yaml&lt;/a&gt;&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You can also set the configuration yaml path in the UI. Go to &lt;code&gt;&amp;lt;your-jenkins-domain&amp;gt;/configuration-as-code&lt;/code&gt;.
Enter path or URL to &lt;code&gt;jenkins.yaml&lt;/code&gt; and select &lt;code&gt;Apply New Configuration&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;An example of configuring GitLab server via &lt;code&gt;jenkins.yaml&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#606&quot;&gt;credentials&lt;/span&gt;:
  &lt;span style=&quot;color:#606&quot;&gt;system&lt;/span&gt;:
    &lt;span style=&quot;color:#606&quot;&gt;domainCredentials&lt;/span&gt;:
      - &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#D20&quot;&gt;credentials:&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;
          - gitlabPersonalAccessToken:
              scope: SYSTEM
              id: &quot;i&amp;lt;3GitLab&quot;
              token: &quot;XfsqZvVtAx5YCph5bq3r&quot; # gitlab personal access token&lt;/span&gt;&lt;/span&gt;

&lt;span style=&quot;color:#606&quot;&gt;unclassified&lt;/span&gt;:
  &lt;span style=&quot;color:#606&quot;&gt;gitLabServers&lt;/span&gt;:
    &lt;span style=&quot;color:#606&quot;&gt;servers&lt;/span&gt;:
      - &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#D20&quot;&gt;credentialsId: &quot;i&amp;lt;3GitLab&quot;&lt;/span&gt;&lt;/span&gt;
        &lt;span style=&quot;color:#606&quot;&gt;manageHooks&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#D20&quot;&gt;true&lt;/span&gt;&lt;/span&gt;
        &lt;span style=&quot;color:#606&quot;&gt;name&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;gitlab.com&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
        &lt;span style=&quot;color:#606&quot;&gt;serverUrl&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;https://gitlab.com&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For better security, see handling secrets
&lt;a href=&quot;https://github.com/jenkinsci/configuration-as-code-plugin#handling-secrets&quot;&gt;section&lt;/a&gt; in JCasC
documentation.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/ol&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;future-scope-of-work&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#future-scope-of-work&quot; /&gt;Future Scope of work&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The second phase of GSoC will be utilized to develop GitLab Branch Source. The new feature is a work in progress, but
the codebase is unstable and requires lot of bugfixes. Some features like Multibranch Pipeline Jobs are functioning
properly. More about it at the end of second phase.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;issue-tracking&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#issue-tracking&quot; /&gt;Issue Tracking&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This project uses Jenkins &lt;a href=&quot;https://issues.jenkins-ci.org/&quot;&gt;JIRA&lt;/a&gt; to track issues. You can file issues under
&lt;code&gt;gitlab-branch-source-plugin&lt;/code&gt; component.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;acknowledgements&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#acknowledgements&quot; /&gt;Acknowledgements&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This plugin is built and maintained by the Google Summer of Code (GSoC) Team for
&lt;a href=&quot;https://jenkins.io/projects/gsoc/2019/gitlab-support-for-multibranch-pipeline/&quot;&gt;Multi-branch Pipeline
Support for GitLab&lt;/a&gt;. A lot of inspiration was drawn from &lt;code&gt;GitLab Plugin&lt;/code&gt;, &lt;code&gt;Gitea Plugin&lt;/code&gt; and &lt;code&gt;GitHub Plugin&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Our team consists of: &lt;a href=&quot;https://www.github.com/baymac&quot;&gt;baymac&lt;/a&gt;, &lt;a href=&quot;https://github.com/LinuxSuRen&quot;&gt;LinuxSuRen&lt;/a&gt;,
&lt;a href=&quot;https://github.com/markyjackson-taulia&quot;&gt;Marky&lt;/a&gt;, &lt;a href=&quot;https://github.com/casz&quot;&gt;Joseph&lt;/a&gt;,
&lt;a href=&quot;https://github.com/justinharringa&quot;&gt;Justin&lt;/a&gt;, &lt;a href=&quot;https://github.com/jeffpearce&quot;&gt;Jeff&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With support from: &lt;a href=&quot;https://github.com/oleg-nenashev&quot;&gt;Oleg&lt;/a&gt;, &lt;a href=&quot;https://github.com/gmessner&quot;&gt;Greg&lt;/a&gt;,
&lt;a href=&quot;https://github.com/omehegan&quot;&gt;Owen&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Also thanks to entire Jenkins community for contributing with technical expertise and inspiration.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;links&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#links&quot; /&gt;Links&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=ij6ByZqI67o&quot;&gt;Phase 1 demo&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://drive.google.com/open?id=1c3UWwEb5rDmO6YEn5fU3qVbVW-opuUXb&quot;&gt;Presentation slides&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/jenkinsci/gitlab-api-plugin&quot;&gt;GitLab API Plugin&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/baymac/gitlab-branch-source-plugin&quot;&gt;GitLab Branch Source Plugin&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://wiki.jenkins.io/display/JENKINS/GitLab+API+Plugin&quot;&gt;GitLab API Plugin Wiki&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://issues.jenkins-ci.org/browse/JENKINS-57445&quot;&gt;Issue Tracker for Phase 1&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://baymac.github.io&quot;&gt;Blog&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://zbynek.github.io/jenkins.io/order-syntax/blog/2019/06/21/performance-testing-jenkins/</id>
<title>Micro-benchmarking Framework for Jenkins Plugins</title>
<updated>2019-12-12T20:07:24+00:00</updated>
<published>2019-06-21T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://zbynek.github.io/jenkins.io/order-syntax/blog/2019/06/21/performance-testing-jenkins/" />
<author>
<name>abhyudayasharma</name>
</author>
<category term="jmh"></category>
<category term="plugins"></category>
<category term="benchmark"></category>
<category term="performance"></category>
<category term="developer"></category>
<category term="gsoc"></category>
<category term="gsoc2019"></category>
<summary>
I have been working on improving the performance of the Role Strategy Plugin as a part of my Google Summer of Code project.
Since there was no existing way to measure performance and do benchmarks on Jenkins Plugins,
my work for the first phase of the project was to create a framework for running
benchmarks in Jenkins plugins with a Jenkins instance available. To make our job a bit easier,
we chose Java Microbenchmark Harness for running these benchmarks. This
allows us to reliably measure performance of our time-critical functions and will help make Jenkins perform faster
for everyone.


The micro-benchmarking framework was recently released in the...
</summary>
<content type="html">
&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I have been working on improving the performance of the Role Strategy Plugin as a part of my &lt;a href=&quot;https://zbynek.github.io/jenkins.io/order-syntax/projects/gsoc/2019/role-strategy-performance/&quot;&gt;Google Summer of Code project&lt;/a&gt;.
Since there was no existing way to measure performance and do benchmarks on Jenkins Plugins,
my work for the first phase of the project was to create a framework for running
benchmarks in Jenkins plugins with a Jenkins instance available. To make our job a bit easier,
we chose &lt;a href=&quot;http://openjdk.java.net/jeps/230&quot;&gt;Java Microbenchmark Harness&lt;/a&gt; for running these benchmarks. This
allows us to reliably measure performance of our time-critical functions and will help make Jenkins perform faster
for everyone.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The micro-benchmarking framework was recently released in the Jenkins Unit Test Harness &lt;a href=&quot;https://github.com/jenkinsci/jenkins-test-harness/releases/tag/jenkins-test-harness-2.50&quot;&gt;2.50&lt;/a&gt;.
The blog post below shows how to run benchmarks in your plugins.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;introduction&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#introduction&quot; /&gt;Introduction&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The framework runs works by starting a temporary Jenkins instance for each fork of the JMH benchmark,
just like &lt;code&gt;JenkinsRule&lt;/code&gt; from Jenkins Test Harness. Benchmarks are run directly from your JUnit Tests which allows
you to fail builds on the fly and easily run benchmarks from your IDE, just like unit tests. You can easily
configure your benchmarks by either using your Java methods, or by using Jenkins &lt;a href=&quot;https://plugins.jenkins.io/configuration-as-code&quot;&gt;Configuration-as-Code plugin&lt;/a&gt;
and passing the path to your YAML file.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To run benchmarks from your plugins, you need to do the following:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;bump up the minimum required Jenkins version to 2.60.3 or above&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;bump Plugin-POM to a version ≥ 3.46 or manually upgrade to Jenkins Test Harness ≥ 2.51.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now, to run the benchmarks, you need to have a benchmark runner that contains a &lt;code&gt;@Test&lt;/code&gt; so it can run
like a JUnit test. From inside a test method, you can use the &lt;code&gt;OptionsBuilder&lt;/code&gt; provided by JMH to
configure your benchmarks. For example:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#088;font-weight:bold&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color:#339;font-weight:bold&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color:#B06;font-weight:bold&quot;&gt;BenchmarkRunner&lt;/span&gt; {
    &lt;span style=&quot;color:#007&quot;&gt;@Test&lt;/span&gt;
    &lt;span style=&quot;color:#088;font-weight:bold&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color:#339;font-weight:bold&quot;&gt;void&lt;/span&gt; runJmhBenchmarks() &lt;span style=&quot;color:#088;font-weight:bold&quot;&gt;throws&lt;/span&gt; &lt;span style=&quot;color:#C00;font-weight:bold&quot;&gt;Exception&lt;/span&gt; {
        ChainedOptionsBuilder options = &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;new&lt;/span&gt; OptionsBuilder()
                .mode(Mode.AverageTime)
                .forks(&lt;span style=&quot;color:#00D&quot;&gt;2&lt;/span&gt;)
                .result(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;jmh-report.json&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;);

        &lt;span style=&quot;color:#777&quot;&gt;// Automatically detect benchmark classes annotated with @JmhBenchmark&lt;/span&gt;
        &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;new&lt;/span&gt; BenchmarkFinder(getClass()).findBenchmarks(options);
        &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;new&lt;/span&gt; Runner(options.build()).run();
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;sample-benchmarks&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#sample-benchmarks&quot; /&gt;Sample benchmarks&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now, you can write your first benchmark:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Without any special setup&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#007&quot;&gt;@JmhBenchmark&lt;/span&gt;
&lt;span style=&quot;color:#088;font-weight:bold&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color:#339;font-weight:bold&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color:#B06;font-weight:bold&quot;&gt;JmhStateBenchmark&lt;/span&gt; {
    &lt;span style=&quot;color:#088;font-weight:bold&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color:#088;font-weight:bold&quot;&gt;static&lt;/span&gt; &lt;span style=&quot;color:#339;font-weight:bold&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color:#B06;font-weight:bold&quot;&gt;MyState&lt;/span&gt; &lt;span style=&quot;color:#088;font-weight:bold&quot;&gt;extends&lt;/span&gt; JmhBenchmarkState {
    }

    &lt;span style=&quot;color:#007&quot;&gt;@Benchmark&lt;/span&gt;
    &lt;span style=&quot;color:#088;font-weight:bold&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color:#339;font-weight:bold&quot;&gt;void&lt;/span&gt; benchmark(MyState state) {
        &lt;span style=&quot;color:#777&quot;&gt;// benchmark code goes here&lt;/span&gt;
        state.getJenkins().setSystemMessage(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Hello world&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;);
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Using Configuration as Code&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To use configuration as code, apart from the dependencies above you also need to add the following
to your &lt;code&gt;pom.xml&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;xml&quot;&gt;&lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
    &lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;io.jenkins&lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
    &lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;configuration-as-code&lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
    &lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;1.21&lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
    &lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;lt;optional&amp;gt;&lt;/span&gt;true&lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;lt;/optional&amp;gt;&lt;/span&gt;
&lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
    &lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;io.jenkins&lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
    &lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;configuration-as-code&lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
    &lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;1.21&lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
    &lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;lt;classifier&amp;gt;&lt;/span&gt;tests&lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;lt;/classifier&amp;gt;&lt;/span&gt;
    &lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;lt;scope&amp;gt;&lt;/span&gt;test&lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;lt;/scope&amp;gt;&lt;/span&gt;
&lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now configuring a benchmark is as simple as providing path to your YAML file and specifying the class
containing the benchmark state.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#007&quot;&gt;@JmhBenchmark&lt;/span&gt;
&lt;span style=&quot;color:#088;font-weight:bold&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color:#339;font-weight:bold&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color:#B06;font-weight:bold&quot;&gt;SampleBenchmark&lt;/span&gt; {
    &lt;span style=&quot;color:#088;font-weight:bold&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color:#088;font-weight:bold&quot;&gt;static&lt;/span&gt; &lt;span style=&quot;color:#339;font-weight:bold&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color:#B06;font-weight:bold&quot;&gt;MyState&lt;/span&gt; &lt;span style=&quot;color:#088;font-weight:bold&quot;&gt;extends&lt;/span&gt; CascJmhBenchmarkState {
        &lt;span style=&quot;color:#007&quot;&gt;@Nonnull&lt;/span&gt;
        &lt;span style=&quot;color:#007&quot;&gt;@Override&lt;/span&gt;
        &lt;span style=&quot;color:#088;font-weight:bold&quot;&gt;protected&lt;/span&gt; &lt;span style=&quot;color:#0a8;font-weight:bold&quot;&gt;String&lt;/span&gt; getResourcePath() {
            &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;config.yml&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;;
        }

        &lt;span style=&quot;color:#007&quot;&gt;@Nonnull&lt;/span&gt;
        &lt;span style=&quot;color:#007&quot;&gt;@Override&lt;/span&gt;
        &lt;span style=&quot;color:#088;font-weight:bold&quot;&gt;protected&lt;/span&gt; &lt;span style=&quot;color:#0a8;font-weight:bold&quot;&gt;Class&lt;/span&gt;&amp;lt;?&amp;gt; getEnclosingClass() {
            &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;return&lt;/span&gt; SampleBenchmark.class;
        }
    }

    &lt;span style=&quot;color:#007&quot;&gt;@Benchmark&lt;/span&gt;
    &lt;span style=&quot;color:#088;font-weight:bold&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color:#339;font-weight:bold&quot;&gt;void&lt;/span&gt; benchmark(MyState state) {
        Jenkins jenkins = state.getJenkins(); &lt;span style=&quot;color:#777&quot;&gt;// jenkins is configured and ready to be benchmarked.&lt;/span&gt;
        &lt;span style=&quot;color:#777&quot;&gt;// your benchmark code goes here...&lt;/span&gt;
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;More Samples&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As a part of this project, a few benchmarks have been created in the Role Strategy Plugin which show
configuring the instances for various situations. You can find them
&lt;a href=&quot;https://github.com/jenkinsci/role-strategy-plugin/tree/master/src/test/java/jmh/benchmarks&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;running-benchmarks&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#running-benchmarks&quot; /&gt;Running Benchmarks&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Running benchmarks from Maven&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To easily run benchmarks from Maven, a Maven profile to run the benchmarks has been created
and is available starting Plugin-POM version 3.45. You can then run your benchmarks from the
command line using &lt;code&gt;mvn test -Dbenchmark&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Running benchmarks on ci.jenkins.io&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you have your plugins hosted on ci.jenkins.io, you can easily run benchmarks directly from your Jenkinsfile
by using the &lt;code&gt;runBenchmarks()&lt;/code&gt; method after the &lt;code&gt;buildPlugin()&lt;/code&gt; step in your which is now available in
&lt;a href=&quot;https://github.com/jenkins-infra/pipeline-library&quot;&gt;Jenkins Pipeline library&lt;/a&gt;.
This function also accepts the path to your generated JMH benchmark reports as an optional
parameter and archives the benchmark results. Running benchmarks in pull request builds allows you to constantly
monitor the performance implications of a given change. For example, the Jenkinsfile from Role Strategy Plugin:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;groovy&quot;&gt;buildPlugin()
runBenchmarks(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;jmh-report.json&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;visualizing-benchmark-results&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#visualizing-benchmark-results&quot; /&gt;Visualizing benchmark results&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Benchmark reports generated (in JSON) can be visualized using the either the &lt;a href=&quot;https://plugins.jenkins.io/jmh-report&quot;&gt;JMH Report Plugin&lt;/a&gt;
or by passing the benchmark reports to the &lt;a href=&quot;https://jmh.morethan.io&quot;&gt;JMH visualizer&lt;/a&gt; web service. As an example, here is
a visualized report of some benchmarks from the Role Strategy Plugin:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://zbynek.github.io/jenkins.io/order-syntax/images/post-images/jmh-microbenchmark-framework/jmh-visualizer.png&quot; alt=&quot;Role Strategy Plugin benchmarks visualized by JMH Visualizer&quot;&gt;
&lt;/img&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;These improvements seen above were obtained through a small &lt;a href=&quot;https://github.com/jenkinsci/role-strategy-plugin/pull/81&quot;&gt;pull request&lt;/a&gt;
to the plugin and shows how even seemingly small changes can bring major performance improvements. Microbenchmarks
help to find these hot-spots and estimate the impact of changes.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;some-tips-and-tricks&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#some-tips-and-tricks&quot; /&gt;Some tips and tricks&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Since &lt;code&gt;BenchmarkRunner&lt;/code&gt; class name in the example above does not qualify as a test according to Maven surefire plugin’s
naming conventions, the benchmarks will not interfere with your JUnit tests.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Benchmark methods need to be annotated by &lt;code&gt;@Benchmark&lt;/code&gt; for JMH to detect them.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Classes containing benchmarks are found automatically by the &lt;code&gt;BenchmarkFinder&lt;/code&gt;
when annotated with &lt;code&gt;@JmhBenchmark&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A reference to the Jenkins instance is available through either &lt;code&gt;JmhBenchmarkState#getJenkins()&lt;/code&gt; or through
&lt;code&gt;Jenkins.getInstance()&lt;/code&gt; like you would otherwise do.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;JmhBenchmarkState&lt;/code&gt; provides &lt;code&gt;setup()&lt;/code&gt; and &lt;code&gt;tearDown()&lt;/code&gt; methods which can be overridden to configure the
Jenkins instance according to your benchmark’s requirements.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The benchmark builds on ci.jenkins.io are currently throttled because of the limited availability of &lt;code&gt;highmem&lt;/code&gt; nodes.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The benchmark framework was made available in Jenkins Test Harness 2.50, it is recommended to use version &lt;a href=&quot;https://github.com/jenkinsci/jenkins-test-harness/releases/tag/jenkins-test-harness-2.51&quot;&gt;2.51&lt;/a&gt; as it includes some bug fixes.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;links-and-feedback&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#links-and-feedback&quot; /&gt;Links and Feedback&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you have any feedback, comments or questions, please feel free to reach out to me through either
the &lt;a href=&quot;https://gitter.im/jenkinsci/role-strategy-plugin&quot;&gt;Role Strategy Plugin Gitter chat&lt;/a&gt; or through
the &lt;a href=&quot;mailto:jenkinsci-dev@googlegroups.com&quot;&gt;Jenkins Developer Mailing list&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://drive.google.com/file/d/1gig6u64rzvSzGKjN_PTTXTkSXQ9Ah7E5/view?usp=sharing&quot;&gt;Presentation slides&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://youtu.be/lyfbmhQd0Ag?t=847&quot;&gt;Demo at Platform SIG meeting&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Documentation for the micro-benchmark framework:&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/jenkinsci/jenkins-test-harness/blob/master/docs/jmh-benchmarks.adoc&quot;&gt;Writing benchmarks (Jenkins Test Harness)&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/jenkinsci/configuration-as-code-plugin/blob/master/docs/benchmarks/jmh-benchmarks.md&quot;&gt;Preconfiguring benchmarks using JCasC&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/jenkinsci/plugin-pom#running-benchmarks&quot;&gt;Running benchmarks using Plugin POM profile&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/jenkins-infra/pipeline-library#runbenchmarks&quot;&gt;Build Step for running benchmarks on ci.jenkins.io&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://zbynek.github.io/jenkins.io/order-syntax/blog/2019/06/03/DevOps-World-Jenkins-World-2019-San-Francisco-Agenda-is-Live/</id>
<title>DevOps World-Jenkins World 2019 San Francisco: Agenda is Live</title>
<updated>2019-12-12T20:07:24+00:00</updated>
<published>2019-06-03T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://zbynek.github.io/jenkins.io/order-syntax/blog/2019/06/03/DevOps-World-Jenkins-World-2019-San-Francisco-Agenda-is-Live/" />
<author>
<name>alyssat</name>
</author>
<category term="event"></category>
<category term="devopsworldjenkinsworld2019"></category>
<summary>
We are a little over two months away from the largest Jenkins gathering of the year.  From Jenkins users, to maintainers, contributors, mentors and those new to Jenkins this event will have something for everyone.


This year’s DevOps World - Jenkins World 2019 San Francisco has moved to a larger venue to facilitate the growth. From August 12 - 15, 2019 the event will take place at the Moscone West Center.  The event boasts 100+ sessions, and will offer training, hands-on workshops, onsite certification, contributor summit and much more.  Conference attendees can expect to be inspired while learning...
</summary>
<content type="html">
&lt;div class=&quot;imageblock center center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://zbynek.github.io/jenkins.io/order-syntax/images/post-images/dwjw-2019/2019-dwjw-email-san-fran-rev.png&quot; alt=&quot;2019 dwjw email san fran&quot; height=&quot;256&quot;&gt;
&lt;/img&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We are a little over two months away from the largest Jenkins gathering of the year.  From Jenkins users, to maintainers, contributors, mentors and those new to Jenkins this event will have something for everyone.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This year’s &lt;a href=&quot;https://www.cloudbees.com/devops-world/san-francisco&quot;&gt;&lt;strong&gt;DevOps World - Jenkins World 2019 San Francisco&lt;/strong&gt;&lt;/a&gt; has moved to a larger venue to facilitate the growth. From August 12 - 15, 2019 the event will take place at the Moscone West Center.  The event boasts 100+ sessions, and will offer training, hands-on workshops, onsite certification, contributor summit and much more.  Conference attendees can expect to be inspired while learning the latest innovations from industry leaders. Attendees will learn the value that digital transformation has in delivering software more efficiently, more quickly and with higher quality.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We are excited to announce most of the agenda for DevOps World Jenkins World San Francisco is now live. We will continue to fill out the agenda with more sessions, trainings/workshops, and activities. Below is a small sampling of sessions from some of our favorite Jenkins contributors:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;jenkins-configuration-as-code-try-it-start-contributing-ewelina-wilkosz&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#jenkins-configuration-as-code-try-it-start-contributing-ewelina-wilkosz&quot; /&gt;Jenkins Configuration as Code: try it &amp;amp; start contributing! - &lt;a href=&quot;https://github.com/ewelinawilkosz&quot;&gt;Ewelina Wilkosz&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/jenkinsci/configuration-as-code-plugin&quot;&gt;Jenkins Configuration as Code&lt;/a&gt; is an open source Jenkins plugin that allows users to keep complete Jenkins configuration in a simple configuration file (yaml format). In the talk, I’ll briefly present the history of the plugin, the vision for the future and current status. Then I’ll move to the demo section where I’ll show how easy it is to configure and run Jenkins with the help of the plugin.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;thinking-about-jenkins-security-mark-waite-wadeck-follonier&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#thinking-about-jenkins-security-mark-waite-wadeck-follonier&quot; /&gt;Thinking about Jenkins Security - &lt;a href=&quot;https://github.com/MarkEWaite&quot;&gt;Mark Waite &amp;amp; Wadeck Follonier&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Jenkins security concepts, authorization, authentication and auditing, secure builds, agent security, configuration and administration security, auditing, and security best practices.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;docker-and-jenkins-as-code-dr-oleg-nenashev&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#docker-and-jenkins-as-code-dr-oleg-nenashev&quot; /&gt;Docker and Jenkins [as Code] - &lt;a href=&quot;https://github.com/oleg-nenashev&quot;&gt;Dr. Oleg Nenashev&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Configuration as Code plugin is a new milestone which enables managing Jenkins configurations via YAML. Together with Docker, this plugin offers many ways to produce ready-to-fly Jenkins images for any environments. In my talk, I will describe official master and agent images offered by the Jenkins project. What’s inside them? How do you configure images with JCasC and Groovy hooks? How do you use these approaches together? And, finally, how do you simplify packaging of custom Jenkins images and define the entire system [as code]?&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;can-jenkins-be-the-engine-of-mobile-devops-shashikant-jagtap&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#can-jenkins-be-the-engine-of-mobile-devops-shashikant-jagtap&quot; /&gt;Can Jenkins be the Engine of Mobile DevOps? - &lt;a href=&quot;https://github.com/shashikantjagtap&quot;&gt;Shashikant Jagtap&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this talk, we will explore the following topics:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;How mobile DevOps is different than web DevOps&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Challenges in mobile DevOps ( iOS and Android)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;How Jenkins fits in mobile DevOps and CI/CD pipelines&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;What Jenkins misses for mobile&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;How we can make Jenkins better for mobile apps&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;creating-a-cicd-pipeline-for-your-shared-libraries-roderick-randolph&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#creating-a-cicd-pipeline-for-your-shared-libraries-roderick-randolph&quot; /&gt;Creating a CI/CD Pipeline for Your Shared Libraries - &lt;a href=&quot;https://github.com/roderickrandolph&quot;&gt;Roderick Randolph&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;At Capital One we run tens of thousands of CI/CD pipelines on Jenkins, leveraging the Jenkins Pipeline shared libraries extension to enable code reuse and decrease time to market for dev teams. A code change to our shared library goes live immediately and is consumed the next time a team triggers their project’s pipeline. So, why do we have such high confidence that a code change to our library won’t break a team’s pipeline? The answer: we’ve developed a fully automated CI/CD pipeline for our shared library.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;During this talk, you will learn how to create a fully automated pipeline for your shared libraries including how to develop tests, create canary releases, monitor for issues and quickly rollback changes to your shared library to achieve rapid delivery while minimizing any impact on dev teams.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;how-jenkins-builds-and-delivers-jenkins-in-the-cloud-brian-benz-tyler-croy&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#how-jenkins-builds-and-delivers-jenkins-in-the-cloud-brian-benz-tyler-croy&quot; /&gt;How Jenkins Builds and Delivers Jenkins in the Cloud - &lt;a href=&quot;https://github.com/bbenz&quot;&gt;Brian Benz&lt;/a&gt; &amp;amp; &lt;a href=&quot;https://github.com/rtyler&quot;&gt;Tyler Croy&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Want to know how Jenkins builds Jenkins? Catch this session to see the real-life implementation of Jenkins’ development (at &lt;a href=&quot;https://ci.jenkins.io&quot;&gt;ci.jenkins.io&lt;/a&gt;) and delivery infrastructure in the cloud as it evolved from a mix of platforms to multi-platform VMs, containers and Kubernetes on Microsoft Azure.  Expect a frank discussion of issues that were encountered along the way, how the architecture has evolved and what’s on the roadmap.  We’ll share important tips and tricks for implementing your own Jenkins infrastructure on any cloud, based on Jenkins’ own implementation experience.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;declarative-pipeline-2019-tips-tricks-and-whats-next-liam-newman&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#declarative-pipeline-2019-tips-tricks-and-whats-next-liam-newman&quot; /&gt;Declarative Pipeline 2019: Tips, Tricks and What’s Next - &lt;a href=&quot;https://github.com/bitwiseman&quot;&gt;Liam Newman&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Are you using Declarative Pipeline? Are you considering using them? Are you just curious? Well, we’re going to help you get more out of Declarative Pipeline with less complexity and less effort. We’ll walk through some best practices, point out some tricks you might not have known, warn you off some common mistakes, review what’s changed in the last year and give you a preview of what we’re working on for Declarative Pipeline going forward.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;say-goodbye-to-hello-world-say-hello-to-real-world-delivery-pipelines-brian-benz-jessica-deen&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#say-goodbye-to-hello-world-say-hello-to-real-world-delivery-pipelines-brian-benz-jessica-deen&quot; /&gt;Say Goodbye to Hello World, Say Hello to Real World Delivery Pipelines - &lt;a href=&quot;https://github.com/bbenz&quot;&gt;Brian Benz&lt;/a&gt; &amp;amp; &lt;a href=&quot;https://github.com/jldeen&quot;&gt;Jessica Deen&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Are you tired of &quot;Hello World&quot; and hypothetical demos? So are we! In this code-heavy, deeply technical session, you’ll learn more than just tips and tricks.  You’ll learn best practices and how to start from absolute zero. Whether you’re using Jenkins, Azure DevOps, a mixture of the two, or another CI/CD tool, you’ll learn how to create multiple build and release pipelines using real world code hosted on open source platforms such as GitHub.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For the complete agenda see &lt;a href=&quot;https://www.cloudbees.com/devops-world/san-francisco&quot;&gt;&lt;strong&gt;DevOps World - Jenkins World 2019 San Francisco&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Feel free to use discount code &lt;strong&gt;JWFOSS&lt;/strong&gt; for a 30% discount off your &lt;a href=&quot;https://www.cloudbees.com/devops-world/san-francisco&quot;&gt;pass&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Hope to see you there!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://zbynek.github.io/jenkins.io/order-syntax/blog/2019/05/30/becoming-contributor-newbie-tickets/</id>
<title>Becoming a Jenkins contributor: Newbie-friendly tickets</title>
<updated>2019-12-12T20:07:24+00:00</updated>
<published>2019-05-30T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://zbynek.github.io/jenkins.io/order-syntax/blog/2019/05/30/becoming-contributor-newbie-tickets/" />
<author>
<name>romenrg</name>
</author>
<category term="jenkins"></category>
<category term="community"></category>
<category term="developer"></category>
<category term="contributing"></category>
<category term="newcomer"></category>
<summary>
Two months ago I published an introductory article on
the journey of becoming a Jenkins contributor. In that first article, the jenkins.io site was reviewed, learning about
the multiple ways in which we can participate and contribute. Then, a first&#8212;&#8203;basic&#8212;&#8203;contribution I made to the site
repository was described.


Now, in this new article we will be exploring more advanced contributions, committing code to the actual Jenkins core.


Getting started with tickets and processes


Beginners guide to contributing and Jenkins Jira

Reviewing the developer section in jenkins.io is probably the best starting point, and a
reference link to keep handy. The beginners guide to contributing to Jenkins
can also be...
</summary>
<content type="html">
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Two months ago I published an &lt;a href=&quot;https://jenkins.io/blog/2019/03/29/becoming-contributor-intro/&quot;&gt;introductory article&lt;/a&gt; on
the journey of becoming a Jenkins contributor. In that first article, the jenkins.io site was reviewed, learning about
the multiple ways in which we can participate and contribute. Then, a first—​basic—​contribution I made to the site
repository was described.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now, in this new article we will be exploring more advanced contributions, committing code to the actual Jenkins core.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;getting-started-with-tickets-and-processes&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#getting-started-with-tickets-and-processes&quot; /&gt;Getting started with tickets and processes&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;beginners-guide-to-contributing-and-jenkins-jira&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#beginners-guide-to-contributing-and-jenkins-jira&quot; /&gt;Beginners guide to contributing and Jenkins Jira&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Reviewing the &lt;a href=&quot;https://jenkins.io/doc/developer/&quot;&gt;developer section&lt;/a&gt; in jenkins.io is probably the best starting point, and a
reference link to keep handy. The &lt;a href=&quot;https://wiki.jenkins.io/display/JENKINS/Beginners+Guide+to+Contributing&quot;&gt;beginners guide to contributing to Jenkins&lt;/a&gt;
can also be useful, since it points to different repositories, tools (such as the issue tracker) and governance documents.
Besides, it describes best practices for commit messages, code style conventions, PR guidelines, etc.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Once we get a general understanding of the former and want to actually start coding, we may get stuck trying to come up
with something to work on.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Visiting the &lt;a href=&quot;https://issues.jenkins-ci.org/projects/JENKINS/issues&quot;&gt;Jenkins issue tracker&lt;/a&gt;, feels like the natural next
step, since it is full of potential bugs and enhancements that have already been reported by the community. However, it
is quite easy to feel overwhelmed by the possibilities listed there. Bear in mind that in a 10+-year-old project like
this, most of the things that are reported are tricky for a newcomer to work on. For that reason, filtering by
&lt;a href=&quot;https://issues.jenkins-ci.org/issues/?jql=project%20%3D%20JENKINS%20AND%20status%20in%20(Open%2C%20%22In%20Progress%22%2C%20Reopened)%20AND%20component%20%3D%20core%20AND%20labels%20in%20(newbie-friendly)&quot;&gt;newbie-friendly tickets&lt;/a&gt; is probably
the best idea.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://zbynek.github.io/jenkins.io/order-syntax/images/post-images/2019-05-30-becoming-contributor/list-newbie-tickets.png&quot; alt=&quot;list newbie tickets&quot;&gt;
&lt;/img&gt;
&lt;div class=&quot;title&quot;&gt;Figure 1. Screenshot displaying the list of newbie-friendly tickets in the Jenkins Jira&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;selecting-a-ticket&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#selecting-a-ticket&quot; /&gt;Selecting a ticket&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In my case, I spent some time reviewing the &lt;code&gt;newbie-friendly&lt;/code&gt; tickets, until &lt;a href=&quot;https://issues.jenkins-ci.org/browse/JENKINS-56477&quot;&gt;I found one&lt;/a&gt;
that seemed interesting to me and also looked like something I would be able to fix:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://zbynek.github.io/jenkins.io/order-syntax/images/post-images/2019-05-30-becoming-contributor/jenkins-newbie-jira-ticket-selected.png&quot; alt=&quot;jenkins newbie jira ticket selected&quot;&gt;
&lt;/img&gt;
&lt;div class=&quot;title&quot;&gt;Figure 2. Screenshot of the ticket I decided to work on&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;processes&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#processes&quot; /&gt;Processes&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;At this stage, when we have decided to take ownership of a ticket, it’s a good practice to let the rest of the community
know that we are planning to start working on it. We can do so easily, by assigning the ticket to ourselves (see the
“&lt;em&gt;Assign&lt;/em&gt;” button below the ticket summary).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Assigning the ticket to ourselves in the Jenkins Jira will allow any other contributors to know that we are planning to
take care of the ticket; and in case they are also interested in contributing to it, they will know who to reach if they
want to coordinate work or ask for status. That said, it is worth mentioning that assigning a ticket to yourself does
not mean that other contributors cannot work on it from then onwards. Jenkins is an open-source project and anyone is
welcome to create their own PRs, so anybody can propose their own solution to the ticket. But as you can guess, if the
ticket is assigned to somebody, most people will probably reach the assignee before starting to work on it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Related to the former, it is also important to bear in mind that we should not postpone work on the ticket for too long
once we have assigned the ticket to ourselves. Other potential contributors might be ignoring the ticket because they
see yourself assigned to it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Once we are about to actually start working on the ticket, it is also a good practice to click the “&lt;em&gt;Start Progress&lt;/em&gt;”
button. This action will change the status to “&lt;em&gt;In progress&lt;/em&gt;”, signaling to the community that we are currently working
on this particular ticket.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;setting-up-the-necessary-stuff-on-our-computer&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#setting-up-the-necessary-stuff-on-our-computer&quot; /&gt;Setting up the necessary stuff on our computer&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;configuring-installing-and-testing&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#configuring-installing-and-testing&quot; /&gt;Configuring, installing and testing&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As described in the &lt;a href=&quot;https://jenkins.io/blog/2019/03/29/becoming-contributor-intro/&quot;&gt;first article of this journey&lt;/a&gt;, the
initial step to start contributing to a particular repository is to fork it to our GitHub account, and then clone it to
our local computer.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As usual, in the Jenkins core repository the &lt;a href=&quot;https://github.com/jenkinsci/jenkins/blob/master/CONTRIBUTING.md&quot;&gt;CONTRIBUTING file&lt;/a&gt;
describes the necessary steps to get the repository working locally. This includes installing the necessary development
tools: Java Development Kit (&lt;em&gt;&lt;a href=&quot;https://adoptopenjdk.net/&quot;&gt;OpenJDK&lt;/a&gt; is the recommended choice&lt;/em&gt;), Maven and any IDE supporting
Maven projects. Note that instructions to install JDK and Maven are linked in the contributing guidelines.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Once we have all the necessary tools installed and configured, we are ready to &lt;a href=&quot;https://github.com/jenkinsci/jenkins/blob/master/CONTRIBUTING.md#building-and-debugging&quot;&gt;build Jenkins locally&lt;/a&gt;
and also to &lt;a href=&quot;https://github.com/jenkinsci/jenkins/blob/master/CONTRIBUTING.md#testing-changes&quot;&gt;run tests&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;getting-down-to-business&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#getting-down-to-business&quot; /&gt;Getting down to business&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;reviewing-ticket-details&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#reviewing-ticket-details&quot; /&gt;Reviewing ticket details&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now that I was ready to start working on the ticket, I had to review it in more detail, to fully understand the problem.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The description of the ticket I was planning to work on included two links. The first one was to
&lt;a href=&quot;https://github.com/jenkinsci/jenkins/pull/3715#issuecomment-470873111&quot;&gt;a screenshot that showed the actual bug&lt;/a&gt;. It showed
how several non-compatible plugins were being selected when clicking “&lt;em&gt;All&lt;/em&gt;”, even though the intended behavior was to
only select the compatible plugins. The second link was &lt;a href=&quot;https://github.com/jenkinsci/jenkins/blob/master/core/src/main/resources/hudson/PluginManager/table.jelly#L108…​L120&quot;&gt;a reference to a code fragment&lt;/a&gt;
that showed other validations that had to be taken into account when checking if a plugin update was compatible or not
with the current installation.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;reproducing-the-issue-locally&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#reproducing-the-issue-locally&quot; /&gt;Reproducing the issue locally&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Even though I had now understood the issue in better detail, I had not seen it myself live yet, so it seemed to me that
the next logical step was to reproduce it locally.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To reproduce the issue locally in our computer, we can either use the local &lt;code&gt;war&lt;/code&gt; file that we can generate by
&lt;a href=&quot;https://github.com/jenkinsci/jenkins/blob/master/CONTRIBUTING.md#building-and-debugging&quot;&gt;building Jenkins from the source code&lt;/a&gt;
or we can download the &lt;a href=&quot;https://jenkins.io/download/&quot;&gt;latest Jenkins version&lt;/a&gt; available and run it locally. When I worked
on this ticket, the latest available version was &lt;code&gt;2.172&lt;/code&gt; and, when I built if from the sources I saw version &lt;code&gt;2.173-SNAPSHOT&lt;/code&gt;,
which was the next version, in which the community was already working on.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In general it is a good idea to reproduce bugs locally, not only to get a better understanding, but also to make sure
they are actual issues. It could always be an issue happening only on the reporter’s end (e.g. some user misconfiguration).
Or it could be a ticket referencing an old issue that has been fixed already. This latest possibility didn’t sound that
strange to me, since the ticket was one month old. It could have been handled by someone else in the meantime, without
noticing the ticket existed. Or the contributor might have forgotten to update the ticket in the issue tracker after the
fix was committed.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So, for all the reasons above, I ran the latest Jenkins version locally. From a terminal, I went to the
folder in which the war file was placed, and ran &lt;code&gt;java -jar jenkins.war&lt;/code&gt;, which starts Jenkins locally on &lt;a href=&quot;http://localhost:8080&quot; class=&quot;bare&quot;&gt;http://localhost:8080&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;From the home page I navigated to the Plugin Manager (clicking the “&lt;em&gt;Manage Jenkins&lt;/em&gt;” link in the left hand side and
then selecting “&lt;em&gt;Manage Plugins&lt;/em&gt;” in the list).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the Manage Plugins page, the list of plugin updates appears. In my case, since I re-used an old &lt;code&gt;JENKINS_HOME&lt;/code&gt;
from an older installation, several plugins showed up in the list, requiring updates. That allowed me to test the behavior
that was supposed to be failing.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When I clicked on the “Select all” option at the bottom, this is what I got:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://zbynek.github.io/jenkins.io/order-syntax/images/post-images/2019-05-30-becoming-contributor/jenkins-plugin-manager-updates-selected-bottom.png&quot; alt=&quot;jenkins plugin manager updates selected bottom&quot;&gt;
&lt;/img&gt;
&lt;div class=&quot;title&quot;&gt;Figure 3. Screenshot showing the error, reproduced locally, after clicking “Select All”&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As it had been reported in the ticket, the behavior was inconsistent. In a previous version, the behavior of the “&lt;em&gt;All&lt;/em&gt;”
selector had been changed (with the best intent), aiming to only check the compatible plugins. However, as can be seen
in the screenshot, the behavior was not the expected one. Now, neither “all” nor “only compatible” plugins were being
selected, since some plugins with compatibility issues were also being checked, unintentionally.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;figuring-out-a-fix&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#figuring-out-a-fix&quot; /&gt;Figuring out a fix&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When reading the conversation in the original PR in which the behavior of the “&lt;em&gt;All&lt;/em&gt;” selector had been changed, I saw a
suggestion of having a separate “&lt;em&gt;Compatible&lt;/em&gt;” selector, thus leaving the “&lt;em&gt;All&lt;/em&gt;” selector with the traditional behavior.
I liked the idea, so I decided to include it as part of my proposed change.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;At this stage, I had a clear picture of the different things I needed to change. These included: 1) The UI, to add a new
selector for “Compatible” plugins only, 2) the JS code that applied the changes to the interface when the selectors were
clicked and 3) probably the back-end method that was determining if a plugin was compatible or not.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;applying-the-change&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#applying-the-change&quot; /&gt;Applying the change&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As usual, and as it is also recommended in the contributing guidelines, I created a separate feature branch to work on
the ticket.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;After reviewing the code, I spent some time figuring out which pieces I needed to change, both in the back-end and also
in the front-end. For more details about the changes I had to make, you can take a look at the &lt;a href=&quot;https://github.com/jenkinsci/jenkins/pull/3985/files&quot;&gt;changes in my PR&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As a basic summary, I learned that the classic Jenkins UI was built using &lt;a href=&quot;https://commons.apache.org/proper/commons-jelly/tutorial.html&quot;&gt;Jelly&lt;/a&gt;
and, after understanding its basics, I modified the &lt;code&gt;index.jelly&lt;/code&gt; file to include the new selector, assigning the
function that checked the compatible plugins to this new selector, and re-using the existing “toggle” function to set
all checkboxes to true in the case of “&lt;em&gt;All&lt;/em&gt;”. I also had to modify the behavior of the &lt;code&gt;checkPluginsWithoutWarnings&lt;/code&gt;
JavaScript function, to un-check the incompatible ones, since there was now an actual “&lt;em&gt;All&lt;/em&gt;” selector that was not there
previously, and that un-check case was not being taken into account. Then, I created a new back-end Java method
&lt;code&gt;isCompatible&lt;/code&gt;, inside the &lt;code&gt;UpdateSite.java&lt;/code&gt; class, which now calls all the different methods that check different
compatibilities and returns the combined boolean result. For this change, I included an automated test to verify the
correct behavior of the method, contributing to the test coverage of the project. Finally, I modified the &lt;code&gt;table.jelly&lt;/code&gt;
file to call the new back-end method from the UI, replacing the existing one that was not taking all cases into account.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As you can see, the change involved touching different technologies, but even if you face a similar situation in which
you are not familiar with some of them, my advice would be carry on, don’t let that stop you. As software engineers, we
should &lt;a href=&quot;https://github.com/romenrg/evergreen-skills-developers&quot;&gt;focus on our evergreen skills&lt;/a&gt;, rather than on knowing
specific technologies; adapting to whatever framework we have to use at a given moment, learning whatever we need about
the new technology to complete the task and applying cross-framework principles and best practices to provide a quality
solution.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;result&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#result&quot; /&gt;Result&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;After the changes described above, the resulting UI includes a new option, and the corresponding behaviors of the three
selectors work as expected:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://zbynek.github.io/jenkins.io/order-syntax/images/post-images/2019-05-30-becoming-contributor/fixed-select-compatible.png&quot; alt=&quot;fixed select compatible&quot;&gt;
&lt;/img&gt;
&lt;div class=&quot;title&quot;&gt;Figure 4. Screenshot of the new version, displaying the behavior achieved by clicking the new “Compatible” selector&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;publishing-the-change&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#publishing-the-change&quot; /&gt;Publishing the change&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;submitting-a-pull-request&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#submitting-a-pull-request&quot; /&gt;Submitting a Pull Request&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the contributing guidelines of the Jenkins core repository there is also a section about &lt;a href=&quot;https://github.com/jenkinsci/jenkins/blob/master/CONTRIBUTING.md#proposing-changes&quot;&gt;proposing changes&lt;/a&gt;,
which describes the necessary steps that have to be followed in order to create a Pull Request (PR) with our change.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Furthermore, there is a &lt;a href=&quot;https://github.com/jenkinsci/jenkins/blob/master/.github/PULL_REQUEST_TEMPLATE.md&quot;&gt;PR template&lt;/a&gt; in
the repository, which will be loaded automatically when creating a new PR and that will serve as a basis for us to provide
the necessary information for the reviewers. We are expected to: include a link to the ticket, list the proposed changelog
entries describing our changes, complete the submitter checklist and add mentions to the desired reviewers (if any).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In my case, &lt;a href=&quot;https://github.com/jenkinsci/jenkins/pull/3985#issue-270291185&quot;&gt;I followed the template when creating my PR&lt;/a&gt;,
completing all sections. I linked the Jira ticket, provided two proposed changelog entries, completed the submitter
checklist and added three desired reviewers (explaining why I thought their reviews would be valuable). I also linked
the original PR that was referenced in the ticket, to provide further context.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://zbynek.github.io/jenkins.io/order-syntax/images/post-images/2019-05-30-becoming-contributor/pr-created.png&quot; alt=&quot;pr created&quot;&gt;
&lt;/img&gt;
&lt;div class=&quot;title&quot;&gt;Figure 5. Screenshot of the PR I submitted&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;the-approve-and-merge-process&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#the-approve-and-merge-process&quot; /&gt;The approve and merge process&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As stated in the contributing guidelines, typically two approvals are needed for the PR to be merged; and it can take
from a few days to a couple of weeks to get them. Sometimes, one approval from a reviewer and a 1-week delay without
extra reviews is considered enough to set the PR as &lt;code&gt;ready-for-merge&lt;/code&gt;. However, both the time-to-merge and the number
of approvals necessary might vary, depending on the complexity of the change or the area of Jenkins core that it affects.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;After the necessary approvals have been received, a Jenkins core maintainer will set the PR as  &lt;code&gt;ready-for-merge&lt;/code&gt;, which
will lead to it being merged into the master branch when one of the following releases are being prepared.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In my case, I received a review by Daniel (the reporter of the ticket and one of my “desired reviewers”) the very day I
submitted the PR (April 14th). He made several very useful suggestions, which led to changes from my side. After those
changes, Daniel made minor remarks and my PR got another review, which was its first approval. After a week had passed
without further news, I added the remaining minor suggestions from Daniel and a few days later received another approval,
to which Daniel’s final approval was added, leading the PR to be labeled &lt;code&gt;ready-for-merge&lt;/code&gt;, being later merged the same
day (April 26th).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://zbynek.github.io/jenkins.io/order-syntax/images/post-images/2019-05-30-becoming-contributor/pr-merged.png&quot; alt=&quot;pr merged&quot;&gt;
&lt;/img&gt;
&lt;div class=&quot;title&quot;&gt;Figure 6. Screenshot of the final state of the PR, after being merged&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;release&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#release&quot; /&gt;Release&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For every new release, repository maintainers will select a set of PRs that have already been labeled &lt;code&gt;ready-for-merge&lt;/code&gt;,
merge them to master, prepare changelogs (often using the suggestions included in the PRs by the authors) and proceed with
the creation of the new release. There is no additional action required from Pull Request authors at this point.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Every week a new version of Jenkins is released, so when your PR is merged, your changes will—​most likely—​become part
of the following weekly release of Jenkins.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Eventually, your changes will also reach the &lt;a href=&quot;https://jenkins.io/download/lts/&quot;&gt;Long-term support (LTS) release&lt;/a&gt;, which is
a different release line, aimed for more conservative users. This release line gets synced with the weekly release by
picking, every 12 weeks, a relatively recent weekly release as baseline for the new LTS release. In between, intermediate
LTS releases are created only to include important bug fixes, cherry-picked from the weekly releases. New features are
typically delayed until the next baseline for the LTS release is defined.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Regarding the example described in this post, &lt;strong&gt;it was released in Jenkins &lt;code&gt;2.175&lt;/code&gt;&lt;/strong&gt; (weekly release), soon after being
merged. And will probably be included in the next LTS, which should be released next month (June 2019).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;done&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#done&quot; /&gt;Done!&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;And that’s it! We have now covered the whole lifecycle of a new proposed change to Jenkins core. We have reviewed the
process from the very beginning, picking a ticket from the Jenkins issue tracker; all the way to the end, having our
change released in a new Jekins version.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you have never contributed but are willing to do so, I hope this article motivates you to go back to the list of
&lt;a href=&quot;https://issues.jenkins-ci.org/issues/?jql=project%20%3D%20JENKINS%20AND%20status%20in%20(Open%2C%20%22In%20Progress%22%2C%20Reopened)%20AND%20component%20%3D%20core%20AND%20labels%20in%20(newbie-friendly)&quot;&gt;&lt;code&gt;newbie-friendly&lt;/code&gt; tickets&lt;/a&gt;, find one that looks interesting to you, and follow the steps described above, until you see
your own change released in a new Jenkins version.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Remember, don’t try to solve a complicated issue as your first ticket, there are plenty of easier ways in which you can
contribute, and every little helps!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://zbynek.github.io/jenkins.io/order-syntax/blog/2019/05/22/outreachy-audit-log-project/</id>
<title>Audit Logging in Jenkins: An Outreachy Project</title>
<updated>2019-12-12T20:07:24+00:00</updated>
<published>2019-05-22T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://zbynek.github.io/jenkins.io/order-syntax/blog/2019/05/22/outreachy-audit-log-project/" />
<author>
<name>jvz</name>
</author>
<category term="community"></category>
<category term="logging"></category>
<category term="outreachy"></category>
<summary>
The Audit Log Plugin for Jenkins is an in development project to integrate standardized audit logging trails to various core actions in Jenkins.
This project integrates the recently released Apache Log4j Audit library to allow for a vast array of possible audit logging destinations and configuration.
We began this plugin not long after Log4j Audit 1.0.0 was released last year by partnering with Outreachy where we mentored two interns who laid the foundations of the project.
This year, we applied to Outreachy again to continue the project, and we were able to accept two more Outreachy interns: Aarthi Rajaraman and Gayathri Rajendar.
Both have...
</summary>
<content type="html">
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;a href=&quot;https://github.com/jenkinsci/audit-log-plugin&quot;&gt;Audit Log Plugin&lt;/a&gt; for Jenkins is an in development project to integrate standardized audit logging trails to various core actions in Jenkins.
This project integrates the recently released &lt;a href=&quot;https://logging.apache.org/log4j-audit/latest/&quot;&gt;Apache Log4j Audit&lt;/a&gt; library to allow for a vast array of possible audit logging destinations and configuration.
We began this plugin not long after Log4j Audit 1.0.0 was released last year by partnering with &lt;a href=&quot;https://www.outreachy.org/&quot;&gt;Outreachy&lt;/a&gt; where we &lt;a href=&quot;https://jenkins.io/blog/2018/12/10/outreachy-audit-log-plugin/&quot;&gt;mentored two interns&lt;/a&gt; who laid the foundations of the project.
This year, we applied to Outreachy again to continue the project, and we were able to accept two more Outreachy interns: &lt;a href=&quot;https://github.com/aarthira&quot;&gt;Aarthi Rajaraman&lt;/a&gt; and &lt;a href=&quot;https://github.com/gayathrirajendar&quot;&gt;Gayathri Rajendar&lt;/a&gt;.
Both have already been adding new features and improving the plugin over the past couple months, and the internship officially began on 20 May.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This round has some ambitious goals of various features and documentation we wish to create.
After having added audit log support for several built-in event listeners in Jenkins around the lifecycle of projects, builds, nodes, and authentication during both the previous internship and the applications to this one, we would like to accomplish the following:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Make a &lt;a href=&quot;https://github.com/jenkinsci/audit-log-plugin/milestone/1&quot;&gt;1.0 release&lt;/a&gt; of the plugin for the Jenkins Update Center. &lt;a href=&quot;https://github.com/jenkinsci/audit-log-plugin/issues/34&quot;&gt;#34&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Add documentation on supported audit log types and configuration options. &lt;a href=&quot;https://github.com/jenkinsci/audit-log-plugin/issues/40&quot;&gt;#40&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Add audit logs for credential usage and lifecycle events. &lt;a href=&quot;https://github.com/jenkinsci/audit-log-plugin/issues/35&quot;&gt;#35&lt;/a&gt;, &lt;a href=&quot;https://github.com/jenkinsci/audit-log-plugin/issues/36&quot;&gt;#36&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Add audit logs for user property lifecycle events. &lt;a href=&quot;https://github.com/jenkinsci/audit-log-plugin/issues/37&quot;&gt;#37&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Define or document an API for other plugins to use to define and log their own audit events. &lt;a href=&quot;https://github.com/jenkinsci/audit-log-plugin/issues/30&quot;&gt;#30&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ensure audit log events use consistent vocabulary with the Jenkins UI. &lt;a href=&quot;https://github.com/jenkinsci/audit-log-plugin/issues/33&quot;&gt;#33&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Add an audit log event recorder/viewer comparable to the Jenkins logger recorder administrative UI. &lt;a href=&quot;https://github.com/jenkinsci/audit-log-plugin/issues/32&quot;&gt;#32&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Add support for configuring a syslog-compatible log server for writing audit logs. &lt;a href=&quot;https://github.com/jenkinsci/audit-log-plugin/issues/29&quot;&gt;#29&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Add support for configuring a relational database such as &lt;a href=&quot;https://www.postgresql.org/&quot;&gt;PostgreSQL&lt;/a&gt; for writing audit logs. &lt;a href=&quot;https://github.com/jenkinsci/audit-log-plugin/issues/31&quot;&gt;#31&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Improve unit test coverage and pay down technical debt. &lt;a href=&quot;https://github.com/jenkinsci/audit-log-plugin/issues/38&quot;&gt;#38&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Begin discovery on alternative ways to manage the underlying Log4j Core configuration such as via the upcoming integration with Spring Cloud Configuration. &lt;a href=&quot;https://github.com/jenkinsci/audit-log-plugin/issues/39&quot;&gt;#39&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the future, we hope to participate with more projects and mentors.
Going on concurrently with Outreachy right now is &lt;a href=&quot;https://jenkins.io/blog/2019/03/04/gsoc2019-announcement/&quot;&gt;Google Summer of Code 2019&lt;/a&gt; where we are mentoring several more projects and students.
Please extend a warm welcome to all our new contributors and community members from Outreachy and GSoC!&lt;/p&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://zbynek.github.io/jenkins.io/order-syntax/blog/2019/05/11/docs-sig-announcement/</id>
<title>Jenkins Documentation Special Interest Group</title>
<updated>2019-12-12T20:07:24+00:00</updated>
<published>2019-05-11T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://zbynek.github.io/jenkins.io/order-syntax/blog/2019/05/11/docs-sig-announcement/" />
<author>
<name>markewaite</name>
</author>
<category term="documentation"></category>
<category term="docs"></category>
<category term="community"></category>
<summary>
We&#8217;re pleased to announce the formation of the Jenkins Documentation Special Interest Group.
The Docs SIG encourages contributors and external communities to create and review Jenkins documentation.


See the Special Interest Group Overview for more details and plans.


How can I help?


The Jenkins Documentation SIG would love to have your help with:




reviewing and fixing open bug reports


reviewing Jenkins documentation pull requests


reviewing Jenkins X documentation pull requests






How can I fix a documentation bug?


Instructions for contributing to the Jenkins documentation are in the CONTRIBUTING file of the site repository.
Follow the instructions in that file and submit pull requests for review.


Instructions for contributing to the Jenkins...
</summary>
<content type="html">
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image right center&quot;&gt;&lt;img src=&quot;https://zbynek.github.io/jenkins.io/order-syntax/images/logos/needs-you/Jenkins_Needs_You-02.png&quot; alt=&quot;Jenkins Needs You&quot; height=&quot;256&quot; /&gt;&lt;/span&gt;
&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We’re pleased to announce the formation of the Jenkins Documentation Special Interest Group.
The Docs SIG encourages contributors and external communities to create and review Jenkins documentation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;See the &lt;a href=&quot;https://zbynek.github.io/jenkins.io/order-syntax/sigs/docs&quot;&gt;Special Interest Group Overview&lt;/a&gt; for more details and plans.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;how-can-i-help&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#how-can-i-help&quot; /&gt;How can I help?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Jenkins Documentation SIG would love to have your help with:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;reviewing and fixing &lt;a href=&quot;https://issues.jenkins-ci.org/issues/?jql=project%20%3D%20%22Jenkins%20Website%22%20AND%20status%20!%3D%20Done&quot;&gt;open bug reports&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;reviewing &lt;a href=&quot;https://github.com/jenkins-infra/jenkins.io/pulls&quot;&gt;Jenkins documentation pull requests&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;reviewing &lt;a href=&quot;https://github.com/jenkins-x/jx-docs/pulls&quot;&gt;Jenkins X documentation pull requests&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;how-can-i-fix-a-documentation-bug&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#how-can-i-fix-a-documentation-bug&quot; /&gt;How can I fix a documentation bug?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Instructions for contributing to the Jenkins documentation are in the &lt;a href=&quot;https://github.com/jenkins-infra/jenkins.io/blob/master/CONTRIBUTING.adoc#getting-started&quot;&gt;CONTRIBUTING file&lt;/a&gt; of the site repository.
Follow the instructions in that file and submit pull requests for review.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Instructions for contributing to the Jenkins X documentation are on the &lt;a href=&quot;https://jenkins-x.io/contribute/documentation/&quot;&gt;Jenkins X documentation site&lt;/a&gt;.
Follow the instructions in that file and submit pull requests for review.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;how-can-i-evaluate-a-pull-request&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#how-can-i-evaluate-a-pull-request&quot; /&gt;How can I evaluate a pull request?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Pull requests for the Jenkins project are reviewed in the &lt;a href=&quot;https://github.com/jenkins-infra/jenkins.io/pulls&quot;&gt;Jenkins documentation repository&lt;/a&gt;.
Log in to GitHub with your credentials and add your review comments to pull requests.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Pull requests for the Jenkins X project are reviewed in the &lt;a href=&quot;https://github.com/jenkins-x/jx-docs/pulls&quot;&gt;Jenkins X documentation repository&lt;/a&gt;.
Login to GitHub with your credentials and add your review comments to pull requests.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://zbynek.github.io/jenkins.io/order-syntax/blog/2019/05/09/templating-engine/</id>
<title>Introducing the Jenkins Templating Engine!</title>
<updated>2019-12-12T20:07:24+00:00</updated>
<published>2019-05-09T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://zbynek.github.io/jenkins.io/order-syntax/blog/2019/05/09/templating-engine/" />
<author>
<name>steven-terrana</name>
</author>
<category term="general"></category>
<category term="pipeline"></category>
<category term="plugin"></category>
<category term="pipeline-authoring"></category>
<summary>
Implementing DevSecOps practices at the enterprise scale is challenging. With multiple programming languages, automated testing frameworks, and security compliance tools being used by different applications within your organization, it becomes difficult to build and maintain pipelines for each team.


Most pipelines are going to follow the same generic workflow regardless of which specific tech stack is employed by an application.  The Templating Engine Plugin (abbreviated as JTE for Jenkins Templating Engine) allows you to capture this efficiency by creating tool-agnostic, templated workflows to be reused by every team.


As technology consultants with clients in both the public and private sectors, at...
</summary>
<content type="html">
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Implementing DevSecOps practices at the enterprise scale is challenging. With multiple programming languages, automated testing frameworks, and security compliance tools being used by different applications within your organization, it becomes difficult to build and maintain pipelines for each team.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Most pipelines are going to follow the same generic workflow regardless of which specific tech stack is employed by an application.  The &lt;a href=&quot;https://plugins.jenkins.io/templating-engine&quot;&gt;Templating Engine Plugin&lt;/a&gt; (abbreviated as JTE for Jenkins Templating Engine) allows you to capture this efficiency by creating tool-agnostic, templated workflows to be reused by every team.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As technology consultants with clients in both the public and private sectors, at Booz Allen we found ourselves building DevSecOps pipelines from scratch for every new project.  Through developing the Jenkins Templating Engine, we’ve seen pipeline development decrease from months to days now that we can reuse tool integrations while bringing a new level of governance to Jenkins pipelines.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;pipeline-templating&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#pipeline-templating&quot; /&gt;Pipeline Templating&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Organizations benefit from letting application developers focus on what they do best: building applications. Supporting this means building a centralized DevOps team responsible for maintaining platform infrastructure and creating CI/CD pipelines utilized by development teams.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With the rise of microservice-based architectures, a centralized DevOps teams can support many different development teams simultaneously; all of whom may be leveraging different programming languages and automated testing tools.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;While the tools may differ between development teams, the workflow is often the same: unit test, static code analysis, build and publish an artifact, deploy it, and then perform different types of testing against the deployed application.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot; /&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
The Templating Engine Plugin allows you to remove the Jenkinsfile from each repository by defining a common workflow for teams to inherit.  Instead of an entire pipeline definition in each repository, teams supply a configuration file specifying which tools to use for the workflow.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;jte-in-action&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#jte-in-action&quot; /&gt;JTE in Action&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let’s walk through a bare bones example to demonstrate the reusability of templates:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Example Pipeline Template:&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;groovy&quot;&gt;unit_test()
build()
static_code_analysis()&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Templates leverage &lt;em&gt;Steps&lt;/em&gt; contributed by &lt;em&gt;Libraries&lt;/em&gt; to outline a workflow teams must implement.  While a template does get executed just like any other &lt;code&gt;Jenkinsfile&lt;/code&gt; (meaning that the standard scripted and declarative syntax is supported), the goal of a template should be to read like plain English and avoid any technical implementation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock tip&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-tip&quot; title=&quot;Tip&quot; /&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
Leveraging templates in this way lets you separate the &lt;strong&gt;business logic&lt;/strong&gt; (what should happen when) of your pipeline from the
&lt;strong&gt;technical implementation&lt;/strong&gt; (what’s actually going to happen).  The result of this is a CI/CD pipeline that’s proven to be
significantly easier to manage when supporting multiple teams simultaneously.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The steps outlined by this template (&lt;code&gt;unit_test&lt;/code&gt;, &lt;code&gt;build&lt;/code&gt;, and &lt;code&gt;static_code_analysis&lt;/code&gt;) have been named generically on purpose. This way teams can specify &lt;em&gt;different&lt;/em&gt; libraries to use while sharing the &lt;em&gt;same&lt;/em&gt; pipeline.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;implementing-the-template&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#implementing-the-template&quot; /&gt;Implementing the Template&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Implementing a shareable pipeline with the Templating Engine requires a few key components:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Pipeline Template&lt;/strong&gt;: &lt;em&gt;Outline the workflow to be performed&lt;/em&gt;&lt;br /&gt;
&lt;/p&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Libraries&lt;/strong&gt;: &lt;em&gt;Provide technical implementations of the steps of the workflow&lt;/em&gt;&lt;br /&gt;
&lt;/p&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Configuration Files&lt;/strong&gt;: &lt;em&gt;Specify which libraries to use and their configuration&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/li&gt;
&lt;/li&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;step-1-create-a-pipeline-configuration-repository&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#step-1-create-a-pipeline-configuration-repository&quot; /&gt;Step 1: Create a Pipeline Configuration Repository&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A &lt;em&gt;Pipeline Configuration Repository&lt;/em&gt; is used to store common configurations and pipeline templates inherited by teams.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This &lt;a href=&quot;https://github.com/steven-terrana/example-jte-configuration&quot;&gt;example Pipeline Configuration Repository&lt;/a&gt; will later be configured as part of a &lt;a href=&quot;https://boozallen.github.io/jenkins-templating-engine/pages/Governance/index.html#governance-tier&quot;&gt;Governance Tier&lt;/a&gt;: the mechanism in JTE that allows you to build hierarchical configurations representing your organization.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A Governance Tier holds three things:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Pipeline Templates&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A list of Library Sources&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The tier’s configuration file (&lt;code&gt;pipeline_config.groovy&lt;/code&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot; /&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
The pipeline templates and the configuration file for a Governance Tier are stored in the pipeline configuration repository.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When configuring the Governance Tier in Jenkins, you will provide a source code management location for a repository that contains the above components as well as the base directory where these artifacts can be found.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;step-2-create-the-pipeline-template&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#step-2-create-the-pipeline-template&quot; /&gt;Step 2: Create the Pipeline Template&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Next, we’ll create a &lt;code&gt;Jenkinsfile&lt;/code&gt; for the Governance Tier.  In JTE, the &lt;code&gt;Jenkinsfile&lt;/code&gt; is the default pipeline template that an execution will use.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Jenkinsfile&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;groovy&quot;&gt;unit_test()
build()
static_code_analysis()&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;step-3-create-the-libraries&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#step-3-create-the-libraries&quot; /&gt;Step 3: Create the Libraries&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Templating Engine Plugin has implemented a version of Jenkins Shared Libraries to enhance the reusability of libraries.  A library is a root directory within a source code repository that has been configured as a Library Source on a Governance Tier.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In our example, the pipeline template needs to perform unit testing, package an artifact, and run static code analysis.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let’s assume that we have some teams using &lt;strong&gt;gradle&lt;/strong&gt; and some teams using &lt;strong&gt;maven&lt;/strong&gt; to build and test their application but they will both use SonarQube to perform static code analysis.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this scenario, we should create &lt;code&gt;gradle&lt;/code&gt;, &lt;code&gt;maven&lt;/code&gt;, and &lt;code&gt;sonarqube&lt;/code&gt; libraries.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;nowrap&quot;&gt;|- gradle/
  \-- build.groovy
  \-- unit_test.groovy
|- maven/
  \-- build.groovy
  \-- unit_test.groovy
|- sonarqube/
  \-- static_code_analysis.groovy&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;step-4-implement-the-steps&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#step-4-implement-the-steps&quot; /&gt;Step 4: Implement the Steps&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Implementing a library step is exactly the same as just writing regular global variables as part of the default Jenkins Shared Libraries.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For the purposes of this demonstration, we will just have each step print out the step name and contributing library.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;gradle/build.groovy&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;groovy&quot;&gt;&lt;span style=&quot;color:#339;font-weight:bold&quot;&gt;void&lt;/span&gt; call(){
    println &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;gradle: build()&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock tip&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-tip&quot; title=&quot;Tip&quot; /&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
Read more about &lt;a href=&quot;https://boozallen.github.io/jenkins-templating-engine/pages/Library_Development/index.html&quot;&gt;Library Development within JTE&lt;/a&gt;.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;step-5-create-the-configuration-files&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#step-5-create-the-configuration-files&quot; /&gt;Step 5: Create the Configuration Files&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The configuration file for JTE is named &lt;code&gt;pipeline_config.groovy&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the Governance Tier we’ll create a configuration file specifying common configurations between the applications. In this case, both applications are using the &lt;code&gt;sonarqube&lt;/code&gt; library:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;pipeline_config.groovy&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;groovy&quot;&gt;libraries{
  merge = &lt;span style=&quot;color:#069&quot;&gt;true&lt;/span&gt; &lt;span style=&quot;color:#777&quot;&gt;// allow individual apps to contribute additional libraries&lt;/span&gt;
  sonarqube
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Next, we’ll create two more repositories representing the &lt;a href=&quot;https://github.com/steven-terrana/example-jte-app-maven&quot;&gt;maven&lt;/a&gt; and &lt;a href=&quot;https://github.com/steven-terrana/example-jte-app-gradle&quot;&gt;gradle&lt;/a&gt; applications. Within those repositories all we’ll need is an application-specific &lt;code&gt;pipeline_config.groovy&lt;/code&gt; file.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;These repositories both contain an application &lt;code&gt;pipeline_config.groovy&lt;/code&gt; configuration file.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;maven app: pipeline_config.groovy&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;groovy&quot;&gt;libraries{
    maven
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;gradle app: pipeline_config.groovy&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;groovy&quot;&gt;libraries{
    gradle
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;step-6-configure-the-governance-tier-in-jenkins&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#step-6-configure-the-governance-tier-in-jenkins&quot; /&gt;Step 6: Configure the Governance Tier in Jenkins&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now that we have a &lt;a href=&quot;https://github.com/steven-terrana/example-jte-configuration&quot;&gt;Pipeline Configuration Repository&lt;/a&gt; and a &lt;a href=&quot;https://github.com/steven-terrana/example-jte-libraries&quot;&gt;Library Source Repository&lt;/a&gt;, we can configure a &lt;a href=&quot;https://boozallen.github.io/jenkins-templating-engine/pages/Governance/index.html#governance-tier&quot;&gt;Governance Tier&lt;/a&gt; in Jenkins:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image center&quot;&gt;&lt;img src=&quot;https://zbynek.github.io/jenkins.io/order-syntax/images/post-images/2019-05-09-templating-engine/governance_tier.png&quot; alt=&quot;governance tier&quot; /&gt;&lt;/span&gt;
&lt;/p&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot; /&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
This configuration shown in the image above can be found under &lt;code&gt;Manage Jenkins &amp;gt;&amp;gt; Configure System&lt;/code&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock tip&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-tip&quot; title=&quot;Tip&quot; /&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
Through the Templating Engine, you can create a pipeline governance hierarchy matching your organization’s taxonomy by representing this structure via Folders in Jenkins.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;step-7-create-a-multibranch-pipeline-for-both-applications&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#step-7-create-a-multibranch-pipeline-for-both-applications&quot; /&gt;Step 7: Create a Multibranch Pipeline for Both Applications&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When creating Multibranch Pipeline Projects for each app, the Templating Engine plugin supplies a new &lt;code&gt;Project Recognizer&lt;/code&gt;
called &lt;strong&gt;Jenkins Templating Engine&lt;/strong&gt;.  This sets the project to use the Templating Engine framework for all branches within the
repository.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image center&quot;&gt;&lt;img src=&quot;https://zbynek.github.io/jenkins.io/order-syntax/images/post-images/2019-05-09-templating-engine/project_recognizer.png&quot; alt=&quot;project recognizer&quot; /&gt;&lt;/span&gt;
&lt;/p&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot; /&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
You can also set the &lt;strong&gt;Jenkins Templating Engine&lt;/strong&gt; project recognizer for a GitHub Organization project, enabling you to easily share the same pipeline across an entire Github Organization!
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;step-8-run-the-pipelines&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#step-8-run-the-pipelines&quot; /&gt;Step 8: Run the Pipelines&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;That’s it!  Now, both applications will leverage the exact same pipeline template while having the flexibility to select which
tools should be used during each phase of the workflow.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Below is sample output from the console log from both applications pipeline runs:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Gradle:&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;nowrap&quot;&gt;[JTE] Obtained Template Configuration File pipeline_config.groovy from git https://github.com/steven-terrana/example-jte-configuration
[JTE] Obtained Template Configuration File pipeline_config.groovy from git https://github.com/steven-terrana/example-jte-app-gradle.git
[JTE] Loading Library sonarqube from git https://github.com/steven-terrana/example-jte-libraries.git
[JTE] Loading Library gradle from git https://github.com/steven-terrana/example-jte-libraries.git
...
[JTE] Obtained Template Jenkinsfile from git https://github.com/steven-terrana/example-jte-configuration
[JTE][Step - gradle/unit_test]
[Pipeline] echo
gradle: unit_test()
[JTE][Step - gradle/build]
[Pipeline] echo
gradle: build()
[JTE][Step - sonarqube/static_code_analysis]
[Pipeline] echo
sonarqube: static_code_analysis()
[Pipeline] End of Pipeline&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Maven:&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;nowrap&quot;&gt;[JTE] Obtained Template Configuration File pipeline_config.groovy from git https://github.com/steven-terrana/example-jte-configuration
[JTE] Obtained Template Configuration File pipeline_config.groovy from git https://github.com/steven-terrana/example-jte-app-maven.git
[JTE] Loading Library sonarqube from git https://github.com/steven-terrana/example-jte-libraries.git
[JTE] Loading Library maven from git https://github.com/steven-terrana/example-jte-libraries.git
...
[JTE] Obtained Template Jenkinsfile from git https://github.com/steven-terrana/example-jte-configuration
[JTE][Step - maven/unit_test]
[Pipeline] echo
maven: unit_test()
[JTE][Step - maven/build]
[Pipeline] echo
maven: build()
[JTE][Step - sonarqube/static_code_analysis]
[Pipeline] echo
sonarqube: static_code_analysis()
[Pipeline] End of Pipeline&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/ol&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;benefits-of-the-templating-engine&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#benefits-of-the-templating-engine&quot; /&gt;Benefits of the Templating Engine&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image center&quot;&gt;&lt;img src=&quot;https://zbynek.github.io/jenkins.io/order-syntax/images/post-images/2019-05-09-templating-engine/jte_benefits.png&quot; alt=&quot;jte benefits&quot; /&gt;&lt;/span&gt;
&lt;/p&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;apply-organizational-governance&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#apply-organizational-governance&quot; /&gt;Apply Organizational Governance&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Leveraging the Templating Engine Plugin will allow you to define enterprise-scale, approved
workflows that can be used by teams regardless of what tools are being used.  This top-down
approach makes scaling and enforcing DevSecOps principles significantly easier within your organization.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;optimize-code-reuse&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#optimize-code-reuse&quot; /&gt;Optimize Code Reuse&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There’s really no need for every team in your organization to figure out how to do the same things over
and over again.  At Booz Allen, we have seen pipeline development time decrease from months to days as
we have continuously reused and expanded upon our Templating Engine library portfolio as part of our Solutions
Delivery Platform.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;simplify-pipeline-maintainability&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#simplify-pipeline-maintainability&quot; /&gt;Simplify Pipeline Maintainability&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Often DevOps engineers find themselves building and supporting pipelines for multiple development teams at
the same time.  By decoupling the workflow from the technical implementation and consolidating the pipeline
definition to a centralized location, the Templating Engine plugin allows DevOps engineers to scale much faster.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;get-involved&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#get-involved&quot; /&gt;Get Involved!&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;a href=&quot;https://plugins.jenkins.io/templating-engine&quot;&gt;Templating Engine Plugin&lt;/a&gt; has been open sourced and made available in the Jenkins Update Center.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We always appreciate feedback and contributions! If you have an interesting use case or would like to ask questions, try the &lt;a href=&quot;https://gitter.im/jenkinsci/templating-engine-plugin&quot;&gt;templating-engine-plugin on Gitter&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;advanced-features&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#advanced-features&quot; /&gt;Advanced Features&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://boozallen.github.io/jenkins-templating-engine/pages/Governance/conditional_inheritance.html&quot;&gt;Configuration File Conditional Inheritance&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://boozallen.github.io/jenkins-templating-engine/pages/Library_Development/externalizing_config.html&quot;&gt;Externalize Library Configurations&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://boozallen.github.io/jenkins-templating-engine/pages/Library_Development/lifecycle_hooks.html&quot;&gt;Aspect Oriented LifeCycle Hooks&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://boozallen.github.io/jenkins-templating-engine/pages/Governance/index.html#pipeline-template-selection&quot;&gt;Multiple Pipeline Templates&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://boozallen.github.io/jenkins-templating-engine/pages/Templating/configuration_files/default_step_implementation.html&quot;&gt;Default Step Implementation&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://boozallen.github.io/jenkins-templating-engine/pages/Templating/configuration_files/sandboxing.html&quot;&gt;Configuration File DSL Sandboxing&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;more-resources&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#more-resources&quot; /&gt;More Resources&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;for-this-demonstration&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#for-this-demonstration&quot; /&gt;For this Demonstration&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/steven-terrana/example-jte-configuration&quot;&gt;Pipeline Configuration Repository&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/steven-terrana/example-jte-libraries&quot;&gt;Sample Libraries&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/steven-terrana/example-jte-app-maven&quot;&gt;Sample Maven Repository&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/steven-terrana/example-jte-app-gradle&quot;&gt;Sample Gradle Repository&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;additional-resources&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#additional-resources&quot; /&gt;Additional Resources&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://jenkinsci.github.io/templating-engine-plugin/&quot;&gt;Templating Engine Documentation&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/jenkinsci/templating-engine-plugin&quot;&gt;Source Code&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/boozallen/sdp-libraries&quot;&gt;Booz Allen’s SDP Pipeline Libraries&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://boozallen.com&quot;&gt;Booz Allen Hamilton&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://zbynek.github.io/jenkins.io/order-syntax/blog/2019/05/09/chinese-localization/</id>
<title>A Big Step of the Chinese Localization</title>
<updated>2019-12-12T20:07:24+00:00</updated>
<published>2019-05-09T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://zbynek.github.io/jenkins.io/order-syntax/blog/2019/05/09/chinese-localization/" />
<author>
<name>linuxsuren</name>
</author>
<category term="general"></category>
<category term="community"></category>
<category term="localization"></category>
<category term="chinese"></category>
<summary>
Since 2017, I started to do some contributions to the Jenkins community. As a beginner, translation might be
the easiest way to help the project. You don&#8217;t need to understand the whole context, even to create a ticket in the
issue tracker system. Improvement of localization usually is minor. But some problems occurred soon,
there isn&#8217;t a native speaker of Chinese that could review my PRs. So, sometimes my PRs
are delayed from being merged into master.


Some contributors told me that I can start a thread at the mailing list. Normally, discussing at the mailing list
is the open source community way. We got a...
</summary>
<content type="html">
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Since 2017, I started to do some contributions to the Jenkins community. As a beginner, translation might be
the easiest way to help the project. You don’t need to understand the whole context, even to create a ticket in the
issue tracker system. Improvement of localization usually is minor. But some problems occurred soon,
there isn’t a native speaker of Chinese that could review my PRs. So, sometimes my PRs
are delayed from being merged into master.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Some contributors told me that I can start a thread at the mailing list. Normally, discussing at the mailing list
is the open source community way. We got a lot of ideas for the localization from there. As a result,
we achieved some goals that I’d like to share here.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;jep-216&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#jep-216&quot; /&gt;JEP-216&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Previously, language localization files were distributed in core and in each plugin.
For &lt;a href=&quot;https://github.com/jenkinsci/jep/blob/master/jep/216/README.adoc&quot;&gt;this proposal&lt;/a&gt;, each language has a single localization plugin, such as &lt;a href=&quot;https://github.com/jenkinsci/localization-zh-cn-plugin&quot;&gt;Chinese Localization plugin&lt;/a&gt;.
Finally, &lt;a href=&quot;https://github.com/jenkinsci/localization-support-plugin&quot;&gt;Localization Support Plugin&lt;/a&gt; and
&lt;a href=&quot;https://github.com/jenkinsci/localization-zh-cn-plugin&quot;&gt;Chinese Localization plugin&lt;/a&gt; are able to support
all types of localization resource files. From the &lt;a href=&quot;https://plugins.jenkins.io/localization-zh-cn&quot;&gt;plugins website&lt;/a&gt;,
you can see that there are already 13 000 installations.
We removed all Chinese localization files at the &lt;a href=&quot;https://github.com/jenkinsci/jenkins/pull/4008&quot;&gt;PR-4008&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I really appreciate &lt;a href=&quot;https://github.com/daniel-beck&quot;&gt;Daniel Beck&lt;/a&gt; for helping me to add localization support,
&lt;a href=&quot;https://github.com/bitwiseman&quot;&gt;Liam Newman&lt;/a&gt; helping me to review JEP-216, and many other community members.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;chinese-localization-sig&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#chinese-localization-sig&quot; /&gt;Chinese Localization SIG&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We believe that this SIG could help to improve Jenkins experience for Chinese users and gather more contributors
from China. This SIG is responsible for maintaining the &lt;a href=&quot;https://jenkins.io/zh/&quot;&gt;Chinese Jenkins website&lt;/a&gt;,
promoting the Jenkins community in China in the social media with WeChat account. We publish translated blog
articles, Jenkins release notes, JAM or other events at the WeChat account. For now, there are 1800 followers that can
read our news from the last half a year.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Especially, I want to say thanks to &lt;a href=&quot;https://github.com/donhui&quot;&gt;Wang Donghui&lt;/a&gt;, &lt;a href=&quot;https://github.com/zacker330&quot;&gt;Zhai Zhijun&lt;/a&gt;, and other &lt;a href=&quot;https://github.com/jenkins-infra/wechat/graphs/contributors&quot;&gt;contributors&lt;/a&gt;. They did a lot of contributions.
I wish I could see more and more folks join us.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://zbynek.github.io/jenkins.io/order-syntax/blog/2019/05/05/telemetry-success/</id>
<title>First successful use of Jenkins telemetry</title>
<updated>2019-12-12T20:07:24+00:00</updated>
<published>2019-05-05T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://zbynek.github.io/jenkins.io/order-syntax/blog/2019/05/05/telemetry-success/" />
<author>
<name>daniel-beck</name>
</author>
<category term="core"></category>
<category term="security"></category>
<category term="telemetry"></category>
<summary>
Half a year ago we delivered a security fix for Jenkins that had the potential to break the entire Jenkins UI.
We needed to change how Jenkins, through the Stapler web framework, handled HTTP requests, tightening the rules around what requests would be processed by Jenkins.
In the six months since, we didn&#8217;t receive notable reports of problems resulting from this change, and it&#8217;s thanks to the telemetry we gathered beforehand.


The Problem


Jenkins uses the Stapler web framework for HTTP request handling.
Stapler&#8217;s basic premise is that it uses reflective access to code elements matching its naming conventions.
For example, any public method whose name...
</summary>
<content type="html">
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Half a year ago we delivered a security fix for Jenkins that had the potential to break the entire Jenkins UI.
We needed to change how Jenkins, through the Stapler web framework, handled HTTP requests, tightening the rules around what requests would be processed by Jenkins.
In the six months since, we didn’t receive notable reports of problems resulting from this change, and it’s thanks to the telemetry we gathered beforehand.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;the-problem&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#the-problem&quot; /&gt;The Problem&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Jenkins uses the Stapler web framework for HTTP request handling.
Stapler’s basic premise is that it uses reflective access to code elements matching its naming conventions.
For example, any public method whose name starts with &lt;code&gt;get&lt;/code&gt;, and that has a &lt;code&gt;String&lt;/code&gt;, &lt;code&gt;int&lt;/code&gt;, &lt;code&gt;long&lt;/code&gt;, or no argument can be invoked this way on objects that are reachable through these means.
As these naming conventions closely match common code patterns in Java, accessing crafted URLs could invoke methods never intended to be invoked this way.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A simple example of that is a URL every Jenkins user would be familiar with: &lt;code&gt;/job/jobname&lt;/code&gt;.
This ends up invoking a method called &lt;code&gt;#getJob(String)&lt;/code&gt;, with the argument being &lt;code&gt;&quot;jobname&quot;&lt;/code&gt;, on the root application object, and having it handle the rest of the URL, if any.
Of course, this is a URL intended to be accessed this way.
How about invoking &lt;code&gt;Object#getClass()&lt;/code&gt;, followed by &lt;code&gt;Class#getClassLoader()&lt;/code&gt;, by accessing the URL &lt;code&gt;/class/classLoader&lt;/code&gt;?
While this particular chain would not result in a useful response, this doesn’t change that the methods were invoked.
We identified a number of URLs that could be abused to access otherwise inaccessible jobs, or even invoke internal methods in the web application server to invalidate all sessions.
&lt;a href=&quot;https://jenkins.io/security/advisory/2018-12-05/&quot;&gt;The security advisory&lt;/a&gt; provides an overview of the issues we’d identified by then.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;the-idea&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#the-idea&quot; /&gt;The Idea&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To solve this problem inherent in the Stapler framework’s design, we defined rules that restrict invocation beyond what would be allowed by Stapler.
For example, the declared return type of getters now needed to be one defined in Jenkins core or a Jenkins plugin and have either clearly Stapler-related methods (with Stapler annotations, parameter types, etc.) or Stapler-related resource files associated with it.
Otherwise, the type wouldn’t be aware of Stapler, and couldn’t produce a meaningful response anyway.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This meant that getters just declaring &lt;code&gt;Object&lt;/code&gt; (or &lt;code&gt;List&lt;/code&gt;, &lt;code&gt;Map&lt;/code&gt;, etc.) would no longer be allowed by default.
It was clear to the developers working on this problem that we needed the ability to be able to override the default rules for specific getters.
But allowing plugin developers to adapt their plugins after we published the fix wasn’t going to cut it;
Jenkins needed to ship with a comprehensive default whitelist for methods known to not conform to the new rules, so that updating would not result in problems for users.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;the-solution&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#the-solution&quot; /&gt;The Solution&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;While there is tooling like &lt;a href=&quot;https://github.com/jenkinsci/plugin-compat-tester/&quot;&gt;Plugin Compatibility Tester&lt;/a&gt; and &lt;a href=&quot;https://github.com/jenkinsci/acceptance-test-harness&quot;&gt;Acceptance Test Harness&lt;/a&gt;, many Jenkins plugins do not have comprehensive tests of their UI — the Jenkins UI is fairly stable after all.
We did not expect to have sufficient test coverage to deliver a change like this with confidence.
The only way we would be able to build such a comprehensive whitelist would be to add telemetry to Jenkins.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;While Jenkins instances periodically report usage statistics to the Jenkins project, the information included is very bare bones and mostly useful to know the number of installations, the popularity of plugins, and the general size of Jenkins instances through number and types of jobs and agents.
We also didn’t want to just collect data without a clear goal, so we set ourselves some limitations — collect as little data as possible, no personally identifiable information, have a specific purpose for each kind of information we would collect, and define an end date for the collection in advance.
We defined all of this in &lt;a href=&quot;https://github.com/jenkinsci/jep/blob/master/jep/214/README.adoc&quot;&gt;JEP-214&lt;/a&gt;, created the &lt;a href=&quot;https://github.com/jenkins-infra/uplink&quot;&gt;Uplink service that would receive submissions&lt;/a&gt;, and added the basic client framework to Jenkins.
The implementation is fairly basic — we just submit an arbitrary JSON object with some added metadata to a service.
This system would inform tweaks to a security fix we were anxious to get out, after all.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Starting in mid October for weekly releases, and early November for LTS, tens of thousands of Jenkins instances would submit Stapler request dispatch telemetry daily, and we would keep identifying code incompatible with the new rules and amending the fix.
Ultimately, &lt;a href=&quot;https://github.com/jenkinsci/jenkins/blob/44c4d3989232082c254d27ae360aa810669f44b7/core/src/main/resources/jenkins/security/stapler/default-whitelist.txt&quot;&gt;the whitelist&lt;/a&gt; would include a few dozen entries, preventing serious regressions in popular plugins like &lt;a href=&quot;https://plugins.jenkins.io/credentials&quot;&gt;Credentials Plugin&lt;/a&gt;, &lt;a href=&quot;https://plugins.jenkins.io/junit&quot;&gt;JUnit Plugin&lt;/a&gt;, or the Pipeline plugins suite, down to &lt;a href=&quot;https://plugins.jenkins.io/google-cloud-health-check&quot;&gt;Google Health Check Plugin&lt;/a&gt;, a plugin with just 80 installations when we published the fix.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Learning what requests would result in problems also allowed us to write better developer documentation — we already knew what code patterns would break, and how popular each of them was in the plugin ecosystem.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;the-overhaul&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#the-overhaul&quot; /&gt;The Overhaul&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I wrote above:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For example, the declared return type of getters now needed to be one defined in Jenkins core or a Jenkins plugin and have either clearly Stapler-related methods (with Stapler annotations, parameter types, etc.) or Stapler-related resource files associated with it.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;While this was true for the fix during most of development, it isn’t how the fix that we published actually works.
About a month before the intended release date, internal design/code review feedback criticized the complicated and time-consuming implementation that at the time required scanning the class path of Jenkins and all plugins and looking for related resources, and suggested a different approach.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So we tried to require that the declared type or any of its ancestors be annotated with the new annotation &lt;code&gt;@StaplerAccessibleType&lt;/code&gt;, annotated a bunch of types in Jenkins itself (&lt;a href=&quot;https://javadoc.jenkins.io/hudson/model/ModelObject.html&quot;&gt;&lt;code&gt;ModelObject&lt;/code&gt;&lt;/a&gt; being the obvious first choice), and ran our scripts that check to see whether Stapler would be allowed to dispatch methods identified in telemetry.
We’d long since automated the daily update of dispatch telemetry processing, so it was a simple matter of changing which Jenkins build we were working with.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;After a few iterations of adding the annotation to more classes, the results were very positive: Very few additional types needed whitelisting, while many more were no longer (unnecessarily) allowed to be dispatched to.
This experiment, late during development, ended up being essentially the fix we delivered.
We didn’t need to perform costly scanning of the class path on startup — we didn’t need to scan the class path at all — , and the rules governing request dispatch in Stapler, while different from before, are still pretty easy to understand and independent of how components are packaged.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;the-outcome&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#the-outcome&quot; /&gt;The Outcome&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As usual when delivering a fix we expect could result in regressions in plugins, we &lt;a href=&quot;https://wiki.jenkins.io/display/JENKINS/Plugins+affected+by+the+SECURITY-595+fix&quot;&gt;created a wiki page&lt;/a&gt; that users could report problems on.
Right now, there’s one entry on that wiki page.
It is one we were aware of well before release, decided against whitelisting it, and the affected, undocumented feature in Git Plugin ended up being removed.
The situation in our issue tracker is only slightly worse, with two apparently minor issues having been reported in Jira.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Without telemetry, delivering a fix like this one would have been difficult to begin with.
Tinkering with the implementation just a few weeks before release and having any confidence in the result?
Not causing any significant regressions?
I think this would simply be impossible.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://zbynek.github.io/jenkins.io/order-syntax/blog/2019/04/03/security-advisory/</id>
<title>Security spring cleaning</title>
<updated>2019-12-12T20:07:24+00:00</updated>
<published>2019-04-03T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://zbynek.github.io/jenkins.io/order-syntax/blog/2019/04/03/security-advisory/" />
<author>
<name>daniel-beck</name>
</author>
<category term="plugins"></category>
<category term="security"></category>
<summary>
Today we published a security advisory that mostly informs about issues in Jenkins plugins that have no fixes.
What&#8217;s going on?


The Jenkins security team triages incoming reports both to Jira and our non-public mailing list.
Once we&#8217;ve determined it is a plugin not maintained by any Jenkins security team members, we try to inform the plugin maintainer about the issue, offering our help in developing, reviewing, and publishing any fixes.
Sometimes the affected plugin is unmaintained, or maintainers don&#8217;t respond in a timely manner to the notifications or the followup emails we send.


In such cases, we publish security advisories informing users about these...
</summary>
<content type="html">
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Today we published &lt;a href=&quot;https://zbynek.github.io/jenkins.io/order-syntax/security/advisory/2019-04-03/&quot;&gt;a security advisory&lt;/a&gt; that mostly informs about issues in Jenkins plugins that have &lt;em&gt;no fixes&lt;/em&gt;.
What’s going on?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Jenkins security team triages &lt;a href=&quot;https://jenkins.io/security/#reporting-vulnerabilities&quot;&gt;incoming reports both to Jira and our non-public mailing list&lt;/a&gt;.
Once we’ve determined it is a plugin not maintained by any Jenkins security team members, we try to inform the plugin maintainer about the issue, offering our help in developing, reviewing, and publishing any fixes.
Sometimes the affected plugin is unmaintained, or maintainers don’t respond in a timely manner to the notifications or the followup emails we send.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In such cases, we publish &lt;a href=&quot;https://jenkins.io/security/#vulnerabilities-in-plugins&quot;&gt;security advisories informing users about these issues, even if there’s no new release with a fix&lt;/a&gt;.
Doing so allows administrators to make an informed decision about the continued use of plugins with unresolved security vulnerabilities.
Today’s advisory is overwhelmingly such an advisory.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;See a plugin you love on this list and want to help out? &lt;a href=&quot;https://zbynek.github.io/jenkins.io/order-syntax/doc/developer/plugin-governance/adopt-a-plugin/&quot;&gt;Learn about adopting plugins&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://zbynek.github.io/jenkins.io/order-syntax/blog/2019/03/29/becoming-contributor-intro/</id>
<title>The journey of becoming a Jenkins contributor: Introduction</title>
<updated>2019-12-12T20:07:24+00:00</updated>
<published>2019-03-29T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://zbynek.github.io/jenkins.io/order-syntax/blog/2019/03/29/becoming-contributor-intro/" />
<author>
<name>romenrg</name>
</author>
<category term="jenkins"></category>
<category term="community"></category>
<category term="developer"></category>
<category term="contributing"></category>
<category term="newcomer"></category>
<summary>
As a software engineer, for many years I have used open source software (frameworks, libraries, tools&#8230;&#8203;) in the
different companies I have worked at. However, I had never been able to engage in an open-source project as a
contributor, until now.


Since I made my first&#8212;&#8203;ridiculously simple&#8212;&#8203;commit into Jenkins, six months ago (in September, 2018), I have been
attempting to contribute more to the Jenkins project. However, contributing to open-source projects is, in general,
challenging. Especially to long-lived projects, with a lot of history, legacy code and tribal knowledge. It is often
difficult to know where to start and also difficult to come up with a...
</summary>
<content type="html">
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As a software engineer, for many years I have used open source software (frameworks, libraries, tools…​) in the
different companies I have worked at. However, I had never been able to engage in an open-source project as a
contributor, until now.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Since I made my first—​ridiculously simple—​commit into Jenkins, six months ago (in September, 2018), I have been
attempting to contribute more to the Jenkins project. However, contributing to open-source projects is, in general,
challenging. Especially to long-lived projects, with a lot of history, legacy code and tribal knowledge. It is often
difficult to know where to start and also difficult to come up with a plan to keep moving forward and contributing
regularly, and in more meaningful ways over time.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When it comes to the Jenkins project, I have encountered challenges that others trying to get into the community are
likely to encounter. For that reason, I have decided to go ahead and share my journey of becoming a more engaged Jenkins
contributor.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I plan to publish roughly 1 post per month, describing this journey. I will attempt to start contributing to the pieces
that are easier to start with, transitioning towards more complex contributions over time.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;where-to-start&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#where-to-start&quot; /&gt;Where to start&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;jenkins-io&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#jenkins-io&quot; /&gt;jenkins.io&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To become a Jenkins contributor, the most obvious place to start looking at is &lt;a href=&quot;https://jenkins.io&quot;&gt;jenkins.io&lt;/a&gt;. In the
top navbar there is a Community dropdown, with several links to different sections. The first entry,
&lt;a href=&quot;https://jenkins.io/participate/&quot;&gt;Overview&lt;/a&gt;, takes us to the “Participate and contribute” section.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this section we get lots of information about the many ways in which we can engage with the Jenkins project and
community. Even though the intention is to display all the possible options, allowing the reader to choose, it can feel
a bit overwhelming.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://zbynek.github.io/jenkins.io/order-syntax/images/post-images/2019-03-29-becoming-contributor/jenkins-participate-page.png&quot; alt=&quot;jenkins participate page&quot;&gt;
&lt;/img&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The page is divided into two columns, the column on the left shows the different options to participate, while the
column on the right shows the different options to contribute.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;suggestions-to-participate&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#suggestions-to-participate&quot; /&gt;Suggestions to Participate&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the left column of the “Participate and contribute” page, there are several ideas on how to engage with the community,
ranging from communicating to reviewing changes or providing feedback.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;One of the pieces that got me confused at first in this area were the communication channels. There are many different
channels for communication. There are &lt;a href=&quot;https://jenkins.io/mailing-lists&quot;&gt;several mailing lists&lt;/a&gt; and there are also IRC
and Gitter channels.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;During my first attempts to get involved, I subscribed to many of the mailing lists and several IRC and Gitter channels,
but I quickly noticed that there is significant communication going on; and that most threads in the most active lists
and channels are specific to issues users or developers have. So, unless your goal is to support other users right away
(if you are an experienced Jenkins user already it might be the case) or you plan to ask questions that you already
have in mind, I would advise against spending too much time on this at first.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Even though it is great to see how the community members support each other, the amount of communication might be
overwhelming for a newcomer, and if you are also trying to contribute to the project (either with translations,
documentation or code), following these conversations might not be the best way to start.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;suggestions-to-contribute&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#suggestions-to-contribute&quot; /&gt;Suggestions to Contribute&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the right column of the “Participate and contribute” page there are several ideas on how to contribute, mostly
grouped into: writing code, translating, documenting and testing.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In following posts, I will be going through all of these types of contributions, as well as through some of the
suggestions to participate, which include reviewing Pull Requests (PRs) or providing feedback (either reporting new
issues or replicating cases other users have already described, providing additional information to help the maintainer
reproduce and fix them).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;my-first-contribution-in-this-journey&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#my-first-contribution-in-this-journey&quot; /&gt;My first contribution in this journey&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When looking at the “Participate and contribute” page, I noticed a couple of things in that page that I could help
improve. And I was actually planning to pick one of those as the first example of a contribution for this post. But
when I was reading the contributing guidelines of the repository, I found an even easier contribution I could make,
which I thought would be a great example to illustrate how simple it could be to start contributing. So I decided to go
ahead with it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;the-website-repository&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#the-website-repository&quot; /&gt;The website repository&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the ”Document” section there is a link to the
&lt;a href=&quot;https://github.com/jenkins-infra/jenkins.io/blob/master/CONTRIBUTING.adoc&quot;&gt;contributing guidelines of the jenkins.io repository&lt;/a&gt;.
The CONTRIBUTING file is a common file present in the root folder of most open-source-project repositories.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Following the link to that file, I reached the jenkins.io repository, which is the one that contains the sources for
the corresponding website—​which also includes this blog. And, in fact, the contributing file was the first file I
wanted to review, in order to learn more about how to contribute to the website.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;found-a-broken-link&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#found-a-broken-link&quot; /&gt;Found a broken link&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When reading the contributing file, I learned about the Awestruct static site generator, which is the tool used to
transform the AsciiDoc source files in the repo into a website. However, when I clicked the link to learn more about it, I noticed it was broken. The domain had expired.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://zbynek.github.io/jenkins.io/order-syntax/images/post-images/2019-03-29-becoming-contributor/awestruct-site.png&quot; alt=&quot;awestruct site&quot;&gt;
&lt;/img&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;why-not-fix-it&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#why-not-fix-it&quot; /&gt;Why not fix it?&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This was the opportunity I chose to show other newcomers how easy it can be to start contributing.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;forking-the-repository&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#forking-the-repository&quot; /&gt;Forking the repository&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The first step, as usual, would be to fork the repository and clone it to my machine.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;applying-the-change&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#applying-the-change&quot; /&gt;Applying the change&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The next step would be to apply the change to the corresponding file. To do so, I created a new branch
“alternative-awestruct-link” and applied the change there:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://zbynek.github.io/jenkins.io/order-syntax/images/post-images/2019-03-29-becoming-contributor/making-change.png&quot; alt=&quot;making change&quot;&gt;
&lt;/img&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;making-sure-everything-builds-correctly-and-tests-pass&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#making-sure-everything-builds-correctly-and-tests-pass&quot; /&gt;Making sure everything builds correctly and tests pass&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Even though in this case my contribution was not to the actual website, but to the contributing guidelines (and for
that reason was unlikely to break anything), it is a best practice to get used to the regular process every
contribution should follow, making sure everything builds correctly after any change.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As stated in the contributing guidelines themselves, in order to build this repository we just have to run the default
“make” target, in the root of the repository.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://zbynek.github.io/jenkins.io/order-syntax/images/post-images/2019-03-29-becoming-contributor/executing-make.png&quot; alt=&quot;executing make&quot;&gt;
&lt;/img&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Once the command execution finishes, if everything looks good, we are ready to go to the next step: creating the PR.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;creating-the-pr&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#creating-the-pr&quot; /&gt;Creating the PR&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Once my change had been committed and pushed to my repository, I just had to create the PR. We have an easy way to do so
by just clicking the link that we get in our git logs once the push is completed, although we can create the PR directly
through the GitHub UI, if we prefer so; or even use &lt;a href=&quot;https://github.com/github/hub&quot;&gt;“hub”&lt;/a&gt;, the GitHub CLI, to do it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this case, I just clicked the link, which took me to the PR creation page on GitHub. Once there, I added a
description and created the PR.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://zbynek.github.io/jenkins.io/order-syntax/images/post-images/2019-03-29-becoming-contributor/creating-pr.png&quot; alt=&quot;creating pr&quot;&gt;
&lt;/img&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When a PR to this repository is created, we notice there are some checks that start running. Jenkins repositories are
configured to notify the &lt;a href=&quot;https://ci.jenkins.io/&quot;&gt;“Jenkins on Jenkins”&lt;/a&gt;, which runs the corresponding CI pipelines for
each repository, as described in the corresponding &lt;a href=&quot;https://github.com/jenkins-infra/jenkins.io/blob/master/Jenkinsfile&quot;&gt;Jenkinsfile&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Once the checks are completed, we can see the result in the PR:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://zbynek.github.io/jenkins.io/order-syntax/images/post-images/2019-03-29-becoming-contributor/pr-created-passing.png&quot; alt=&quot;pr created passing&quot;&gt;
&lt;/img&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;And if we want to see the details of the execution, we can follow the “Show all checks” link:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://zbynek.github.io/jenkins.io/order-syntax/images/post-images/2019-03-29-becoming-contributor/pr-checks-jenkins.png&quot; alt=&quot;pr checks jenkins&quot;&gt;
&lt;/img&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;pr-review&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#pr-review&quot; /&gt;PR Review&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now that the PR has been created and all automated checks are passing, we only have to wait for peer code reviews.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Once someone approves the PR and it is later merged, your contribution is integrated into the master branch of the
repository, becoming part of the next release.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://zbynek.github.io/jenkins.io/order-syntax/images/post-images/2019-03-29-becoming-contributor/pr-merged.png&quot; alt=&quot;pr merged&quot;&gt;
&lt;/img&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;i-have-contributed&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#i-have-contributed&quot; /&gt;I have contributed!&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This contribution I made is a trivial one, with very little complexity and it might not be the most interesting one if
you are trying to contribute code to the Jenkins project itself.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;However, for me, as the contributor, it was a great way to get familiar with the repository, its contributing
guidelines, the technology behind the jenkins.io website; and, above anything else, to start “losing the fear” of
contributing to an open source project like Jenkins.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So, if you are in the same position I was, do not hesitate. Go ahead and find your own first contribution. Every little
counts!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://zbynek.github.io/jenkins.io/order-syntax/blog/2019/03/28/outreachy-review/</id>
<title>Outreachy 2018-2019 In Review</title>
<updated>2019-12-12T20:07:24+00:00</updated>
<published>2019-03-28T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://zbynek.github.io/jenkins.io/order-syntax/blog/2019/03/28/outreachy-review/" />
<author>
<name>jvz</name>
</author>
<category term="outreachy"></category>
<summary>
Over the past three months, I have been mentoring two Outreachy interns, David and Latha, with my co-mentor, Jeff Thompson.
Our project was to introduce a standardized way for creating an audit log of Jenkins and plugins using Apache Log4j Audit.
While this type of feature is addressed by other existing plugins, there is no unifying way for plugins to contribute their own actions.
This project provided ample opportunities for each of our interns to experience the community processes for starting a new Jenkins plugin, contributing changes to Jenkins itself in order to support more audit event types, using CICD principles, and developing...
</summary>
<content type="html">
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Over the past three months, I have been mentoring two Outreachy interns, &lt;a href=&quot;https://jenkins.io/blog/2018/12/10/outreachy-audit-log-plugin/&quot;&gt;David and Latha&lt;/a&gt;, with my co-mentor, Jeff Thompson.
&lt;a href=&quot;https://github.com/jenkinsci/audit-log-plugin&quot;&gt;Our project&lt;/a&gt; was to introduce a standardized way for creating an audit log of Jenkins and plugins using Apache Log4j Audit.
While this type of feature is addressed by other existing plugins, there is no unifying way for plugins to contribute their own actions.
This project provided ample opportunities for each of our interns to experience the community processes for starting a new Jenkins plugin, contributing changes to Jenkins itself in order to support more audit event types, using CICD principles, and developing a Jenkins Enhancement Proposal to begin the standardization process of audit logging throughout the ecosystem.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;During this internship, David and Latha contributed several aspects of the project, much of which lays the foundation for easily instrumenting more subsystems and plugins with audit logs.
A template &lt;code&gt;log4j2.xml&lt;/code&gt; file is used for allowing more complex logging output configurations with a configuration UI.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://zbynek.github.io/jenkins.io/order-syntax/images/audit-log-1.0.png&quot; alt=&quot;Audit log configuration UI&quot;&gt;
&lt;/img&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;New APIs have been introduced in Jenkins to allow for more authentication-related events to be audited by the plugin.
Audit events have been defined for a few authorization scenarios and some build events.
For example, here is a snippet of audit log output for a build execution in the JSON layout:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;nowrap&quot;&gt;{
  &quot;thread&quot; : &quot;Executor #0 for master : executing test #1&quot;,
  &quot;level&quot; : &quot;OFF&quot;,
  &quot;loggerName&quot; : &quot;AuditLogger&quot;,
  &quot;marker&quot; : {
    &quot;name&quot; : &quot;Audit&quot;,
    &quot;parents&quot; : [ {
      &quot;name&quot; : &quot;EVENT&quot;
    } ]
  },
  &quot;message&quot; : &quot;Audit [buildStart buildNumber=\&quot;1\&quot; cause=\&quot;[Started by user anonymous]\&quot; projectName=\&quot;test\&quot; timestamp=\&quot;Mon Mar 25 13:48:09 CDT 2019\&quot; userId=\&quot;SYSTEM\&quot;]&quot;,
  &quot;endOfBatch&quot; : false,
  &quot;loggerFqcn&quot; : &quot;org.apache.logging.log4j.audit.AuditLogger&quot;,
  &quot;instant&quot; : {
    &quot;epochSecond&quot; : 1553539689,
    &quot;nanoOfSecond&quot; : 810000000
  },
  &quot;contextMap&quot; : { },
  &quot;threadId&quot; : 54,
  &quot;threadPriority&quot; : 5
}
{
  &quot;thread&quot; : &quot;Executor #0 for master : executing test #1&quot;,
  &quot;level&quot; : &quot;OFF&quot;,
  &quot;loggerName&quot; : &quot;AuditLogger&quot;,
  &quot;marker&quot; : {
    &quot;name&quot; : &quot;Audit&quot;,
    &quot;parents&quot; : [ {
      &quot;name&quot; : &quot;EVENT&quot;
    } ]
  },
  &quot;message&quot; : &quot;Audit [buildFinish buildNumber=\&quot;1\&quot; cause=\&quot;[Started by user anonymous]\&quot; projectName=\&quot;test\&quot; timestamp=\&quot;Mon Mar 25 13:48:10 CDT 2019\&quot; userId=\&quot;SYSTEM\&quot;]&quot;,
  &quot;endOfBatch&quot; : false,
  &quot;loggerFqcn&quot; : &quot;org.apache.logging.log4j.audit.AuditLogger&quot;,
  &quot;instant&quot; : {
    &quot;epochSecond&quot; : 1553539690,
    &quot;nanoOfSecond&quot; : 155000000
  },
  &quot;contextMap&quot; : { },
  &quot;threadId&quot; : 54,
  &quot;threadPriority&quot; : 5
}&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Best of all, this project has helped instill important software engineering values such as automated testing and continuous delivery.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As we conclude this round, we look forward to participating in the next Outreachy internship to continue this project and grow the community.
For more information about the next round, check out &lt;a href=&quot;https://www.outreachy.org/may-2019-august-2019-outreachy-internships/communities/jenkins/&quot;&gt;the Outreachy website&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://zbynek.github.io/jenkins.io/order-syntax/blog/2019/03/12/cdf-launch/</id>
<title>Jenkins is joining the Continuous Delivery Foundation</title>
<updated>2019-12-12T20:07:24+00:00</updated>
<published>2019-03-12T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://zbynek.github.io/jenkins.io/order-syntax/blog/2019/03/12/cdf-launch/" />
<author>
<name>kohsuke</name>
</author>
<category term="cdf"></category>
<category term="general"></category>
<category term="community"></category>
<summary>
Today Linux Foundation, along with CloudBees, Google, and a number of other companies, launched a new open-source software foundation called Continuous Delivery Foundation (CDF.) The CDF believes in the power of Continuous Delivery, and it aims to foster and sustain the ecosystem of open-source, vendor neutral projects.


Jenkins contributors have decided that our project should join this new foundation. This discussion happened over a period of time, with a relatively succinct summary of the motivation comes from here.


Now, as a user, what does this mean?




First, there will be no big disruption/discontinuity. The same people are still here, no URL is changing,...
</summary>
<content type="html">
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image right&quot;&gt;&lt;img src=&quot;https://zbynek.github.io/jenkins.io/order-syntax/images/cdf/logo/cdf-logo.png&quot; alt=&quot;CDF&quot; width=&quot;300&quot; /&gt;&lt;/span&gt;
&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Today &lt;a href=&quot;https://www.linuxfoundation.org/&quot;&gt;Linux Foundation&lt;/a&gt;, along with &lt;a href=&quot;https://www.cloudbees.com/&quot;&gt;CloudBees&lt;/a&gt;, &lt;a href=&quot;https://about.google/&quot;&gt;Google&lt;/a&gt;, and &lt;a href=&quot;https://cd.foundation/members/&quot;&gt;a number of other companies&lt;/a&gt;, launched a new open-source software foundation called &lt;a href=&quot;https://cd.foundation/&quot;&gt;Continuous Delivery Foundation&lt;/a&gt; (CDF.) The CDF believes in the power of Continuous Delivery, and it aims to foster and sustain the ecosystem of open-source, vendor neutral projects.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Jenkins contributors &lt;a href=&quot;https://groups.google.com/forum/#!topic/jenkinsci-dev/KFhQaYEl70c&quot;&gt;have decided&lt;/a&gt; that our project should join this new foundation. This discussion happened over a period of time, with a relatively succinct summary of the motivation comes from &lt;a href=&quot;https://groups.google.com/d/topic/jenkinsci-dev/1w57jl3K4S4/discussion&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now, as a user, what does this mean?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;First, there will be no big disruption/discontinuity. The same people are still here, no URL is changing, releases will come out like they’ve always been. We will make the decisions the same way as we’ve been making, and pull requests land the same way. Changes will happen continuously over the period of time.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;This is yet another testament to the maturity and the importance of the Jenkins project in this space. With &lt;a href=&quot;https://stats.jenkins.io/jenkins-stats/svg/svgs.html&quot;&gt;a quarter million Jenkins running around the globe&lt;/a&gt;, it’s truly rocking the world of software development from IoT to games, cloud native webapps to machine learning projects. It makes Jenkins such an obvious, safe choice for anyone seeking open heterogeneous DevOps strategy.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The CDF creates a level playing field that is well-understood to organized contributors, which further, translate into more contributors, hence resulting in a better Jenkins, faster. Over the past years, the Jenkins project has been steadily growing &lt;a href=&quot;https://jenkins.io/sigs/&quot;&gt;more&lt;/a&gt; &lt;a href=&quot;https://github.com/jenkinsci/jep/tree/master/jep#index-of-jenkins-enhancement-proposals&quot;&gt;structures&lt;/a&gt; that provide this clarity, and this is the newest step on this trajectory.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Any serious dev teams are combining multiple tools and services to cover the whole software development spectrum. A lot of work gets reinvented in those teams to integrate those tools together. Jenkins will be working more closely with other projects under the umbrella of the CDF, which would result in better aligned software with less overlap.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Our users are practitioners trying to improve the software development process in their organizations. They get that CI/CD/automation which unlocks the productivity that their organizations need, but that’s not always obvious to their organizations as a whole. So our users often struggle to get the necessary support. The CDF will advocate for the practice of Continuous Delivery, and because it’s not coming from a vendor or a project, it will reach the people who can lend that support.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So I hope you can see why we are so excited about this!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In fact, for us, this is an idea that we’ve been cooking for close to two years. I don’t think I’m exaggerating much to say the whole idea of the CDF &lt;em&gt;started&lt;/em&gt; from the Jenkins project.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A lot of people have done so much work behind the scene to make this happen. But a few people played such instrumental roles that I have to personally thank them namely, &lt;a href=&quot;https://github.com/caniszczyk&quot;&gt;Chris Aniszczyk&lt;/a&gt; for his patience and persistence, &lt;a href=&quot;https://github.com/rtyler&quot;&gt;R. Tyler Croy&lt;/a&gt; for cooking and evolving the idea, and &lt;a href=&quot;https://github.com/tracymiranda&quot;&gt;Tracy Miranda&lt;/a&gt; for bringing this idea into a reality.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://zbynek.github.io/jenkins.io/order-syntax/blog/2019/03/11/let-s-celebrate-java-11-support/</id>
<title>Let&#39;s celebrate Java 11 Support on Jenkins</title>
<updated>2019-12-12T20:07:24+00:00</updated>
<published>2019-03-11T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://zbynek.github.io/jenkins.io/order-syntax/blog/2019/03/11/let-s-celebrate-java-11-support/" />
<author>
<name>alecharp</name>
</author>
<category term="core"></category>
<category term="developer"></category>
<category term="java11"></category>
<category term="community"></category>
<category term="platform-sig"></category>
<summary>
This is a joint blog post prepared by the Java 11 Support Team: Adrien Lecharpentier, Ashton Treadway, Baptiste Mathus, Jenn Briden, Kevin Earls, María Isabel Vilacides, Mark Waite, Ramón León and Oleg Nenashev.








We have worked hard for this and it&#8217;s now here.
We are thrilled to announce full support for Java 11 in Jenkins starting from Jenkins 2.164 (released on Feb 10, 2019) and LTS 2.164.1 (ETA: March 14th).
This means you can now run your Jenkins masters and agents with a Java 11 JVM.


Starting in June 2018, many events were organized to improve Jenkins code base and add Java 11 support.
Beyond...
</summary>
<content type="html">
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot; /&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
This is a joint blog post prepared by the Java 11 Support Team: Adrien Lecharpentier, Ashton Treadway, Baptiste Mathus, Jenn Briden, Kevin Earls, María Isabel Vilacides, Mark Waite, Ramón León and Oleg Nenashev.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image right center&quot;&gt;&lt;img src=&quot;https://zbynek.github.io/jenkins.io/order-syntax/images/logos/formal/256.png&quot; alt=&quot;Jenkins Java&quot; /&gt;&lt;/span&gt;
&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We have worked hard for this and it’s now here.
We are thrilled to announce &lt;strong&gt;full support for Java 11 in Jenkins&lt;/strong&gt; starting from Jenkins 2.164 (released on Feb 10, 2019) and LTS 2.164.1 (ETA: March 14th).
This means you can now run your Jenkins masters and agents with a Java 11 JVM.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Starting in June 2018, many events were organized to improve Jenkins code base and add Java 11 support.
Beyond these events, Core/Plugins maintainers and many other contributors have worked hard to make sure they discover and solve as many issues as possible related to Java 11 support.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The effort to support Java 11 led to the creation of the &lt;a href=&quot;https://github.com/jenkinsci/jep/blob/master/jep/211/README.adoc&quot;&gt;JEP-211: Java 10+ support in Jenkins&lt;/a&gt;.
It also spurred the creation of the &lt;a href=&quot;https://jenkins.io/sigs/platform&quot;&gt;Platform Special Interest Group&lt;/a&gt; to coordinate the Java 11 work and other platform support efforts.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;celebration&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#celebration&quot; /&gt;Celebration&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We’d like to take a moment to thank everyone involved in these tasks: code contributors, issue reporters, testers, event planners and attendees and all those in the community who have generously lent their time and support to this effort.
Thank you all!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here are some of the contributors who helped with this task (alphabetical order):&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Alex Earl,
Alyssa Tong,
Ashton Treadway,
Baptiste Mathus,
Carlos Sanchez,
Daniel Beck,
David Aldrich,
Denis Digtyar,
Devin Nusbaum,
Emeric Vernat,
Evaristo Gutierrez,
Gavin Mogan,
Gianpaolo Macario,
Isabel Vilacides,
James Howe,
Jeff Pearce,
Jeff Thompson,
Jenn Briden,
Jesse Glick,
Jonah Graham,
Kevin Earls,
Ksenia Nenasheva,
Kohsuke Kawaguchi,
Liam Newman,
Mandy Chung,
Mark Waite,
Nicolas De Loof,
Oleg Nenashev,
Oliver Gondža,
Olivier Lamy,
Olivier Vernin,
Parker Ennis,
Paul Sandoz,
Ramón León,
Sam Van Oort,
Tobias Getrost,
Tracy Miranda,
Ulli Hafner,
Vincent Latombe,
Wadeck Follonier&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;(We are deeply sorry if we missed anyone in this list.)&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;guidelines&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#guidelines&quot; /&gt;Guidelines&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In order to keep it simple, here is how you can start Jenkins on Java 11 using the Docker image.
You can select a Java 11 based image by suffixing the tag of the image with &lt;code&gt;-jdk11&lt;/code&gt;.
If you are upgrading an existing instance please read the &lt;a href=&quot;https://zbynek.github.io/jenkins.io/order-syntax/doc/administration/requirements/upgrade-java-guidelines/&quot;&gt;Upgrading Jenkins Java version from 8 to 11&lt;/a&gt; page before upgrading.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So you can run Jenkins on Java 11 with:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;shell&quot;&gt;docker run -p 50000:50000 -p 8080:8080 jenkins/jenkins:2.164-jdk11&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;However, and as always, you can still start Jenkins with other methods.
Please see the more detailed documentation at &lt;a href=&quot;https://zbynek.github.io/jenkins.io/order-syntax/doc/administration/requirements/jenkins-on-java-11&quot;&gt;Running Jenkins on Java 11&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;developer-guidelines&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#developer-guidelines&quot; /&gt;Developer guidelines&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For developers involved in Jenkins development, you can find details on developing and testing Jenkins to run on Java 11 on the &lt;a href=&quot;https://wiki.jenkins.io/display/JENKINS/Java+11+Developer+Guidelines&quot;&gt;Java 11 Developer Guidelines&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This resource regroups the modifications which might need to be done in order to validate the compatibility of plugins for Java 11.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;whats-next&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#whats-next&quot; /&gt;What’s next&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Even though this is a big achievement, we still have work to do.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Our first priority is adding Java 11 support to &lt;a href=&quot;https://github.com/jenkinsci/jenkinsfile-runner&quot;&gt;JenkinsFile Runner&lt;/a&gt; project.
From there, we will move on to port Java 11 support to the &lt;a href=&quot;https://github.com/jenkins-x&quot;&gt;Jenkins X&lt;/a&gt; project and the &lt;a href=&quot;https://zbynek.github.io/jenkins.io/order-syntax/projects/evergreen/&quot;&gt;Evergreen&lt;/a&gt; project.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So, even if this is a big deal to us, this is not the end of the story.
It is a major step that will benefit users, developers, and members of the Jenkins community.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;reference-links&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#reference-links&quot; /&gt;Reference links&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://zbynek.github.io/jenkins.io/order-syntax/doc/administration/requirements/jenkins-on-java-11&quot;&gt;Running Jenkins on Java 11&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://wiki.jenkins.io/display/JENKINS/Known+Java+11+Compatibility+issues&quot; class=&quot;bare&quot;&gt;https://wiki.jenkins.io/display/JENKINS/Known+Java+11+Compatibility+issues&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://wiki.jenkins.io/display/JENKINS/Java+11+Developer+Guidelines&quot; class=&quot;bare&quot;&gt;https://wiki.jenkins.io/display/JENKINS/Java+11+Developer+Guidelines&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/jenkinsci/jep/blob/master/jep/211/README.adoc&quot;&gt;JEP-211: Java 11 support in Jenkins&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://zbynek.github.io/jenkins.io/order-syntax/blog/2019/03/04/gsoc2019-announcement/</id>
<title>Jenkins is accepted to Google Summer Of Code 2019!</title>
<updated>2019-12-12T20:07:24+00:00</updated>
<published>2019-03-04T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://zbynek.github.io/jenkins.io/order-syntax/blog/2019/03/04/gsoc2019-announcement/" />
<author>
<name>oleg_nenashev</name>
</author>
<category term="gsoc"></category>
<category term="gsoc2019"></category>
<category term="events"></category>
<category term="community"></category>
<summary>
On behalf of the Jenkins GSoC org team,
I am happy to announce that the Jenkins project has been accepted to
Google Summer of Code 2019.
This year we invite students and mentors to join the Jenkins community and work together
on enhancing the Jenkins ecosystem.


Just to provide some numbers, this is the biggest GSoC ever, 206 organizations will participate in GSoC this year.
And it will be hopefully the biggest year for Jenkins as well.
We have 25 project ideas
and more than 30 potential mentors (and counting!).
It is already more than in 2016 and 2018 combined.
There are many plugins, SIGs and sub-projects which have already...
</summary>
<content type="html">
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image right center&quot;&gt;&lt;img src=&quot;https://zbynek.github.io/jenkins.io/order-syntax/images/gsoc/jenkins-gsoc-logo_small.png&quot; alt=&quot;Jenkins GSoC&quot; /&gt;&lt;/span&gt;
&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On behalf of the Jenkins GSoC org team,
I am happy to announce that the Jenkins project &lt;strong&gt;has been accepted&lt;/strong&gt; to
&lt;a href=&quot;https://summerofcode.withgoogle.com/&quot;&gt;Google Summer of Code 2019&lt;/a&gt;.
This year we invite students and mentors to join the Jenkins community and work together
on enhancing the Jenkins ecosystem.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Just to provide some numbers, this is the biggest GSoC ever, 206 organizations will participate in GSoC this year.
And it will be hopefully the biggest year for Jenkins as well.
We have 25 &lt;a href=&quot;https://zbynek.github.io/jenkins.io/order-syntax/projects/gsoc/2019/project-ideas&quot;&gt;project ideas&lt;/a&gt;
and more than 30 potential mentors (and counting!).
It is already more than in 2016 and 2018 combined.
There are many plugins, SIGs and sub-projects which have already joined GSoC this year.
And we have already received messages and first contributions from dozens of students, yey!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;What’s next?&lt;/strong&gt;
GSoC is officially announced, and please expect more students to contact projects in our
&lt;a href=&quot;https://zbynek.github.io/jenkins.io/order-syntax/projects/gsoc/#contacts&quot;&gt;Gitter channels and mailing lists&lt;/a&gt;.
Many communications will also happen in SIG and sub-project channels.
We will be working hard in order to help students to find interesting projects, to explore the area,
and to prepare their project proposals before the deadline on April 9th.
Then we will process the applications, select projects and assign mentor teams.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;All information about the Jenkins GSoC is available on its &lt;a href=&quot;https://zbynek.github.io/jenkins.io/order-syntax/projects/gsoc/&quot;&gt;sub-project page&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;i-am-a-student-how-do-i-apply&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#i-am-a-student-how-do-i-apply&quot; /&gt;I am a student. How do I apply?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;See the &lt;a href=&quot;https://zbynek.github.io/jenkins.io/order-syntax/projects/gsoc/students&quot;&gt;Information for students&lt;/a&gt; page for full application guidelines.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We encourage interested students to reach out to the Jenkins community early and to start exploring project ideas.
All project ideas have chats and mailing lists referenced on their pages.
We will be also organizing office hours for students,
and you can use these meetings to meet org admins and mentors and to ask questions.
Also, join our &lt;a href=&quot;https://gitter.im/jenkinsci/gsoc-sig&quot;&gt;Gitter channel&lt;/a&gt; and the
&lt;a href=&quot;https://groups.google.com/forum/#!forum/jenkinsci-gsoc-all-public&quot;&gt;mailing list&lt;/a&gt;
to receive information about such incoming events in the project.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The application period starts on March 25th, but you can prepare now!
Use the time before the application period to discuss and improve your project proposals.
We also recommend that you become familiar with Jenkins and start exploring your proposal areas.
Project ideas include quick-start guidelines and reference newbie-friendly issues
which may help with initial study.
If you do not see anything interesting,
you can &lt;a href=&quot;https://zbynek.github.io/jenkins.io/order-syntax/projects/gsoc/proposing-project-ideas/&quot;&gt;propose your own project idea&lt;/a&gt;
or check out ideas proposed by &lt;a href=&quot;https://summerofcode.withgoogle.com/organizations/&quot;&gt;other organizations&lt;/a&gt;
participating in GSoC.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;i-want-to-be-a-mentor-is-it-too-late&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#i-want-to-be-a-mentor-is-it-too-late&quot; /&gt;I want to be a mentor. Is it too late?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It’s not!
We are looking for more project ideas and for Jenkins contributors/users
who are passionate about Jenkins and want to mentor students.
No hardcore experience required, mentors can study the project internals together with students and technical advisors.
We are especially interested in ideas beyond the Java stack, and in ideas focusing new technologies and areas
(e.g. Kubernetes, IoT, Python, Go, whatever).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can either propose a new project idea or join an existing one.
See the &lt;a href=&quot;https://zbynek.github.io/jenkins.io/order-syntax/blog/2018/12/26/gsoc-2019-call-for-mentors/&quot;&gt;Call for Mentors post&lt;/a&gt;
and &lt;a href=&quot;https://zbynek.github.io/jenkins.io/order-syntax/projects/gsoc/mentors&quot;&gt;Information for mentors&lt;/a&gt; for details.
If you want to propose a new project,
please do so by March 11th so that students have time to explore them and to prepare their proposals.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This year mentorship does &lt;strong&gt;NOT&lt;/strong&gt; require strong expertise in Jenkins development.
The objective is to guide students and to get involved into the Jenkins community.
GSoC org admins will help to find advisers if special expertise is required.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;important-dates&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#important-dates&quot; /&gt;Important dates&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Mar 11 - deadline for new GSoC project idea proposals&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Apr 09 - deadline for student applications&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;May 06 - accepted projects announced, teams start community bonding and coding&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Aug 26 - coding period ends&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Sep 03 - Results announced&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;See the &lt;a href=&quot;https://summerofcode.withgoogle.com/how-it-works/#timeline&quot;&gt;GSoC Timeline&lt;/a&gt; for more info.
In the Jenkins project we will also organize special events during and after GSoC (e.g. at Jenkins world).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
</content>
</entry>
</feed>
